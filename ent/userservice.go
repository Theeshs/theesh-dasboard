// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"theedashboard/ent/user"
	"theedashboard/ent/userservice"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UserService is the model entity for the UserService schema.
type UserService struct {
	config `json:"-"`
	// ID of the ent.
	ID uint `json:"id,omitempty"`
	// ServiceName holds the value of the "service_name" field.
	ServiceName string `json:"service_name,omitempty"`
	// ServiceDescription holds the value of the "service_description" field.
	ServiceDescription string `json:"service_description,omitempty"`
	// ServiceIcon holds the value of the "service_icon" field.
	ServiceIcon string `json:"service_icon,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uint `json:"user_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserServiceQuery when eager-loading is set.
	Edges        UserServiceEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserServiceEdges holds the relations/edges for other nodes in the graph.
type UserServiceEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserServiceEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserService) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userservice.FieldID, userservice.FieldUserID:
			values[i] = new(sql.NullInt64)
		case userservice.FieldServiceName, userservice.FieldServiceDescription, userservice.FieldServiceIcon:
			values[i] = new(sql.NullString)
		case userservice.FieldCreatedAt, userservice.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserService fields.
func (us *UserService) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userservice.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			us.ID = uint(value.Int64)
		case userservice.FieldServiceName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field service_name", values[i])
			} else if value.Valid {
				us.ServiceName = value.String
			}
		case userservice.FieldServiceDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field service_description", values[i])
			} else if value.Valid {
				us.ServiceDescription = value.String
			}
		case userservice.FieldServiceIcon:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field service_icon", values[i])
			} else if value.Valid {
				us.ServiceIcon = value.String
			}
		case userservice.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				us.CreatedAt = value.Time
			}
		case userservice.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				us.UpdatedAt = value.Time
			}
		case userservice.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				us.UserID = uint(value.Int64)
			}
		default:
			us.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserService.
// This includes values selected through modifiers, order, etc.
func (us *UserService) Value(name string) (ent.Value, error) {
	return us.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the UserService entity.
func (us *UserService) QueryUser() *UserQuery {
	return NewUserServiceClient(us.config).QueryUser(us)
}

// Update returns a builder for updating this UserService.
// Note that you need to call UserService.Unwrap() before calling this method if this UserService
// was returned from a transaction, and the transaction was committed or rolled back.
func (us *UserService) Update() *UserServiceUpdateOne {
	return NewUserServiceClient(us.config).UpdateOne(us)
}

// Unwrap unwraps the UserService entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (us *UserService) Unwrap() *UserService {
	_tx, ok := us.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserService is not a transactional entity")
	}
	us.config.driver = _tx.drv
	return us
}

// String implements the fmt.Stringer.
func (us *UserService) String() string {
	var builder strings.Builder
	builder.WriteString("UserService(")
	builder.WriteString(fmt.Sprintf("id=%v, ", us.ID))
	builder.WriteString("service_name=")
	builder.WriteString(us.ServiceName)
	builder.WriteString(", ")
	builder.WriteString("service_description=")
	builder.WriteString(us.ServiceDescription)
	builder.WriteString(", ")
	builder.WriteString("service_icon=")
	builder.WriteString(us.ServiceIcon)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(us.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(us.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", us.UserID))
	builder.WriteByte(')')
	return builder.String()
}

// UserServices is a parsable slice of UserService.
type UserServices []*UserService

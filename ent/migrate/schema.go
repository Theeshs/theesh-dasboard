// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AlembicVersionColumns holds the columns for the "alembic_version" table.
	AlembicVersionColumns = []*schema.Column{
		{Name: "version_num", Type: field.TypeString},
	}
	// AlembicVersionTable holds the schema information for the "alembic_version" table.
	AlembicVersionTable = &schema.Table{
		Name:       "alembic_version",
		Columns:    AlembicVersionColumns,
		PrimaryKey: []*schema.Column{AlembicVersionColumns[0]},
	}
	// EducationColumns holds the columns for the "education" table.
	EducationColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint, Increment: true, SchemaType: map[string]string{"postgres": "serial"}},
		{Name: "institue_name", Type: field.TypeString},
		{Name: "start_date", Type: field.TypeTime},
		{Name: "end_date", Type: field.TypeTime, Nullable: true},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "mode_of_study", Type: field.TypeString},
		{Name: "degree_type", Type: field.TypeString},
		{Name: "area_of_study", Type: field.TypeString},
		{Name: "currenty_studying", Type: field.TypeBool, Nullable: true},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "user_id", Type: field.TypeUint, Nullable: true, SchemaType: map[string]string{"postgres": "serial"}},
	}
	// EducationTable holds the schema information for the "education" table.
	EducationTable = &schema.Table{
		Name:       "education",
		Columns:    EducationColumns,
		PrimaryKey: []*schema.Column{EducationColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "education_user_educations",
				Columns:    []*schema.Column{EducationColumns[11]},
				RefColumns: []*schema.Column{UserColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// EmailsColumns holds the columns for the "emails" table.
	EmailsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint, Increment: true, SchemaType: map[string]string{"postgres": "serial"}},
		{Name: "call_back_email", Type: field.TypeString},
		{Name: "message", Type: field.TypeString, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "subject", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
	}
	// EmailsTable holds the schema information for the "emails" table.
	EmailsTable = &schema.Table{
		Name:       "emails",
		Columns:    EmailsColumns,
		PrimaryKey: []*schema.Column{EmailsColumns[0]},
	}
	// ExperienceColumns holds the columns for the "experience" table.
	ExperienceColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint, Increment: true, SchemaType: map[string]string{"postgres": "serial"}},
		{Name: "company_name", Type: field.TypeString},
		{Name: "start_date", Type: field.TypeTime},
		{Name: "end_date", Type: field.TypeTime, Nullable: true},
		{Name: "current_place", Type: field.TypeBool, Nullable: true},
		{Name: "position", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "user_id", Type: field.TypeUint, Nullable: true, SchemaType: map[string]string{"postgres": "serial"}},
	}
	// ExperienceTable holds the schema information for the "experience" table.
	ExperienceTable = &schema.Table{
		Name:       "experience",
		Columns:    ExperienceColumns,
		PrimaryKey: []*schema.Column{ExperienceColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "experience_user_experiences",
				Columns:    []*schema.Column{ExperienceColumns[9]},
				RefColumns: []*schema.Column{UserColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// RepositoriesColumns holds the columns for the "repositories" table.
	RepositoriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint, Increment: true, SchemaType: map[string]string{"postgres": "serial"}},
		{Name: "repo_name", Type: field.TypeString},
		{Name: "repo_description", Type: field.TypeString, Nullable: true},
		{Name: "repo_url", Type: field.TypeString},
		{Name: "repo_language", Type: field.TypeString, Nullable: true},
		{Name: "repo_created_at", Type: field.TypeTime},
		{Name: "repo_updated_at", Type: field.TypeTime},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "show_on_profile", Type: field.TypeBool},
		{Name: "order", Type: field.TypeInt32},
		{Name: "user_id", Type: field.TypeUint, Nullable: true, SchemaType: map[string]string{"postgres": "serial"}},
	}
	// RepositoriesTable holds the schema information for the "repositories" table.
	RepositoriesTable = &schema.Table{
		Name:       "repositories",
		Columns:    RepositoriesColumns,
		PrimaryKey: []*schema.Column{RepositoriesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "repositories_user_repositories",
				Columns:    []*schema.Column{RepositoriesColumns[11]},
				RefColumns: []*schema.Column{UserColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// SkillColumns holds the columns for the "skill" table.
	SkillColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint, Increment: true, SchemaType: map[string]string{"postgres": "serial"}},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
	}
	// SkillTable holds the schema information for the "skill" table.
	SkillTable = &schema.Table{
		Name:       "skill",
		Columns:    SkillColumns,
		PrimaryKey: []*schema.Column{SkillColumns[0]},
	}
	// UserColumns holds the columns for the "user" table.
	UserColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint, Increment: true, SchemaType: map[string]string{"postgres": "serial"}},
		{Name: "first_name", Type: field.TypeString, Nullable: true},
		{Name: "last_name", Type: field.TypeString, Nullable: true},
		{Name: "dob", Type: field.TypeTime, Nullable: true},
		{Name: "username", Type: field.TypeString},
		{Name: "password", Type: field.TypeString},
		{Name: "email", Type: field.TypeString},
		{Name: "github_username", Type: field.TypeString, Nullable: true},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "mobile_number", Type: field.TypeInt32, Nullable: true},
		{Name: "address_block", Type: field.TypeString, Nullable: true},
		{Name: "address_street", Type: field.TypeString, Nullable: true},
		{Name: "recidential_country", Type: field.TypeString, Nullable: true},
		{Name: "nationality", Type: field.TypeString, Nullable: true},
	}
	// UserTable holds the schema information for the "user" table.
	UserTable = &schema.Table{
		Name:       "user",
		Columns:    UserColumns,
		PrimaryKey: []*schema.Column{UserColumns[0]},
	}
	// UserProjectsColumns holds the columns for the "user_projects" table.
	UserProjectsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint, Increment: true, SchemaType: map[string]string{"postgres": "serial"}},
		{Name: "project_name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "from_date", Type: field.TypeTime, Nullable: true},
		{Name: "to_date", Type: field.TypeTime, Nullable: true},
		{Name: "project_link", Type: field.TypeString, Nullable: true},
		{Name: "technologies", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "user_id", Type: field.TypeUint, Nullable: true, SchemaType: map[string]string{"postgres": "serial"}},
	}
	// UserProjectsTable holds the schema information for the "user_projects" table.
	UserProjectsTable = &schema.Table{
		Name:       "user_projects",
		Columns:    UserProjectsColumns,
		PrimaryKey: []*schema.Column{UserProjectsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_projects_user_user_projects",
				Columns:    []*schema.Column{UserProjectsColumns[9]},
				RefColumns: []*schema.Column{UserColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UserServicesColumns holds the columns for the "user_services" table.
	UserServicesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint, Increment: true, SchemaType: map[string]string{"postgres": "serial"}},
		{Name: "service_name", Type: field.TypeString, Nullable: true},
		{Name: "service_description", Type: field.TypeString, Nullable: true},
		{Name: "service_icon", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "user_id", Type: field.TypeUint, Nullable: true, SchemaType: map[string]string{"postgres": "serial"}},
	}
	// UserServicesTable holds the schema information for the "user_services" table.
	UserServicesTable = &schema.Table{
		Name:       "user_services",
		Columns:    UserServicesColumns,
		PrimaryKey: []*schema.Column{UserServicesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_services_user_user_services",
				Columns:    []*schema.Column{UserServicesColumns[6]},
				RefColumns: []*schema.Column{UserColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UserSkillAssociationColumns holds the columns for the "user_skill_association" table.
	UserSkillAssociationColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint, Increment: true, SchemaType: map[string]string{"postgres": "serial"}},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "percentage", Type: field.TypeInt32, Nullable: true},
		{Name: "skill_id", Type: field.TypeUint, Unique: true, Nullable: true, SchemaType: map[string]string{"postgres": "serial"}},
		{Name: "user_id", Type: field.TypeUint, Nullable: true, SchemaType: map[string]string{"postgres": "serial"}},
	}
	// UserSkillAssociationTable holds the schema information for the "user_skill_association" table.
	UserSkillAssociationTable = &schema.Table{
		Name:       "user_skill_association",
		Columns:    UserSkillAssociationColumns,
		PrimaryKey: []*schema.Column{UserSkillAssociationColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_skill_association_skill_user_skill_association",
				Columns:    []*schema.Column{UserSkillAssociationColumns[4]},
				RefColumns: []*schema.Column{SkillColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "user_skill_association_user_user_skill_associations",
				Columns:    []*schema.Column{UserSkillAssociationColumns[5]},
				RefColumns: []*schema.Column{UserColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AlembicVersionTable,
		EducationTable,
		EmailsTable,
		ExperienceTable,
		RepositoriesTable,
		SkillTable,
		UserTable,
		UserProjectsTable,
		UserServicesTable,
		UserSkillAssociationTable,
	}
)

func init() {
	AlembicVersionTable.Annotation = &entsql.Annotation{
		Table: "alembic_version",
	}
	EducationTable.ForeignKeys[0].RefTable = UserTable
	EducationTable.Annotation = &entsql.Annotation{
		Table: "education",
	}
	ExperienceTable.ForeignKeys[0].RefTable = UserTable
	ExperienceTable.Annotation = &entsql.Annotation{
		Table: "experience",
	}
	RepositoriesTable.ForeignKeys[0].RefTable = UserTable
	SkillTable.Annotation = &entsql.Annotation{
		Table: "skill",
	}
	UserTable.Annotation = &entsql.Annotation{
		Table: "user",
	}
	UserProjectsTable.ForeignKeys[0].RefTable = UserTable
	UserServicesTable.ForeignKeys[0].RefTable = UserTable
	UserSkillAssociationTable.ForeignKeys[0].RefTable = SkillTable
	UserSkillAssociationTable.ForeignKeys[1].RefTable = UserTable
	UserSkillAssociationTable.Annotation = &entsql.Annotation{
		Table: "user_skill_association",
	}
}

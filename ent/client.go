// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"theedashboard/ent/migrate"

	"theedashboard/ent/alembicversion"
	"theedashboard/ent/education"
	"theedashboard/ent/email"
	"theedashboard/ent/experience"
	"theedashboard/ent/repository"
	"theedashboard/ent/skill"
	"theedashboard/ent/user"
	"theedashboard/ent/userproject"
	"theedashboard/ent/userservice"
	"theedashboard/ent/userskillassociation"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// AlembicVersion is the client for interacting with the AlembicVersion builders.
	AlembicVersion *AlembicVersionClient
	// Education is the client for interacting with the Education builders.
	Education *EducationClient
	// Email is the client for interacting with the Email builders.
	Email *EmailClient
	// Experience is the client for interacting with the Experience builders.
	Experience *ExperienceClient
	// Repository is the client for interacting with the Repository builders.
	Repository *RepositoryClient
	// Skill is the client for interacting with the Skill builders.
	Skill *SkillClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserProject is the client for interacting with the UserProject builders.
	UserProject *UserProjectClient
	// UserService is the client for interacting with the UserService builders.
	UserService *UserServiceClient
	// UserSkillAssociation is the client for interacting with the UserSkillAssociation builders.
	UserSkillAssociation *UserSkillAssociationClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.AlembicVersion = NewAlembicVersionClient(c.config)
	c.Education = NewEducationClient(c.config)
	c.Email = NewEmailClient(c.config)
	c.Experience = NewExperienceClient(c.config)
	c.Repository = NewRepositoryClient(c.config)
	c.Skill = NewSkillClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserProject = NewUserProjectClient(c.config)
	c.UserService = NewUserServiceClient(c.config)
	c.UserSkillAssociation = NewUserSkillAssociationClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                  ctx,
		config:               cfg,
		AlembicVersion:       NewAlembicVersionClient(cfg),
		Education:            NewEducationClient(cfg),
		Email:                NewEmailClient(cfg),
		Experience:           NewExperienceClient(cfg),
		Repository:           NewRepositoryClient(cfg),
		Skill:                NewSkillClient(cfg),
		User:                 NewUserClient(cfg),
		UserProject:          NewUserProjectClient(cfg),
		UserService:          NewUserServiceClient(cfg),
		UserSkillAssociation: NewUserSkillAssociationClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                  ctx,
		config:               cfg,
		AlembicVersion:       NewAlembicVersionClient(cfg),
		Education:            NewEducationClient(cfg),
		Email:                NewEmailClient(cfg),
		Experience:           NewExperienceClient(cfg),
		Repository:           NewRepositoryClient(cfg),
		Skill:                NewSkillClient(cfg),
		User:                 NewUserClient(cfg),
		UserProject:          NewUserProjectClient(cfg),
		UserService:          NewUserServiceClient(cfg),
		UserSkillAssociation: NewUserSkillAssociationClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		AlembicVersion.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.AlembicVersion, c.Education, c.Email, c.Experience, c.Repository, c.Skill,
		c.User, c.UserProject, c.UserService, c.UserSkillAssociation,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.AlembicVersion, c.Education, c.Email, c.Experience, c.Repository, c.Skill,
		c.User, c.UserProject, c.UserService, c.UserSkillAssociation,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AlembicVersionMutation:
		return c.AlembicVersion.mutate(ctx, m)
	case *EducationMutation:
		return c.Education.mutate(ctx, m)
	case *EmailMutation:
		return c.Email.mutate(ctx, m)
	case *ExperienceMutation:
		return c.Experience.mutate(ctx, m)
	case *RepositoryMutation:
		return c.Repository.mutate(ctx, m)
	case *SkillMutation:
		return c.Skill.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *UserProjectMutation:
		return c.UserProject.mutate(ctx, m)
	case *UserServiceMutation:
		return c.UserService.mutate(ctx, m)
	case *UserSkillAssociationMutation:
		return c.UserSkillAssociation.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AlembicVersionClient is a client for the AlembicVersion schema.
type AlembicVersionClient struct {
	config
}

// NewAlembicVersionClient returns a client for the AlembicVersion from the given config.
func NewAlembicVersionClient(c config) *AlembicVersionClient {
	return &AlembicVersionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `alembicversion.Hooks(f(g(h())))`.
func (c *AlembicVersionClient) Use(hooks ...Hook) {
	c.hooks.AlembicVersion = append(c.hooks.AlembicVersion, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `alembicversion.Intercept(f(g(h())))`.
func (c *AlembicVersionClient) Intercept(interceptors ...Interceptor) {
	c.inters.AlembicVersion = append(c.inters.AlembicVersion, interceptors...)
}

// Create returns a builder for creating a AlembicVersion entity.
func (c *AlembicVersionClient) Create() *AlembicVersionCreate {
	mutation := newAlembicVersionMutation(c.config, OpCreate)
	return &AlembicVersionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AlembicVersion entities.
func (c *AlembicVersionClient) CreateBulk(builders ...*AlembicVersionCreate) *AlembicVersionCreateBulk {
	return &AlembicVersionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AlembicVersionClient) MapCreateBulk(slice any, setFunc func(*AlembicVersionCreate, int)) *AlembicVersionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AlembicVersionCreateBulk{err: fmt.Errorf("calling to AlembicVersionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AlembicVersionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AlembicVersionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AlembicVersion.
func (c *AlembicVersionClient) Update() *AlembicVersionUpdate {
	mutation := newAlembicVersionMutation(c.config, OpUpdate)
	return &AlembicVersionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AlembicVersionClient) UpdateOne(av *AlembicVersion) *AlembicVersionUpdateOne {
	mutation := newAlembicVersionMutation(c.config, OpUpdateOne, withAlembicVersion(av))
	return &AlembicVersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AlembicVersionClient) UpdateOneID(id string) *AlembicVersionUpdateOne {
	mutation := newAlembicVersionMutation(c.config, OpUpdateOne, withAlembicVersionID(id))
	return &AlembicVersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AlembicVersion.
func (c *AlembicVersionClient) Delete() *AlembicVersionDelete {
	mutation := newAlembicVersionMutation(c.config, OpDelete)
	return &AlembicVersionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AlembicVersionClient) DeleteOne(av *AlembicVersion) *AlembicVersionDeleteOne {
	return c.DeleteOneID(av.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AlembicVersionClient) DeleteOneID(id string) *AlembicVersionDeleteOne {
	builder := c.Delete().Where(alembicversion.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AlembicVersionDeleteOne{builder}
}

// Query returns a query builder for AlembicVersion.
func (c *AlembicVersionClient) Query() *AlembicVersionQuery {
	return &AlembicVersionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAlembicVersion},
		inters: c.Interceptors(),
	}
}

// Get returns a AlembicVersion entity by its id.
func (c *AlembicVersionClient) Get(ctx context.Context, id string) (*AlembicVersion, error) {
	return c.Query().Where(alembicversion.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AlembicVersionClient) GetX(ctx context.Context, id string) *AlembicVersion {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AlembicVersionClient) Hooks() []Hook {
	return c.hooks.AlembicVersion
}

// Interceptors returns the client interceptors.
func (c *AlembicVersionClient) Interceptors() []Interceptor {
	return c.inters.AlembicVersion
}

func (c *AlembicVersionClient) mutate(ctx context.Context, m *AlembicVersionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AlembicVersionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AlembicVersionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AlembicVersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AlembicVersionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AlembicVersion mutation op: %q", m.Op())
	}
}

// EducationClient is a client for the Education schema.
type EducationClient struct {
	config
}

// NewEducationClient returns a client for the Education from the given config.
func NewEducationClient(c config) *EducationClient {
	return &EducationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `education.Hooks(f(g(h())))`.
func (c *EducationClient) Use(hooks ...Hook) {
	c.hooks.Education = append(c.hooks.Education, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `education.Intercept(f(g(h())))`.
func (c *EducationClient) Intercept(interceptors ...Interceptor) {
	c.inters.Education = append(c.inters.Education, interceptors...)
}

// Create returns a builder for creating a Education entity.
func (c *EducationClient) Create() *EducationCreate {
	mutation := newEducationMutation(c.config, OpCreate)
	return &EducationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Education entities.
func (c *EducationClient) CreateBulk(builders ...*EducationCreate) *EducationCreateBulk {
	return &EducationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EducationClient) MapCreateBulk(slice any, setFunc func(*EducationCreate, int)) *EducationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EducationCreateBulk{err: fmt.Errorf("calling to EducationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EducationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EducationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Education.
func (c *EducationClient) Update() *EducationUpdate {
	mutation := newEducationMutation(c.config, OpUpdate)
	return &EducationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EducationClient) UpdateOne(e *Education) *EducationUpdateOne {
	mutation := newEducationMutation(c.config, OpUpdateOne, withEducation(e))
	return &EducationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EducationClient) UpdateOneID(id uint) *EducationUpdateOne {
	mutation := newEducationMutation(c.config, OpUpdateOne, withEducationID(id))
	return &EducationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Education.
func (c *EducationClient) Delete() *EducationDelete {
	mutation := newEducationMutation(c.config, OpDelete)
	return &EducationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EducationClient) DeleteOne(e *Education) *EducationDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EducationClient) DeleteOneID(id uint) *EducationDeleteOne {
	builder := c.Delete().Where(education.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EducationDeleteOne{builder}
}

// Query returns a query builder for Education.
func (c *EducationClient) Query() *EducationQuery {
	return &EducationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEducation},
		inters: c.Interceptors(),
	}
}

// Get returns a Education entity by its id.
func (c *EducationClient) Get(ctx context.Context, id uint) (*Education, error) {
	return c.Query().Where(education.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EducationClient) GetX(ctx context.Context, id uint) *Education {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Education.
func (c *EducationClient) QueryUser(e *Education) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(education.Table, education.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, education.UserTable, education.UserColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EducationClient) Hooks() []Hook {
	return c.hooks.Education
}

// Interceptors returns the client interceptors.
func (c *EducationClient) Interceptors() []Interceptor {
	return c.inters.Education
}

func (c *EducationClient) mutate(ctx context.Context, m *EducationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EducationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EducationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EducationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EducationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Education mutation op: %q", m.Op())
	}
}

// EmailClient is a client for the Email schema.
type EmailClient struct {
	config
}

// NewEmailClient returns a client for the Email from the given config.
func NewEmailClient(c config) *EmailClient {
	return &EmailClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `email.Hooks(f(g(h())))`.
func (c *EmailClient) Use(hooks ...Hook) {
	c.hooks.Email = append(c.hooks.Email, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `email.Intercept(f(g(h())))`.
func (c *EmailClient) Intercept(interceptors ...Interceptor) {
	c.inters.Email = append(c.inters.Email, interceptors...)
}

// Create returns a builder for creating a Email entity.
func (c *EmailClient) Create() *EmailCreate {
	mutation := newEmailMutation(c.config, OpCreate)
	return &EmailCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Email entities.
func (c *EmailClient) CreateBulk(builders ...*EmailCreate) *EmailCreateBulk {
	return &EmailCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EmailClient) MapCreateBulk(slice any, setFunc func(*EmailCreate, int)) *EmailCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EmailCreateBulk{err: fmt.Errorf("calling to EmailClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EmailCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EmailCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Email.
func (c *EmailClient) Update() *EmailUpdate {
	mutation := newEmailMutation(c.config, OpUpdate)
	return &EmailUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EmailClient) UpdateOne(e *Email) *EmailUpdateOne {
	mutation := newEmailMutation(c.config, OpUpdateOne, withEmail(e))
	return &EmailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EmailClient) UpdateOneID(id uint) *EmailUpdateOne {
	mutation := newEmailMutation(c.config, OpUpdateOne, withEmailID(id))
	return &EmailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Email.
func (c *EmailClient) Delete() *EmailDelete {
	mutation := newEmailMutation(c.config, OpDelete)
	return &EmailDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EmailClient) DeleteOne(e *Email) *EmailDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EmailClient) DeleteOneID(id uint) *EmailDeleteOne {
	builder := c.Delete().Where(email.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EmailDeleteOne{builder}
}

// Query returns a query builder for Email.
func (c *EmailClient) Query() *EmailQuery {
	return &EmailQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEmail},
		inters: c.Interceptors(),
	}
}

// Get returns a Email entity by its id.
func (c *EmailClient) Get(ctx context.Context, id uint) (*Email, error) {
	return c.Query().Where(email.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EmailClient) GetX(ctx context.Context, id uint) *Email {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *EmailClient) Hooks() []Hook {
	return c.hooks.Email
}

// Interceptors returns the client interceptors.
func (c *EmailClient) Interceptors() []Interceptor {
	return c.inters.Email
}

func (c *EmailClient) mutate(ctx context.Context, m *EmailMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EmailCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EmailUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EmailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EmailDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Email mutation op: %q", m.Op())
	}
}

// ExperienceClient is a client for the Experience schema.
type ExperienceClient struct {
	config
}

// NewExperienceClient returns a client for the Experience from the given config.
func NewExperienceClient(c config) *ExperienceClient {
	return &ExperienceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `experience.Hooks(f(g(h())))`.
func (c *ExperienceClient) Use(hooks ...Hook) {
	c.hooks.Experience = append(c.hooks.Experience, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `experience.Intercept(f(g(h())))`.
func (c *ExperienceClient) Intercept(interceptors ...Interceptor) {
	c.inters.Experience = append(c.inters.Experience, interceptors...)
}

// Create returns a builder for creating a Experience entity.
func (c *ExperienceClient) Create() *ExperienceCreate {
	mutation := newExperienceMutation(c.config, OpCreate)
	return &ExperienceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Experience entities.
func (c *ExperienceClient) CreateBulk(builders ...*ExperienceCreate) *ExperienceCreateBulk {
	return &ExperienceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ExperienceClient) MapCreateBulk(slice any, setFunc func(*ExperienceCreate, int)) *ExperienceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ExperienceCreateBulk{err: fmt.Errorf("calling to ExperienceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ExperienceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ExperienceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Experience.
func (c *ExperienceClient) Update() *ExperienceUpdate {
	mutation := newExperienceMutation(c.config, OpUpdate)
	return &ExperienceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExperienceClient) UpdateOne(e *Experience) *ExperienceUpdateOne {
	mutation := newExperienceMutation(c.config, OpUpdateOne, withExperience(e))
	return &ExperienceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExperienceClient) UpdateOneID(id uint) *ExperienceUpdateOne {
	mutation := newExperienceMutation(c.config, OpUpdateOne, withExperienceID(id))
	return &ExperienceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Experience.
func (c *ExperienceClient) Delete() *ExperienceDelete {
	mutation := newExperienceMutation(c.config, OpDelete)
	return &ExperienceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ExperienceClient) DeleteOne(e *Experience) *ExperienceDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ExperienceClient) DeleteOneID(id uint) *ExperienceDeleteOne {
	builder := c.Delete().Where(experience.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExperienceDeleteOne{builder}
}

// Query returns a query builder for Experience.
func (c *ExperienceClient) Query() *ExperienceQuery {
	return &ExperienceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeExperience},
		inters: c.Interceptors(),
	}
}

// Get returns a Experience entity by its id.
func (c *ExperienceClient) Get(ctx context.Context, id uint) (*Experience, error) {
	return c.Query().Where(experience.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExperienceClient) GetX(ctx context.Context, id uint) *Experience {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Experience.
func (c *ExperienceClient) QueryUser(e *Experience) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(experience.Table, experience.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, experience.UserTable, experience.UserColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ExperienceClient) Hooks() []Hook {
	return c.hooks.Experience
}

// Interceptors returns the client interceptors.
func (c *ExperienceClient) Interceptors() []Interceptor {
	return c.inters.Experience
}

func (c *ExperienceClient) mutate(ctx context.Context, m *ExperienceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ExperienceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ExperienceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ExperienceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ExperienceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Experience mutation op: %q", m.Op())
	}
}

// RepositoryClient is a client for the Repository schema.
type RepositoryClient struct {
	config
}

// NewRepositoryClient returns a client for the Repository from the given config.
func NewRepositoryClient(c config) *RepositoryClient {
	return &RepositoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `repository.Hooks(f(g(h())))`.
func (c *RepositoryClient) Use(hooks ...Hook) {
	c.hooks.Repository = append(c.hooks.Repository, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `repository.Intercept(f(g(h())))`.
func (c *RepositoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.Repository = append(c.inters.Repository, interceptors...)
}

// Create returns a builder for creating a Repository entity.
func (c *RepositoryClient) Create() *RepositoryCreate {
	mutation := newRepositoryMutation(c.config, OpCreate)
	return &RepositoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Repository entities.
func (c *RepositoryClient) CreateBulk(builders ...*RepositoryCreate) *RepositoryCreateBulk {
	return &RepositoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RepositoryClient) MapCreateBulk(slice any, setFunc func(*RepositoryCreate, int)) *RepositoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RepositoryCreateBulk{err: fmt.Errorf("calling to RepositoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RepositoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RepositoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Repository.
func (c *RepositoryClient) Update() *RepositoryUpdate {
	mutation := newRepositoryMutation(c.config, OpUpdate)
	return &RepositoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RepositoryClient) UpdateOne(r *Repository) *RepositoryUpdateOne {
	mutation := newRepositoryMutation(c.config, OpUpdateOne, withRepository(r))
	return &RepositoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RepositoryClient) UpdateOneID(id uint) *RepositoryUpdateOne {
	mutation := newRepositoryMutation(c.config, OpUpdateOne, withRepositoryID(id))
	return &RepositoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Repository.
func (c *RepositoryClient) Delete() *RepositoryDelete {
	mutation := newRepositoryMutation(c.config, OpDelete)
	return &RepositoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RepositoryClient) DeleteOne(r *Repository) *RepositoryDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RepositoryClient) DeleteOneID(id uint) *RepositoryDeleteOne {
	builder := c.Delete().Where(repository.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RepositoryDeleteOne{builder}
}

// Query returns a query builder for Repository.
func (c *RepositoryClient) Query() *RepositoryQuery {
	return &RepositoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRepository},
		inters: c.Interceptors(),
	}
}

// Get returns a Repository entity by its id.
func (c *RepositoryClient) Get(ctx context.Context, id uint) (*Repository, error) {
	return c.Query().Where(repository.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RepositoryClient) GetX(ctx context.Context, id uint) *Repository {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Repository.
func (c *RepositoryClient) QueryUser(r *Repository) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(repository.Table, repository.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, repository.UserTable, repository.UserColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RepositoryClient) Hooks() []Hook {
	return c.hooks.Repository
}

// Interceptors returns the client interceptors.
func (c *RepositoryClient) Interceptors() []Interceptor {
	return c.inters.Repository
}

func (c *RepositoryClient) mutate(ctx context.Context, m *RepositoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RepositoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RepositoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RepositoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RepositoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Repository mutation op: %q", m.Op())
	}
}

// SkillClient is a client for the Skill schema.
type SkillClient struct {
	config
}

// NewSkillClient returns a client for the Skill from the given config.
func NewSkillClient(c config) *SkillClient {
	return &SkillClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `skill.Hooks(f(g(h())))`.
func (c *SkillClient) Use(hooks ...Hook) {
	c.hooks.Skill = append(c.hooks.Skill, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `skill.Intercept(f(g(h())))`.
func (c *SkillClient) Intercept(interceptors ...Interceptor) {
	c.inters.Skill = append(c.inters.Skill, interceptors...)
}

// Create returns a builder for creating a Skill entity.
func (c *SkillClient) Create() *SkillCreate {
	mutation := newSkillMutation(c.config, OpCreate)
	return &SkillCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Skill entities.
func (c *SkillClient) CreateBulk(builders ...*SkillCreate) *SkillCreateBulk {
	return &SkillCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SkillClient) MapCreateBulk(slice any, setFunc func(*SkillCreate, int)) *SkillCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SkillCreateBulk{err: fmt.Errorf("calling to SkillClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SkillCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SkillCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Skill.
func (c *SkillClient) Update() *SkillUpdate {
	mutation := newSkillMutation(c.config, OpUpdate)
	return &SkillUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SkillClient) UpdateOne(s *Skill) *SkillUpdateOne {
	mutation := newSkillMutation(c.config, OpUpdateOne, withSkill(s))
	return &SkillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SkillClient) UpdateOneID(id uint) *SkillUpdateOne {
	mutation := newSkillMutation(c.config, OpUpdateOne, withSkillID(id))
	return &SkillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Skill.
func (c *SkillClient) Delete() *SkillDelete {
	mutation := newSkillMutation(c.config, OpDelete)
	return &SkillDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SkillClient) DeleteOne(s *Skill) *SkillDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SkillClient) DeleteOneID(id uint) *SkillDeleteOne {
	builder := c.Delete().Where(skill.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SkillDeleteOne{builder}
}

// Query returns a query builder for Skill.
func (c *SkillClient) Query() *SkillQuery {
	return &SkillQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSkill},
		inters: c.Interceptors(),
	}
}

// Get returns a Skill entity by its id.
func (c *SkillClient) Get(ctx context.Context, id uint) (*Skill, error) {
	return c.Query().Where(skill.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SkillClient) GetX(ctx context.Context, id uint) *Skill {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUserSkillAssociation queries the user_skill_association edge of a Skill.
func (c *SkillClient) QueryUserSkillAssociation(s *Skill) *UserSkillAssociationQuery {
	query := (&UserSkillAssociationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(skill.Table, skill.FieldID, id),
			sqlgraph.To(userskillassociation.Table, userskillassociation.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, skill.UserSkillAssociationTable, skill.UserSkillAssociationColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SkillClient) Hooks() []Hook {
	return c.hooks.Skill
}

// Interceptors returns the client interceptors.
func (c *SkillClient) Interceptors() []Interceptor {
	return c.inters.Skill
}

func (c *SkillClient) mutate(ctx context.Context, m *SkillMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SkillCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SkillUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SkillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SkillDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Skill mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uint) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id uint) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uint) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uint) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEducations queries the educations edge of a User.
func (c *UserClient) QueryEducations(u *User) *EducationQuery {
	query := (&EducationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(education.Table, education.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.EducationsTable, user.EducationsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExperiences queries the experiences edge of a User.
func (c *UserClient) QueryExperiences(u *User) *ExperienceQuery {
	query := (&ExperienceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(experience.Table, experience.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ExperiencesTable, user.ExperiencesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRepositories queries the repositories edge of a User.
func (c *UserClient) QueryRepositories(u *User) *RepositoryQuery {
	query := (&RepositoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(repository.Table, repository.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.RepositoriesTable, user.RepositoriesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserProjects queries the user_projects edge of a User.
func (c *UserClient) QueryUserProjects(u *User) *UserProjectQuery {
	query := (&UserProjectClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(userproject.Table, userproject.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UserProjectsTable, user.UserProjectsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserServices queries the user_services edge of a User.
func (c *UserClient) QueryUserServices(u *User) *UserServiceQuery {
	query := (&UserServiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(userservice.Table, userservice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UserServicesTable, user.UserServicesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserSkillAssociations queries the user_skill_associations edge of a User.
func (c *UserClient) QueryUserSkillAssociations(u *User) *UserSkillAssociationQuery {
	query := (&UserSkillAssociationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(userskillassociation.Table, userskillassociation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UserSkillAssociationsTable, user.UserSkillAssociationsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// UserProjectClient is a client for the UserProject schema.
type UserProjectClient struct {
	config
}

// NewUserProjectClient returns a client for the UserProject from the given config.
func NewUserProjectClient(c config) *UserProjectClient {
	return &UserProjectClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userproject.Hooks(f(g(h())))`.
func (c *UserProjectClient) Use(hooks ...Hook) {
	c.hooks.UserProject = append(c.hooks.UserProject, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `userproject.Intercept(f(g(h())))`.
func (c *UserProjectClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserProject = append(c.inters.UserProject, interceptors...)
}

// Create returns a builder for creating a UserProject entity.
func (c *UserProjectClient) Create() *UserProjectCreate {
	mutation := newUserProjectMutation(c.config, OpCreate)
	return &UserProjectCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserProject entities.
func (c *UserProjectClient) CreateBulk(builders ...*UserProjectCreate) *UserProjectCreateBulk {
	return &UserProjectCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserProjectClient) MapCreateBulk(slice any, setFunc func(*UserProjectCreate, int)) *UserProjectCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserProjectCreateBulk{err: fmt.Errorf("calling to UserProjectClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserProjectCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserProjectCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserProject.
func (c *UserProjectClient) Update() *UserProjectUpdate {
	mutation := newUserProjectMutation(c.config, OpUpdate)
	return &UserProjectUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserProjectClient) UpdateOne(up *UserProject) *UserProjectUpdateOne {
	mutation := newUserProjectMutation(c.config, OpUpdateOne, withUserProject(up))
	return &UserProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserProjectClient) UpdateOneID(id uint) *UserProjectUpdateOne {
	mutation := newUserProjectMutation(c.config, OpUpdateOne, withUserProjectID(id))
	return &UserProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserProject.
func (c *UserProjectClient) Delete() *UserProjectDelete {
	mutation := newUserProjectMutation(c.config, OpDelete)
	return &UserProjectDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserProjectClient) DeleteOne(up *UserProject) *UserProjectDeleteOne {
	return c.DeleteOneID(up.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserProjectClient) DeleteOneID(id uint) *UserProjectDeleteOne {
	builder := c.Delete().Where(userproject.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserProjectDeleteOne{builder}
}

// Query returns a query builder for UserProject.
func (c *UserProjectClient) Query() *UserProjectQuery {
	return &UserProjectQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserProject},
		inters: c.Interceptors(),
	}
}

// Get returns a UserProject entity by its id.
func (c *UserProjectClient) Get(ctx context.Context, id uint) (*UserProject, error) {
	return c.Query().Where(userproject.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserProjectClient) GetX(ctx context.Context, id uint) *UserProject {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a UserProject.
func (c *UserProjectClient) QueryUser(up *UserProject) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := up.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userproject.Table, userproject.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userproject.UserTable, userproject.UserColumn),
		)
		fromV = sqlgraph.Neighbors(up.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserProjectClient) Hooks() []Hook {
	return c.hooks.UserProject
}

// Interceptors returns the client interceptors.
func (c *UserProjectClient) Interceptors() []Interceptor {
	return c.inters.UserProject
}

func (c *UserProjectClient) mutate(ctx context.Context, m *UserProjectMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserProjectCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserProjectUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserProjectDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserProject mutation op: %q", m.Op())
	}
}

// UserServiceClient is a client for the UserService schema.
type UserServiceClient struct {
	config
}

// NewUserServiceClient returns a client for the UserService from the given config.
func NewUserServiceClient(c config) *UserServiceClient {
	return &UserServiceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userservice.Hooks(f(g(h())))`.
func (c *UserServiceClient) Use(hooks ...Hook) {
	c.hooks.UserService = append(c.hooks.UserService, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `userservice.Intercept(f(g(h())))`.
func (c *UserServiceClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserService = append(c.inters.UserService, interceptors...)
}

// Create returns a builder for creating a UserService entity.
func (c *UserServiceClient) Create() *UserServiceCreate {
	mutation := newUserServiceMutation(c.config, OpCreate)
	return &UserServiceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserService entities.
func (c *UserServiceClient) CreateBulk(builders ...*UserServiceCreate) *UserServiceCreateBulk {
	return &UserServiceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserServiceClient) MapCreateBulk(slice any, setFunc func(*UserServiceCreate, int)) *UserServiceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserServiceCreateBulk{err: fmt.Errorf("calling to UserServiceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserServiceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserServiceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserService.
func (c *UserServiceClient) Update() *UserServiceUpdate {
	mutation := newUserServiceMutation(c.config, OpUpdate)
	return &UserServiceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserServiceClient) UpdateOne(us *UserService) *UserServiceUpdateOne {
	mutation := newUserServiceMutation(c.config, OpUpdateOne, withUserService(us))
	return &UserServiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserServiceClient) UpdateOneID(id uint) *UserServiceUpdateOne {
	mutation := newUserServiceMutation(c.config, OpUpdateOne, withUserServiceID(id))
	return &UserServiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserService.
func (c *UserServiceClient) Delete() *UserServiceDelete {
	mutation := newUserServiceMutation(c.config, OpDelete)
	return &UserServiceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserServiceClient) DeleteOne(us *UserService) *UserServiceDeleteOne {
	return c.DeleteOneID(us.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserServiceClient) DeleteOneID(id uint) *UserServiceDeleteOne {
	builder := c.Delete().Where(userservice.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserServiceDeleteOne{builder}
}

// Query returns a query builder for UserService.
func (c *UserServiceClient) Query() *UserServiceQuery {
	return &UserServiceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserService},
		inters: c.Interceptors(),
	}
}

// Get returns a UserService entity by its id.
func (c *UserServiceClient) Get(ctx context.Context, id uint) (*UserService, error) {
	return c.Query().Where(userservice.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserServiceClient) GetX(ctx context.Context, id uint) *UserService {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a UserService.
func (c *UserServiceClient) QueryUser(us *UserService) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := us.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userservice.Table, userservice.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userservice.UserTable, userservice.UserColumn),
		)
		fromV = sqlgraph.Neighbors(us.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserServiceClient) Hooks() []Hook {
	return c.hooks.UserService
}

// Interceptors returns the client interceptors.
func (c *UserServiceClient) Interceptors() []Interceptor {
	return c.inters.UserService
}

func (c *UserServiceClient) mutate(ctx context.Context, m *UserServiceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserServiceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserServiceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserServiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserServiceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserService mutation op: %q", m.Op())
	}
}

// UserSkillAssociationClient is a client for the UserSkillAssociation schema.
type UserSkillAssociationClient struct {
	config
}

// NewUserSkillAssociationClient returns a client for the UserSkillAssociation from the given config.
func NewUserSkillAssociationClient(c config) *UserSkillAssociationClient {
	return &UserSkillAssociationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userskillassociation.Hooks(f(g(h())))`.
func (c *UserSkillAssociationClient) Use(hooks ...Hook) {
	c.hooks.UserSkillAssociation = append(c.hooks.UserSkillAssociation, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `userskillassociation.Intercept(f(g(h())))`.
func (c *UserSkillAssociationClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserSkillAssociation = append(c.inters.UserSkillAssociation, interceptors...)
}

// Create returns a builder for creating a UserSkillAssociation entity.
func (c *UserSkillAssociationClient) Create() *UserSkillAssociationCreate {
	mutation := newUserSkillAssociationMutation(c.config, OpCreate)
	return &UserSkillAssociationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserSkillAssociation entities.
func (c *UserSkillAssociationClient) CreateBulk(builders ...*UserSkillAssociationCreate) *UserSkillAssociationCreateBulk {
	return &UserSkillAssociationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserSkillAssociationClient) MapCreateBulk(slice any, setFunc func(*UserSkillAssociationCreate, int)) *UserSkillAssociationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserSkillAssociationCreateBulk{err: fmt.Errorf("calling to UserSkillAssociationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserSkillAssociationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserSkillAssociationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserSkillAssociation.
func (c *UserSkillAssociationClient) Update() *UserSkillAssociationUpdate {
	mutation := newUserSkillAssociationMutation(c.config, OpUpdate)
	return &UserSkillAssociationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserSkillAssociationClient) UpdateOne(usa *UserSkillAssociation) *UserSkillAssociationUpdateOne {
	mutation := newUserSkillAssociationMutation(c.config, OpUpdateOne, withUserSkillAssociation(usa))
	return &UserSkillAssociationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserSkillAssociationClient) UpdateOneID(id uint) *UserSkillAssociationUpdateOne {
	mutation := newUserSkillAssociationMutation(c.config, OpUpdateOne, withUserSkillAssociationID(id))
	return &UserSkillAssociationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserSkillAssociation.
func (c *UserSkillAssociationClient) Delete() *UserSkillAssociationDelete {
	mutation := newUserSkillAssociationMutation(c.config, OpDelete)
	return &UserSkillAssociationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserSkillAssociationClient) DeleteOne(usa *UserSkillAssociation) *UserSkillAssociationDeleteOne {
	return c.DeleteOneID(usa.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserSkillAssociationClient) DeleteOneID(id uint) *UserSkillAssociationDeleteOne {
	builder := c.Delete().Where(userskillassociation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserSkillAssociationDeleteOne{builder}
}

// Query returns a query builder for UserSkillAssociation.
func (c *UserSkillAssociationClient) Query() *UserSkillAssociationQuery {
	return &UserSkillAssociationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserSkillAssociation},
		inters: c.Interceptors(),
	}
}

// Get returns a UserSkillAssociation entity by its id.
func (c *UserSkillAssociationClient) Get(ctx context.Context, id uint) (*UserSkillAssociation, error) {
	return c.Query().Where(userskillassociation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserSkillAssociationClient) GetX(ctx context.Context, id uint) *UserSkillAssociation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySkill queries the skill edge of a UserSkillAssociation.
func (c *UserSkillAssociationClient) QuerySkill(usa *UserSkillAssociation) *SkillQuery {
	query := (&SkillClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := usa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userskillassociation.Table, userskillassociation.FieldID, id),
			sqlgraph.To(skill.Table, skill.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, userskillassociation.SkillTable, userskillassociation.SkillColumn),
		)
		fromV = sqlgraph.Neighbors(usa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a UserSkillAssociation.
func (c *UserSkillAssociationClient) QueryUser(usa *UserSkillAssociation) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := usa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userskillassociation.Table, userskillassociation.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userskillassociation.UserTable, userskillassociation.UserColumn),
		)
		fromV = sqlgraph.Neighbors(usa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserSkillAssociationClient) Hooks() []Hook {
	return c.hooks.UserSkillAssociation
}

// Interceptors returns the client interceptors.
func (c *UserSkillAssociationClient) Interceptors() []Interceptor {
	return c.inters.UserSkillAssociation
}

func (c *UserSkillAssociationClient) mutate(ctx context.Context, m *UserSkillAssociationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserSkillAssociationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserSkillAssociationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserSkillAssociationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserSkillAssociationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserSkillAssociation mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		AlembicVersion, Education, Email, Experience, Repository, Skill, User,
		UserProject, UserService, UserSkillAssociation []ent.Hook
	}
	inters struct {
		AlembicVersion, Education, Email, Experience, Repository, Skill, User,
		UserProject, UserService, UserSkillAssociation []ent.Interceptor
	}
)

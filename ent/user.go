// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"theedashboard/ent/user"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID uint `json:"id,omitempty"`
	// FirstName holds the value of the "first_name" field.
	FirstName string `json:"first_name,omitempty"`
	// LastName holds the value of the "last_name" field.
	LastName string `json:"last_name,omitempty"`
	// Dob holds the value of the "dob" field.
	Dob time.Time `json:"dob,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"password,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// GithubUsername holds the value of the "github_username" field.
	GithubUsername string `json:"github_username,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// MobileNumber holds the value of the "mobile_number" field.
	MobileNumber int32 `json:"mobile_number,omitempty"`
	// AddressBlock holds the value of the "address_block" field.
	AddressBlock string `json:"address_block,omitempty"`
	// AddressStreet holds the value of the "address_street" field.
	AddressStreet string `json:"address_street,omitempty"`
	// RecidentialCountry holds the value of the "recidential_country" field.
	RecidentialCountry string `json:"recidential_country,omitempty"`
	// Nationality holds the value of the "nationality" field.
	Nationality string `json:"nationality,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Educations holds the value of the educations edge.
	Educations []*Education `json:"educations,omitempty"`
	// Experiences holds the value of the experiences edge.
	Experiences []*Experience `json:"experiences,omitempty"`
	// Repositories holds the value of the repositories edge.
	Repositories []*Repository `json:"repositories,omitempty"`
	// UserProjects holds the value of the user_projects edge.
	UserProjects []*UserProject `json:"user_projects,omitempty"`
	// UserServices holds the value of the user_services edge.
	UserServices []*UserService `json:"user_services,omitempty"`
	// UserSkillAssociations holds the value of the user_skill_associations edge.
	UserSkillAssociations []*UserSkillAssociation `json:"user_skill_associations,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// EducationsOrErr returns the Educations value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) EducationsOrErr() ([]*Education, error) {
	if e.loadedTypes[0] {
		return e.Educations, nil
	}
	return nil, &NotLoadedError{edge: "educations"}
}

// ExperiencesOrErr returns the Experiences value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ExperiencesOrErr() ([]*Experience, error) {
	if e.loadedTypes[1] {
		return e.Experiences, nil
	}
	return nil, &NotLoadedError{edge: "experiences"}
}

// RepositoriesOrErr returns the Repositories value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) RepositoriesOrErr() ([]*Repository, error) {
	if e.loadedTypes[2] {
		return e.Repositories, nil
	}
	return nil, &NotLoadedError{edge: "repositories"}
}

// UserProjectsOrErr returns the UserProjects value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserProjectsOrErr() ([]*UserProject, error) {
	if e.loadedTypes[3] {
		return e.UserProjects, nil
	}
	return nil, &NotLoadedError{edge: "user_projects"}
}

// UserServicesOrErr returns the UserServices value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserServicesOrErr() ([]*UserService, error) {
	if e.loadedTypes[4] {
		return e.UserServices, nil
	}
	return nil, &NotLoadedError{edge: "user_services"}
}

// UserSkillAssociationsOrErr returns the UserSkillAssociations value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserSkillAssociationsOrErr() ([]*UserSkillAssociation, error) {
	if e.loadedTypes[5] {
		return e.UserSkillAssociations, nil
	}
	return nil, &NotLoadedError{edge: "user_skill_associations"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldID, user.FieldMobileNumber:
			values[i] = new(sql.NullInt64)
		case user.FieldFirstName, user.FieldLastName, user.FieldUsername, user.FieldPassword, user.FieldEmail, user.FieldGithubUsername, user.FieldDescription, user.FieldAddressBlock, user.FieldAddressStreet, user.FieldRecidentialCountry, user.FieldNationality:
			values[i] = new(sql.NullString)
		case user.FieldDob, user.FieldCreatedAt, user.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = uint(value.Int64)
		case user.FieldFirstName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field first_name", values[i])
			} else if value.Valid {
				u.FirstName = value.String
			}
		case user.FieldLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_name", values[i])
			} else if value.Valid {
				u.LastName = value.String
			}
		case user.FieldDob:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field dob", values[i])
			} else if value.Valid {
				u.Dob = value.Time
			}
		case user.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				u.Username = value.String
			}
		case user.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				u.Password = value.String
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = value.String
			}
		case user.FieldGithubUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field github_username", values[i])
			} else if value.Valid {
				u.GithubUsername = value.String
			}
		case user.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				u.Description = value.String
			}
		case user.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				u.CreatedAt = value.Time
			}
		case user.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				u.UpdatedAt = value.Time
			}
		case user.FieldMobileNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field mobile_number", values[i])
			} else if value.Valid {
				u.MobileNumber = int32(value.Int64)
			}
		case user.FieldAddressBlock:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address_block", values[i])
			} else if value.Valid {
				u.AddressBlock = value.String
			}
		case user.FieldAddressStreet:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address_street", values[i])
			} else if value.Valid {
				u.AddressStreet = value.String
			}
		case user.FieldRecidentialCountry:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field recidential_country", values[i])
			} else if value.Valid {
				u.RecidentialCountry = value.String
			}
		case user.FieldNationality:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nationality", values[i])
			} else if value.Valid {
				u.Nationality = value.String
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryEducations queries the "educations" edge of the User entity.
func (u *User) QueryEducations() *EducationQuery {
	return NewUserClient(u.config).QueryEducations(u)
}

// QueryExperiences queries the "experiences" edge of the User entity.
func (u *User) QueryExperiences() *ExperienceQuery {
	return NewUserClient(u.config).QueryExperiences(u)
}

// QueryRepositories queries the "repositories" edge of the User entity.
func (u *User) QueryRepositories() *RepositoryQuery {
	return NewUserClient(u.config).QueryRepositories(u)
}

// QueryUserProjects queries the "user_projects" edge of the User entity.
func (u *User) QueryUserProjects() *UserProjectQuery {
	return NewUserClient(u.config).QueryUserProjects(u)
}

// QueryUserServices queries the "user_services" edge of the User entity.
func (u *User) QueryUserServices() *UserServiceQuery {
	return NewUserClient(u.config).QueryUserServices(u)
}

// QueryUserSkillAssociations queries the "user_skill_associations" edge of the User entity.
func (u *User) QueryUserSkillAssociations() *UserSkillAssociationQuery {
	return NewUserClient(u.config).QueryUserSkillAssociations(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("first_name=")
	builder.WriteString(u.FirstName)
	builder.WriteString(", ")
	builder.WriteString("last_name=")
	builder.WriteString(u.LastName)
	builder.WriteString(", ")
	builder.WriteString("dob=")
	builder.WriteString(u.Dob.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("username=")
	builder.WriteString(u.Username)
	builder.WriteString(", ")
	builder.WriteString("password=")
	builder.WriteString(u.Password)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(u.Email)
	builder.WriteString(", ")
	builder.WriteString("github_username=")
	builder.WriteString(u.GithubUsername)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(u.Description)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(u.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(u.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("mobile_number=")
	builder.WriteString(fmt.Sprintf("%v", u.MobileNumber))
	builder.WriteString(", ")
	builder.WriteString("address_block=")
	builder.WriteString(u.AddressBlock)
	builder.WriteString(", ")
	builder.WriteString("address_street=")
	builder.WriteString(u.AddressStreet)
	builder.WriteString(", ")
	builder.WriteString("recidential_country=")
	builder.WriteString(u.RecidentialCountry)
	builder.WriteString(", ")
	builder.WriteString("nationality=")
	builder.WriteString(u.Nationality)
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

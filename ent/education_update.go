// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"theedashboard/ent/education"
	"theedashboard/ent/predicate"
	"theedashboard/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EducationUpdate is the builder for updating Education entities.
type EducationUpdate struct {
	config
	hooks    []Hook
	mutation *EducationMutation
}

// Where appends a list predicates to the EducationUpdate builder.
func (eu *EducationUpdate) Where(ps ...predicate.Education) *EducationUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetInstitueName sets the "institue_name" field.
func (eu *EducationUpdate) SetInstitueName(s string) *EducationUpdate {
	eu.mutation.SetInstitueName(s)
	return eu
}

// SetNillableInstitueName sets the "institue_name" field if the given value is not nil.
func (eu *EducationUpdate) SetNillableInstitueName(s *string) *EducationUpdate {
	if s != nil {
		eu.SetInstitueName(*s)
	}
	return eu
}

// SetStartDate sets the "start_date" field.
func (eu *EducationUpdate) SetStartDate(t time.Time) *EducationUpdate {
	eu.mutation.SetStartDate(t)
	return eu
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (eu *EducationUpdate) SetNillableStartDate(t *time.Time) *EducationUpdate {
	if t != nil {
		eu.SetStartDate(*t)
	}
	return eu
}

// SetEndDate sets the "end_date" field.
func (eu *EducationUpdate) SetEndDate(t time.Time) *EducationUpdate {
	eu.mutation.SetEndDate(t)
	return eu
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (eu *EducationUpdate) SetNillableEndDate(t *time.Time) *EducationUpdate {
	if t != nil {
		eu.SetEndDate(*t)
	}
	return eu
}

// ClearEndDate clears the value of the "end_date" field.
func (eu *EducationUpdate) ClearEndDate() *EducationUpdate {
	eu.mutation.ClearEndDate()
	return eu
}

// SetUserID sets the "user_id" field.
func (eu *EducationUpdate) SetUserID(u uint) *EducationUpdate {
	eu.mutation.SetUserID(u)
	return eu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (eu *EducationUpdate) SetNillableUserID(u *uint) *EducationUpdate {
	if u != nil {
		eu.SetUserID(*u)
	}
	return eu
}

// ClearUserID clears the value of the "user_id" field.
func (eu *EducationUpdate) ClearUserID() *EducationUpdate {
	eu.mutation.ClearUserID()
	return eu
}

// SetCreatedAt sets the "created_at" field.
func (eu *EducationUpdate) SetCreatedAt(t time.Time) *EducationUpdate {
	eu.mutation.SetCreatedAt(t)
	return eu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (eu *EducationUpdate) SetNillableCreatedAt(t *time.Time) *EducationUpdate {
	if t != nil {
		eu.SetCreatedAt(*t)
	}
	return eu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (eu *EducationUpdate) ClearCreatedAt() *EducationUpdate {
	eu.mutation.ClearCreatedAt()
	return eu
}

// SetUpdatedAt sets the "updated_at" field.
func (eu *EducationUpdate) SetUpdatedAt(t time.Time) *EducationUpdate {
	eu.mutation.SetUpdatedAt(t)
	return eu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (eu *EducationUpdate) SetNillableUpdatedAt(t *time.Time) *EducationUpdate {
	if t != nil {
		eu.SetUpdatedAt(*t)
	}
	return eu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (eu *EducationUpdate) ClearUpdatedAt() *EducationUpdate {
	eu.mutation.ClearUpdatedAt()
	return eu
}

// SetModeOfStudy sets the "mode_of_study" field.
func (eu *EducationUpdate) SetModeOfStudy(s string) *EducationUpdate {
	eu.mutation.SetModeOfStudy(s)
	return eu
}

// SetNillableModeOfStudy sets the "mode_of_study" field if the given value is not nil.
func (eu *EducationUpdate) SetNillableModeOfStudy(s *string) *EducationUpdate {
	if s != nil {
		eu.SetModeOfStudy(*s)
	}
	return eu
}

// SetDegreeType sets the "degree_type" field.
func (eu *EducationUpdate) SetDegreeType(s string) *EducationUpdate {
	eu.mutation.SetDegreeType(s)
	return eu
}

// SetNillableDegreeType sets the "degree_type" field if the given value is not nil.
func (eu *EducationUpdate) SetNillableDegreeType(s *string) *EducationUpdate {
	if s != nil {
		eu.SetDegreeType(*s)
	}
	return eu
}

// SetAreaOfStudy sets the "area_of_study" field.
func (eu *EducationUpdate) SetAreaOfStudy(s string) *EducationUpdate {
	eu.mutation.SetAreaOfStudy(s)
	return eu
}

// SetNillableAreaOfStudy sets the "area_of_study" field if the given value is not nil.
func (eu *EducationUpdate) SetNillableAreaOfStudy(s *string) *EducationUpdate {
	if s != nil {
		eu.SetAreaOfStudy(*s)
	}
	return eu
}

// SetCurrentyStudying sets the "currenty_studying" field.
func (eu *EducationUpdate) SetCurrentyStudying(b bool) *EducationUpdate {
	eu.mutation.SetCurrentyStudying(b)
	return eu
}

// SetNillableCurrentyStudying sets the "currenty_studying" field if the given value is not nil.
func (eu *EducationUpdate) SetNillableCurrentyStudying(b *bool) *EducationUpdate {
	if b != nil {
		eu.SetCurrentyStudying(*b)
	}
	return eu
}

// ClearCurrentyStudying clears the value of the "currenty_studying" field.
func (eu *EducationUpdate) ClearCurrentyStudying() *EducationUpdate {
	eu.mutation.ClearCurrentyStudying()
	return eu
}

// SetDescription sets the "description" field.
func (eu *EducationUpdate) SetDescription(s string) *EducationUpdate {
	eu.mutation.SetDescription(s)
	return eu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (eu *EducationUpdate) SetNillableDescription(s *string) *EducationUpdate {
	if s != nil {
		eu.SetDescription(*s)
	}
	return eu
}

// ClearDescription clears the value of the "description" field.
func (eu *EducationUpdate) ClearDescription() *EducationUpdate {
	eu.mutation.ClearDescription()
	return eu
}

// SetUser sets the "user" edge to the User entity.
func (eu *EducationUpdate) SetUser(u *User) *EducationUpdate {
	return eu.SetUserID(u.ID)
}

// Mutation returns the EducationMutation object of the builder.
func (eu *EducationUpdate) Mutation() *EducationMutation {
	return eu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (eu *EducationUpdate) ClearUser() *EducationUpdate {
	eu.mutation.ClearUser()
	return eu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EducationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EducationUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EducationUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EducationUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eu *EducationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(education.Table, education.Columns, sqlgraph.NewFieldSpec(education.FieldID, field.TypeUint))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.InstitueName(); ok {
		_spec.SetField(education.FieldInstitueName, field.TypeString, value)
	}
	if value, ok := eu.mutation.StartDate(); ok {
		_spec.SetField(education.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := eu.mutation.EndDate(); ok {
		_spec.SetField(education.FieldEndDate, field.TypeTime, value)
	}
	if eu.mutation.EndDateCleared() {
		_spec.ClearField(education.FieldEndDate, field.TypeTime)
	}
	if value, ok := eu.mutation.CreatedAt(); ok {
		_spec.SetField(education.FieldCreatedAt, field.TypeTime, value)
	}
	if eu.mutation.CreatedAtCleared() {
		_spec.ClearField(education.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := eu.mutation.UpdatedAt(); ok {
		_spec.SetField(education.FieldUpdatedAt, field.TypeTime, value)
	}
	if eu.mutation.UpdatedAtCleared() {
		_spec.ClearField(education.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := eu.mutation.ModeOfStudy(); ok {
		_spec.SetField(education.FieldModeOfStudy, field.TypeString, value)
	}
	if value, ok := eu.mutation.DegreeType(); ok {
		_spec.SetField(education.FieldDegreeType, field.TypeString, value)
	}
	if value, ok := eu.mutation.AreaOfStudy(); ok {
		_spec.SetField(education.FieldAreaOfStudy, field.TypeString, value)
	}
	if value, ok := eu.mutation.CurrentyStudying(); ok {
		_spec.SetField(education.FieldCurrentyStudying, field.TypeBool, value)
	}
	if eu.mutation.CurrentyStudyingCleared() {
		_spec.ClearField(education.FieldCurrentyStudying, field.TypeBool)
	}
	if value, ok := eu.mutation.Description(); ok {
		_spec.SetField(education.FieldDescription, field.TypeString, value)
	}
	if eu.mutation.DescriptionCleared() {
		_spec.ClearField(education.FieldDescription, field.TypeString)
	}
	if eu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   education.UserTable,
			Columns: []string{education.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   education.UserTable,
			Columns: []string{education.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{education.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EducationUpdateOne is the builder for updating a single Education entity.
type EducationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EducationMutation
}

// SetInstitueName sets the "institue_name" field.
func (euo *EducationUpdateOne) SetInstitueName(s string) *EducationUpdateOne {
	euo.mutation.SetInstitueName(s)
	return euo
}

// SetNillableInstitueName sets the "institue_name" field if the given value is not nil.
func (euo *EducationUpdateOne) SetNillableInstitueName(s *string) *EducationUpdateOne {
	if s != nil {
		euo.SetInstitueName(*s)
	}
	return euo
}

// SetStartDate sets the "start_date" field.
func (euo *EducationUpdateOne) SetStartDate(t time.Time) *EducationUpdateOne {
	euo.mutation.SetStartDate(t)
	return euo
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (euo *EducationUpdateOne) SetNillableStartDate(t *time.Time) *EducationUpdateOne {
	if t != nil {
		euo.SetStartDate(*t)
	}
	return euo
}

// SetEndDate sets the "end_date" field.
func (euo *EducationUpdateOne) SetEndDate(t time.Time) *EducationUpdateOne {
	euo.mutation.SetEndDate(t)
	return euo
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (euo *EducationUpdateOne) SetNillableEndDate(t *time.Time) *EducationUpdateOne {
	if t != nil {
		euo.SetEndDate(*t)
	}
	return euo
}

// ClearEndDate clears the value of the "end_date" field.
func (euo *EducationUpdateOne) ClearEndDate() *EducationUpdateOne {
	euo.mutation.ClearEndDate()
	return euo
}

// SetUserID sets the "user_id" field.
func (euo *EducationUpdateOne) SetUserID(u uint) *EducationUpdateOne {
	euo.mutation.SetUserID(u)
	return euo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (euo *EducationUpdateOne) SetNillableUserID(u *uint) *EducationUpdateOne {
	if u != nil {
		euo.SetUserID(*u)
	}
	return euo
}

// ClearUserID clears the value of the "user_id" field.
func (euo *EducationUpdateOne) ClearUserID() *EducationUpdateOne {
	euo.mutation.ClearUserID()
	return euo
}

// SetCreatedAt sets the "created_at" field.
func (euo *EducationUpdateOne) SetCreatedAt(t time.Time) *EducationUpdateOne {
	euo.mutation.SetCreatedAt(t)
	return euo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (euo *EducationUpdateOne) SetNillableCreatedAt(t *time.Time) *EducationUpdateOne {
	if t != nil {
		euo.SetCreatedAt(*t)
	}
	return euo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (euo *EducationUpdateOne) ClearCreatedAt() *EducationUpdateOne {
	euo.mutation.ClearCreatedAt()
	return euo
}

// SetUpdatedAt sets the "updated_at" field.
func (euo *EducationUpdateOne) SetUpdatedAt(t time.Time) *EducationUpdateOne {
	euo.mutation.SetUpdatedAt(t)
	return euo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (euo *EducationUpdateOne) SetNillableUpdatedAt(t *time.Time) *EducationUpdateOne {
	if t != nil {
		euo.SetUpdatedAt(*t)
	}
	return euo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (euo *EducationUpdateOne) ClearUpdatedAt() *EducationUpdateOne {
	euo.mutation.ClearUpdatedAt()
	return euo
}

// SetModeOfStudy sets the "mode_of_study" field.
func (euo *EducationUpdateOne) SetModeOfStudy(s string) *EducationUpdateOne {
	euo.mutation.SetModeOfStudy(s)
	return euo
}

// SetNillableModeOfStudy sets the "mode_of_study" field if the given value is not nil.
func (euo *EducationUpdateOne) SetNillableModeOfStudy(s *string) *EducationUpdateOne {
	if s != nil {
		euo.SetModeOfStudy(*s)
	}
	return euo
}

// SetDegreeType sets the "degree_type" field.
func (euo *EducationUpdateOne) SetDegreeType(s string) *EducationUpdateOne {
	euo.mutation.SetDegreeType(s)
	return euo
}

// SetNillableDegreeType sets the "degree_type" field if the given value is not nil.
func (euo *EducationUpdateOne) SetNillableDegreeType(s *string) *EducationUpdateOne {
	if s != nil {
		euo.SetDegreeType(*s)
	}
	return euo
}

// SetAreaOfStudy sets the "area_of_study" field.
func (euo *EducationUpdateOne) SetAreaOfStudy(s string) *EducationUpdateOne {
	euo.mutation.SetAreaOfStudy(s)
	return euo
}

// SetNillableAreaOfStudy sets the "area_of_study" field if the given value is not nil.
func (euo *EducationUpdateOne) SetNillableAreaOfStudy(s *string) *EducationUpdateOne {
	if s != nil {
		euo.SetAreaOfStudy(*s)
	}
	return euo
}

// SetCurrentyStudying sets the "currenty_studying" field.
func (euo *EducationUpdateOne) SetCurrentyStudying(b bool) *EducationUpdateOne {
	euo.mutation.SetCurrentyStudying(b)
	return euo
}

// SetNillableCurrentyStudying sets the "currenty_studying" field if the given value is not nil.
func (euo *EducationUpdateOne) SetNillableCurrentyStudying(b *bool) *EducationUpdateOne {
	if b != nil {
		euo.SetCurrentyStudying(*b)
	}
	return euo
}

// ClearCurrentyStudying clears the value of the "currenty_studying" field.
func (euo *EducationUpdateOne) ClearCurrentyStudying() *EducationUpdateOne {
	euo.mutation.ClearCurrentyStudying()
	return euo
}

// SetDescription sets the "description" field.
func (euo *EducationUpdateOne) SetDescription(s string) *EducationUpdateOne {
	euo.mutation.SetDescription(s)
	return euo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (euo *EducationUpdateOne) SetNillableDescription(s *string) *EducationUpdateOne {
	if s != nil {
		euo.SetDescription(*s)
	}
	return euo
}

// ClearDescription clears the value of the "description" field.
func (euo *EducationUpdateOne) ClearDescription() *EducationUpdateOne {
	euo.mutation.ClearDescription()
	return euo
}

// SetUser sets the "user" edge to the User entity.
func (euo *EducationUpdateOne) SetUser(u *User) *EducationUpdateOne {
	return euo.SetUserID(u.ID)
}

// Mutation returns the EducationMutation object of the builder.
func (euo *EducationUpdateOne) Mutation() *EducationMutation {
	return euo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (euo *EducationUpdateOne) ClearUser() *EducationUpdateOne {
	euo.mutation.ClearUser()
	return euo
}

// Where appends a list predicates to the EducationUpdate builder.
func (euo *EducationUpdateOne) Where(ps ...predicate.Education) *EducationUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EducationUpdateOne) Select(field string, fields ...string) *EducationUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Education entity.
func (euo *EducationUpdateOne) Save(ctx context.Context) (*Education, error) {
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EducationUpdateOne) SaveX(ctx context.Context) *Education {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EducationUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EducationUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (euo *EducationUpdateOne) sqlSave(ctx context.Context) (_node *Education, err error) {
	_spec := sqlgraph.NewUpdateSpec(education.Table, education.Columns, sqlgraph.NewFieldSpec(education.FieldID, field.TypeUint))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Education.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, education.FieldID)
		for _, f := range fields {
			if !education.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != education.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.InstitueName(); ok {
		_spec.SetField(education.FieldInstitueName, field.TypeString, value)
	}
	if value, ok := euo.mutation.StartDate(); ok {
		_spec.SetField(education.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := euo.mutation.EndDate(); ok {
		_spec.SetField(education.FieldEndDate, field.TypeTime, value)
	}
	if euo.mutation.EndDateCleared() {
		_spec.ClearField(education.FieldEndDate, field.TypeTime)
	}
	if value, ok := euo.mutation.CreatedAt(); ok {
		_spec.SetField(education.FieldCreatedAt, field.TypeTime, value)
	}
	if euo.mutation.CreatedAtCleared() {
		_spec.ClearField(education.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := euo.mutation.UpdatedAt(); ok {
		_spec.SetField(education.FieldUpdatedAt, field.TypeTime, value)
	}
	if euo.mutation.UpdatedAtCleared() {
		_spec.ClearField(education.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := euo.mutation.ModeOfStudy(); ok {
		_spec.SetField(education.FieldModeOfStudy, field.TypeString, value)
	}
	if value, ok := euo.mutation.DegreeType(); ok {
		_spec.SetField(education.FieldDegreeType, field.TypeString, value)
	}
	if value, ok := euo.mutation.AreaOfStudy(); ok {
		_spec.SetField(education.FieldAreaOfStudy, field.TypeString, value)
	}
	if value, ok := euo.mutation.CurrentyStudying(); ok {
		_spec.SetField(education.FieldCurrentyStudying, field.TypeBool, value)
	}
	if euo.mutation.CurrentyStudyingCleared() {
		_spec.ClearField(education.FieldCurrentyStudying, field.TypeBool)
	}
	if value, ok := euo.mutation.Description(); ok {
		_spec.SetField(education.FieldDescription, field.TypeString, value)
	}
	if euo.mutation.DescriptionCleared() {
		_spec.ClearField(education.FieldDescription, field.TypeString)
	}
	if euo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   education.UserTable,
			Columns: []string{education.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   education.UserTable,
			Columns: []string{education.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Education{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{education.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}

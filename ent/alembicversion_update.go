// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"theedashboard/ent/alembicversion"
	"theedashboard/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AlembicVersionUpdate is the builder for updating AlembicVersion entities.
type AlembicVersionUpdate struct {
	config
	hooks    []Hook
	mutation *AlembicVersionMutation
}

// Where appends a list predicates to the AlembicVersionUpdate builder.
func (avu *AlembicVersionUpdate) Where(ps ...predicate.AlembicVersion) *AlembicVersionUpdate {
	avu.mutation.Where(ps...)
	return avu
}

// Mutation returns the AlembicVersionMutation object of the builder.
func (avu *AlembicVersionUpdate) Mutation() *AlembicVersionMutation {
	return avu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (avu *AlembicVersionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, avu.sqlSave, avu.mutation, avu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (avu *AlembicVersionUpdate) SaveX(ctx context.Context) int {
	affected, err := avu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (avu *AlembicVersionUpdate) Exec(ctx context.Context) error {
	_, err := avu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (avu *AlembicVersionUpdate) ExecX(ctx context.Context) {
	if err := avu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (avu *AlembicVersionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(alembicversion.Table, alembicversion.Columns, sqlgraph.NewFieldSpec(alembicversion.FieldID, field.TypeString))
	if ps := avu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if n, err = sqlgraph.UpdateNodes(ctx, avu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{alembicversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	avu.mutation.done = true
	return n, nil
}

// AlembicVersionUpdateOne is the builder for updating a single AlembicVersion entity.
type AlembicVersionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AlembicVersionMutation
}

// Mutation returns the AlembicVersionMutation object of the builder.
func (avuo *AlembicVersionUpdateOne) Mutation() *AlembicVersionMutation {
	return avuo.mutation
}

// Where appends a list predicates to the AlembicVersionUpdate builder.
func (avuo *AlembicVersionUpdateOne) Where(ps ...predicate.AlembicVersion) *AlembicVersionUpdateOne {
	avuo.mutation.Where(ps...)
	return avuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (avuo *AlembicVersionUpdateOne) Select(field string, fields ...string) *AlembicVersionUpdateOne {
	avuo.fields = append([]string{field}, fields...)
	return avuo
}

// Save executes the query and returns the updated AlembicVersion entity.
func (avuo *AlembicVersionUpdateOne) Save(ctx context.Context) (*AlembicVersion, error) {
	return withHooks(ctx, avuo.sqlSave, avuo.mutation, avuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (avuo *AlembicVersionUpdateOne) SaveX(ctx context.Context) *AlembicVersion {
	node, err := avuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (avuo *AlembicVersionUpdateOne) Exec(ctx context.Context) error {
	_, err := avuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (avuo *AlembicVersionUpdateOne) ExecX(ctx context.Context) {
	if err := avuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (avuo *AlembicVersionUpdateOne) sqlSave(ctx context.Context) (_node *AlembicVersion, err error) {
	_spec := sqlgraph.NewUpdateSpec(alembicversion.Table, alembicversion.Columns, sqlgraph.NewFieldSpec(alembicversion.FieldID, field.TypeString))
	id, ok := avuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AlembicVersion.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := avuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, alembicversion.FieldID)
		for _, f := range fields {
			if !alembicversion.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != alembicversion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := avuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_node = &AlembicVersion{config: avuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, avuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{alembicversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	avuo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"theedashboard/ent/skill"
	"theedashboard/ent/user"
	"theedashboard/ent/userskillassociation"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UserSkillAssociation is the model entity for the UserSkillAssociation schema.
type UserSkillAssociation struct {
	config `json:"-"`
	// ID of the ent.
	ID uint `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Percentage holds the value of the "percentage" field.
	Percentage int32 `json:"percentage,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uint `json:"user_id,omitempty"`
	// SkillID holds the value of the "skill_id" field.
	SkillID uint `json:"skill_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserSkillAssociationQuery when eager-loading is set.
	Edges        UserSkillAssociationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserSkillAssociationEdges holds the relations/edges for other nodes in the graph.
type UserSkillAssociationEdges struct {
	// Skill holds the value of the skill edge.
	Skill *Skill `json:"skill,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// SkillOrErr returns the Skill value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserSkillAssociationEdges) SkillOrErr() (*Skill, error) {
	if e.Skill != nil {
		return e.Skill, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: skill.Label}
	}
	return nil, &NotLoadedError{edge: "skill"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserSkillAssociationEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserSkillAssociation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userskillassociation.FieldID, userskillassociation.FieldPercentage, userskillassociation.FieldUserID, userskillassociation.FieldSkillID:
			values[i] = new(sql.NullInt64)
		case userskillassociation.FieldCreatedAt, userskillassociation.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserSkillAssociation fields.
func (usa *UserSkillAssociation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userskillassociation.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			usa.ID = uint(value.Int64)
		case userskillassociation.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				usa.CreatedAt = value.Time
			}
		case userskillassociation.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				usa.UpdatedAt = value.Time
			}
		case userskillassociation.FieldPercentage:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field percentage", values[i])
			} else if value.Valid {
				usa.Percentage = int32(value.Int64)
			}
		case userskillassociation.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				usa.UserID = uint(value.Int64)
			}
		case userskillassociation.FieldSkillID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field skill_id", values[i])
			} else if value.Valid {
				usa.SkillID = uint(value.Int64)
			}
		default:
			usa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserSkillAssociation.
// This includes values selected through modifiers, order, etc.
func (usa *UserSkillAssociation) Value(name string) (ent.Value, error) {
	return usa.selectValues.Get(name)
}

// QuerySkill queries the "skill" edge of the UserSkillAssociation entity.
func (usa *UserSkillAssociation) QuerySkill() *SkillQuery {
	return NewUserSkillAssociationClient(usa.config).QuerySkill(usa)
}

// QueryUser queries the "user" edge of the UserSkillAssociation entity.
func (usa *UserSkillAssociation) QueryUser() *UserQuery {
	return NewUserSkillAssociationClient(usa.config).QueryUser(usa)
}

// Update returns a builder for updating this UserSkillAssociation.
// Note that you need to call UserSkillAssociation.Unwrap() before calling this method if this UserSkillAssociation
// was returned from a transaction, and the transaction was committed or rolled back.
func (usa *UserSkillAssociation) Update() *UserSkillAssociationUpdateOne {
	return NewUserSkillAssociationClient(usa.config).UpdateOne(usa)
}

// Unwrap unwraps the UserSkillAssociation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (usa *UserSkillAssociation) Unwrap() *UserSkillAssociation {
	_tx, ok := usa.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserSkillAssociation is not a transactional entity")
	}
	usa.config.driver = _tx.drv
	return usa
}

// String implements the fmt.Stringer.
func (usa *UserSkillAssociation) String() string {
	var builder strings.Builder
	builder.WriteString("UserSkillAssociation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", usa.ID))
	builder.WriteString("created_at=")
	builder.WriteString(usa.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(usa.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("percentage=")
	builder.WriteString(fmt.Sprintf("%v", usa.Percentage))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", usa.UserID))
	builder.WriteString(", ")
	builder.WriteString("skill_id=")
	builder.WriteString(fmt.Sprintf("%v", usa.SkillID))
	builder.WriteByte(')')
	return builder.String()
}

// UserSkillAssociations is a parsable slice of UserSkillAssociation.
type UserSkillAssociations []*UserSkillAssociation

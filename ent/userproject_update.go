// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"theedashboard/ent/predicate"
	"theedashboard/ent/user"
	"theedashboard/ent/userproject"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserProjectUpdate is the builder for updating UserProject entities.
type UserProjectUpdate struct {
	config
	hooks    []Hook
	mutation *UserProjectMutation
}

// Where appends a list predicates to the UserProjectUpdate builder.
func (upu *UserProjectUpdate) Where(ps ...predicate.UserProject) *UserProjectUpdate {
	upu.mutation.Where(ps...)
	return upu
}

// SetProjectName sets the "project_name" field.
func (upu *UserProjectUpdate) SetProjectName(s string) *UserProjectUpdate {
	upu.mutation.SetProjectName(s)
	return upu
}

// SetNillableProjectName sets the "project_name" field if the given value is not nil.
func (upu *UserProjectUpdate) SetNillableProjectName(s *string) *UserProjectUpdate {
	if s != nil {
		upu.SetProjectName(*s)
	}
	return upu
}

// SetUserID sets the "user_id" field.
func (upu *UserProjectUpdate) SetUserID(u uint) *UserProjectUpdate {
	upu.mutation.SetUserID(u)
	return upu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (upu *UserProjectUpdate) SetNillableUserID(u *uint) *UserProjectUpdate {
	if u != nil {
		upu.SetUserID(*u)
	}
	return upu
}

// ClearUserID clears the value of the "user_id" field.
func (upu *UserProjectUpdate) ClearUserID() *UserProjectUpdate {
	upu.mutation.ClearUserID()
	return upu
}

// SetDescription sets the "description" field.
func (upu *UserProjectUpdate) SetDescription(s string) *UserProjectUpdate {
	upu.mutation.SetDescription(s)
	return upu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (upu *UserProjectUpdate) SetNillableDescription(s *string) *UserProjectUpdate {
	if s != nil {
		upu.SetDescription(*s)
	}
	return upu
}

// ClearDescription clears the value of the "description" field.
func (upu *UserProjectUpdate) ClearDescription() *UserProjectUpdate {
	upu.mutation.ClearDescription()
	return upu
}

// SetFromDate sets the "from_date" field.
func (upu *UserProjectUpdate) SetFromDate(t time.Time) *UserProjectUpdate {
	upu.mutation.SetFromDate(t)
	return upu
}

// SetNillableFromDate sets the "from_date" field if the given value is not nil.
func (upu *UserProjectUpdate) SetNillableFromDate(t *time.Time) *UserProjectUpdate {
	if t != nil {
		upu.SetFromDate(*t)
	}
	return upu
}

// ClearFromDate clears the value of the "from_date" field.
func (upu *UserProjectUpdate) ClearFromDate() *UserProjectUpdate {
	upu.mutation.ClearFromDate()
	return upu
}

// SetToDate sets the "to_date" field.
func (upu *UserProjectUpdate) SetToDate(t time.Time) *UserProjectUpdate {
	upu.mutation.SetToDate(t)
	return upu
}

// SetNillableToDate sets the "to_date" field if the given value is not nil.
func (upu *UserProjectUpdate) SetNillableToDate(t *time.Time) *UserProjectUpdate {
	if t != nil {
		upu.SetToDate(*t)
	}
	return upu
}

// ClearToDate clears the value of the "to_date" field.
func (upu *UserProjectUpdate) ClearToDate() *UserProjectUpdate {
	upu.mutation.ClearToDate()
	return upu
}

// SetProjectLink sets the "project_link" field.
func (upu *UserProjectUpdate) SetProjectLink(s string) *UserProjectUpdate {
	upu.mutation.SetProjectLink(s)
	return upu
}

// SetNillableProjectLink sets the "project_link" field if the given value is not nil.
func (upu *UserProjectUpdate) SetNillableProjectLink(s *string) *UserProjectUpdate {
	if s != nil {
		upu.SetProjectLink(*s)
	}
	return upu
}

// ClearProjectLink clears the value of the "project_link" field.
func (upu *UserProjectUpdate) ClearProjectLink() *UserProjectUpdate {
	upu.mutation.ClearProjectLink()
	return upu
}

// SetTechnologies sets the "technologies" field.
func (upu *UserProjectUpdate) SetTechnologies(s string) *UserProjectUpdate {
	upu.mutation.SetTechnologies(s)
	return upu
}

// SetNillableTechnologies sets the "technologies" field if the given value is not nil.
func (upu *UserProjectUpdate) SetNillableTechnologies(s *string) *UserProjectUpdate {
	if s != nil {
		upu.SetTechnologies(*s)
	}
	return upu
}

// ClearTechnologies clears the value of the "technologies" field.
func (upu *UserProjectUpdate) ClearTechnologies() *UserProjectUpdate {
	upu.mutation.ClearTechnologies()
	return upu
}

// SetCreatedAt sets the "created_at" field.
func (upu *UserProjectUpdate) SetCreatedAt(t time.Time) *UserProjectUpdate {
	upu.mutation.SetCreatedAt(t)
	return upu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (upu *UserProjectUpdate) SetNillableCreatedAt(t *time.Time) *UserProjectUpdate {
	if t != nil {
		upu.SetCreatedAt(*t)
	}
	return upu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (upu *UserProjectUpdate) ClearCreatedAt() *UserProjectUpdate {
	upu.mutation.ClearCreatedAt()
	return upu
}

// SetUpdatedAt sets the "updated_at" field.
func (upu *UserProjectUpdate) SetUpdatedAt(t time.Time) *UserProjectUpdate {
	upu.mutation.SetUpdatedAt(t)
	return upu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (upu *UserProjectUpdate) SetNillableUpdatedAt(t *time.Time) *UserProjectUpdate {
	if t != nil {
		upu.SetUpdatedAt(*t)
	}
	return upu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (upu *UserProjectUpdate) ClearUpdatedAt() *UserProjectUpdate {
	upu.mutation.ClearUpdatedAt()
	return upu
}

// SetUser sets the "user" edge to the User entity.
func (upu *UserProjectUpdate) SetUser(u *User) *UserProjectUpdate {
	return upu.SetUserID(u.ID)
}

// Mutation returns the UserProjectMutation object of the builder.
func (upu *UserProjectUpdate) Mutation() *UserProjectMutation {
	return upu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (upu *UserProjectUpdate) ClearUser() *UserProjectUpdate {
	upu.mutation.ClearUser()
	return upu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (upu *UserProjectUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, upu.sqlSave, upu.mutation, upu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (upu *UserProjectUpdate) SaveX(ctx context.Context) int {
	affected, err := upu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (upu *UserProjectUpdate) Exec(ctx context.Context) error {
	_, err := upu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upu *UserProjectUpdate) ExecX(ctx context.Context) {
	if err := upu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (upu *UserProjectUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(userproject.Table, userproject.Columns, sqlgraph.NewFieldSpec(userproject.FieldID, field.TypeUint))
	if ps := upu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := upu.mutation.ProjectName(); ok {
		_spec.SetField(userproject.FieldProjectName, field.TypeString, value)
	}
	if value, ok := upu.mutation.Description(); ok {
		_spec.SetField(userproject.FieldDescription, field.TypeString, value)
	}
	if upu.mutation.DescriptionCleared() {
		_spec.ClearField(userproject.FieldDescription, field.TypeString)
	}
	if value, ok := upu.mutation.FromDate(); ok {
		_spec.SetField(userproject.FieldFromDate, field.TypeTime, value)
	}
	if upu.mutation.FromDateCleared() {
		_spec.ClearField(userproject.FieldFromDate, field.TypeTime)
	}
	if value, ok := upu.mutation.ToDate(); ok {
		_spec.SetField(userproject.FieldToDate, field.TypeTime, value)
	}
	if upu.mutation.ToDateCleared() {
		_spec.ClearField(userproject.FieldToDate, field.TypeTime)
	}
	if value, ok := upu.mutation.ProjectLink(); ok {
		_spec.SetField(userproject.FieldProjectLink, field.TypeString, value)
	}
	if upu.mutation.ProjectLinkCleared() {
		_spec.ClearField(userproject.FieldProjectLink, field.TypeString)
	}
	if value, ok := upu.mutation.Technologies(); ok {
		_spec.SetField(userproject.FieldTechnologies, field.TypeString, value)
	}
	if upu.mutation.TechnologiesCleared() {
		_spec.ClearField(userproject.FieldTechnologies, field.TypeString)
	}
	if value, ok := upu.mutation.CreatedAt(); ok {
		_spec.SetField(userproject.FieldCreatedAt, field.TypeTime, value)
	}
	if upu.mutation.CreatedAtCleared() {
		_spec.ClearField(userproject.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := upu.mutation.UpdatedAt(); ok {
		_spec.SetField(userproject.FieldUpdatedAt, field.TypeTime, value)
	}
	if upu.mutation.UpdatedAtCleared() {
		_spec.ClearField(userproject.FieldUpdatedAt, field.TypeTime)
	}
	if upu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userproject.UserTable,
			Columns: []string{userproject.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userproject.UserTable,
			Columns: []string{userproject.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, upu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userproject.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	upu.mutation.done = true
	return n, nil
}

// UserProjectUpdateOne is the builder for updating a single UserProject entity.
type UserProjectUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserProjectMutation
}

// SetProjectName sets the "project_name" field.
func (upuo *UserProjectUpdateOne) SetProjectName(s string) *UserProjectUpdateOne {
	upuo.mutation.SetProjectName(s)
	return upuo
}

// SetNillableProjectName sets the "project_name" field if the given value is not nil.
func (upuo *UserProjectUpdateOne) SetNillableProjectName(s *string) *UserProjectUpdateOne {
	if s != nil {
		upuo.SetProjectName(*s)
	}
	return upuo
}

// SetUserID sets the "user_id" field.
func (upuo *UserProjectUpdateOne) SetUserID(u uint) *UserProjectUpdateOne {
	upuo.mutation.SetUserID(u)
	return upuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (upuo *UserProjectUpdateOne) SetNillableUserID(u *uint) *UserProjectUpdateOne {
	if u != nil {
		upuo.SetUserID(*u)
	}
	return upuo
}

// ClearUserID clears the value of the "user_id" field.
func (upuo *UserProjectUpdateOne) ClearUserID() *UserProjectUpdateOne {
	upuo.mutation.ClearUserID()
	return upuo
}

// SetDescription sets the "description" field.
func (upuo *UserProjectUpdateOne) SetDescription(s string) *UserProjectUpdateOne {
	upuo.mutation.SetDescription(s)
	return upuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (upuo *UserProjectUpdateOne) SetNillableDescription(s *string) *UserProjectUpdateOne {
	if s != nil {
		upuo.SetDescription(*s)
	}
	return upuo
}

// ClearDescription clears the value of the "description" field.
func (upuo *UserProjectUpdateOne) ClearDescription() *UserProjectUpdateOne {
	upuo.mutation.ClearDescription()
	return upuo
}

// SetFromDate sets the "from_date" field.
func (upuo *UserProjectUpdateOne) SetFromDate(t time.Time) *UserProjectUpdateOne {
	upuo.mutation.SetFromDate(t)
	return upuo
}

// SetNillableFromDate sets the "from_date" field if the given value is not nil.
func (upuo *UserProjectUpdateOne) SetNillableFromDate(t *time.Time) *UserProjectUpdateOne {
	if t != nil {
		upuo.SetFromDate(*t)
	}
	return upuo
}

// ClearFromDate clears the value of the "from_date" field.
func (upuo *UserProjectUpdateOne) ClearFromDate() *UserProjectUpdateOne {
	upuo.mutation.ClearFromDate()
	return upuo
}

// SetToDate sets the "to_date" field.
func (upuo *UserProjectUpdateOne) SetToDate(t time.Time) *UserProjectUpdateOne {
	upuo.mutation.SetToDate(t)
	return upuo
}

// SetNillableToDate sets the "to_date" field if the given value is not nil.
func (upuo *UserProjectUpdateOne) SetNillableToDate(t *time.Time) *UserProjectUpdateOne {
	if t != nil {
		upuo.SetToDate(*t)
	}
	return upuo
}

// ClearToDate clears the value of the "to_date" field.
func (upuo *UserProjectUpdateOne) ClearToDate() *UserProjectUpdateOne {
	upuo.mutation.ClearToDate()
	return upuo
}

// SetProjectLink sets the "project_link" field.
func (upuo *UserProjectUpdateOne) SetProjectLink(s string) *UserProjectUpdateOne {
	upuo.mutation.SetProjectLink(s)
	return upuo
}

// SetNillableProjectLink sets the "project_link" field if the given value is not nil.
func (upuo *UserProjectUpdateOne) SetNillableProjectLink(s *string) *UserProjectUpdateOne {
	if s != nil {
		upuo.SetProjectLink(*s)
	}
	return upuo
}

// ClearProjectLink clears the value of the "project_link" field.
func (upuo *UserProjectUpdateOne) ClearProjectLink() *UserProjectUpdateOne {
	upuo.mutation.ClearProjectLink()
	return upuo
}

// SetTechnologies sets the "technologies" field.
func (upuo *UserProjectUpdateOne) SetTechnologies(s string) *UserProjectUpdateOne {
	upuo.mutation.SetTechnologies(s)
	return upuo
}

// SetNillableTechnologies sets the "technologies" field if the given value is not nil.
func (upuo *UserProjectUpdateOne) SetNillableTechnologies(s *string) *UserProjectUpdateOne {
	if s != nil {
		upuo.SetTechnologies(*s)
	}
	return upuo
}

// ClearTechnologies clears the value of the "technologies" field.
func (upuo *UserProjectUpdateOne) ClearTechnologies() *UserProjectUpdateOne {
	upuo.mutation.ClearTechnologies()
	return upuo
}

// SetCreatedAt sets the "created_at" field.
func (upuo *UserProjectUpdateOne) SetCreatedAt(t time.Time) *UserProjectUpdateOne {
	upuo.mutation.SetCreatedAt(t)
	return upuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (upuo *UserProjectUpdateOne) SetNillableCreatedAt(t *time.Time) *UserProjectUpdateOne {
	if t != nil {
		upuo.SetCreatedAt(*t)
	}
	return upuo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (upuo *UserProjectUpdateOne) ClearCreatedAt() *UserProjectUpdateOne {
	upuo.mutation.ClearCreatedAt()
	return upuo
}

// SetUpdatedAt sets the "updated_at" field.
func (upuo *UserProjectUpdateOne) SetUpdatedAt(t time.Time) *UserProjectUpdateOne {
	upuo.mutation.SetUpdatedAt(t)
	return upuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (upuo *UserProjectUpdateOne) SetNillableUpdatedAt(t *time.Time) *UserProjectUpdateOne {
	if t != nil {
		upuo.SetUpdatedAt(*t)
	}
	return upuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (upuo *UserProjectUpdateOne) ClearUpdatedAt() *UserProjectUpdateOne {
	upuo.mutation.ClearUpdatedAt()
	return upuo
}

// SetUser sets the "user" edge to the User entity.
func (upuo *UserProjectUpdateOne) SetUser(u *User) *UserProjectUpdateOne {
	return upuo.SetUserID(u.ID)
}

// Mutation returns the UserProjectMutation object of the builder.
func (upuo *UserProjectUpdateOne) Mutation() *UserProjectMutation {
	return upuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (upuo *UserProjectUpdateOne) ClearUser() *UserProjectUpdateOne {
	upuo.mutation.ClearUser()
	return upuo
}

// Where appends a list predicates to the UserProjectUpdate builder.
func (upuo *UserProjectUpdateOne) Where(ps ...predicate.UserProject) *UserProjectUpdateOne {
	upuo.mutation.Where(ps...)
	return upuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (upuo *UserProjectUpdateOne) Select(field string, fields ...string) *UserProjectUpdateOne {
	upuo.fields = append([]string{field}, fields...)
	return upuo
}

// Save executes the query and returns the updated UserProject entity.
func (upuo *UserProjectUpdateOne) Save(ctx context.Context) (*UserProject, error) {
	return withHooks(ctx, upuo.sqlSave, upuo.mutation, upuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (upuo *UserProjectUpdateOne) SaveX(ctx context.Context) *UserProject {
	node, err := upuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (upuo *UserProjectUpdateOne) Exec(ctx context.Context) error {
	_, err := upuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upuo *UserProjectUpdateOne) ExecX(ctx context.Context) {
	if err := upuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (upuo *UserProjectUpdateOne) sqlSave(ctx context.Context) (_node *UserProject, err error) {
	_spec := sqlgraph.NewUpdateSpec(userproject.Table, userproject.Columns, sqlgraph.NewFieldSpec(userproject.FieldID, field.TypeUint))
	id, ok := upuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserProject.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := upuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userproject.FieldID)
		for _, f := range fields {
			if !userproject.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userproject.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := upuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := upuo.mutation.ProjectName(); ok {
		_spec.SetField(userproject.FieldProjectName, field.TypeString, value)
	}
	if value, ok := upuo.mutation.Description(); ok {
		_spec.SetField(userproject.FieldDescription, field.TypeString, value)
	}
	if upuo.mutation.DescriptionCleared() {
		_spec.ClearField(userproject.FieldDescription, field.TypeString)
	}
	if value, ok := upuo.mutation.FromDate(); ok {
		_spec.SetField(userproject.FieldFromDate, field.TypeTime, value)
	}
	if upuo.mutation.FromDateCleared() {
		_spec.ClearField(userproject.FieldFromDate, field.TypeTime)
	}
	if value, ok := upuo.mutation.ToDate(); ok {
		_spec.SetField(userproject.FieldToDate, field.TypeTime, value)
	}
	if upuo.mutation.ToDateCleared() {
		_spec.ClearField(userproject.FieldToDate, field.TypeTime)
	}
	if value, ok := upuo.mutation.ProjectLink(); ok {
		_spec.SetField(userproject.FieldProjectLink, field.TypeString, value)
	}
	if upuo.mutation.ProjectLinkCleared() {
		_spec.ClearField(userproject.FieldProjectLink, field.TypeString)
	}
	if value, ok := upuo.mutation.Technologies(); ok {
		_spec.SetField(userproject.FieldTechnologies, field.TypeString, value)
	}
	if upuo.mutation.TechnologiesCleared() {
		_spec.ClearField(userproject.FieldTechnologies, field.TypeString)
	}
	if value, ok := upuo.mutation.CreatedAt(); ok {
		_spec.SetField(userproject.FieldCreatedAt, field.TypeTime, value)
	}
	if upuo.mutation.CreatedAtCleared() {
		_spec.ClearField(userproject.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := upuo.mutation.UpdatedAt(); ok {
		_spec.SetField(userproject.FieldUpdatedAt, field.TypeTime, value)
	}
	if upuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(userproject.FieldUpdatedAt, field.TypeTime)
	}
	if upuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userproject.UserTable,
			Columns: []string{userproject.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userproject.UserTable,
			Columns: []string{userproject.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserProject{config: upuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, upuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userproject.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	upuo.mutation.done = true
	return _node, nil
}

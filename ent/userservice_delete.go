// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"theedashboard/ent/predicate"
	"theedashboard/ent/userservice"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserServiceDelete is the builder for deleting a UserService entity.
type UserServiceDelete struct {
	config
	hooks    []Hook
	mutation *UserServiceMutation
}

// Where appends a list predicates to the UserServiceDelete builder.
func (usd *UserServiceDelete) Where(ps ...predicate.UserService) *UserServiceDelete {
	usd.mutation.Where(ps...)
	return usd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (usd *UserServiceDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, usd.sqlExec, usd.mutation, usd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (usd *UserServiceDelete) ExecX(ctx context.Context) int {
	n, err := usd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (usd *UserServiceDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(userservice.Table, sqlgraph.NewFieldSpec(userservice.FieldID, field.TypeUint))
	if ps := usd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, usd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	usd.mutation.done = true
	return affected, err
}

// UserServiceDeleteOne is the builder for deleting a single UserService entity.
type UserServiceDeleteOne struct {
	usd *UserServiceDelete
}

// Where appends a list predicates to the UserServiceDelete builder.
func (usdo *UserServiceDeleteOne) Where(ps ...predicate.UserService) *UserServiceDeleteOne {
	usdo.usd.mutation.Where(ps...)
	return usdo
}

// Exec executes the deletion query.
func (usdo *UserServiceDeleteOne) Exec(ctx context.Context) error {
	n, err := usdo.usd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{userservice.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (usdo *UserServiceDeleteOne) ExecX(ctx context.Context) {
	if err := usdo.Exec(ctx); err != nil {
		panic(err)
	}
}

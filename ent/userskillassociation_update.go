// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"theedashboard/ent/predicate"
	"theedashboard/ent/skill"
	"theedashboard/ent/user"
	"theedashboard/ent/userskillassociation"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserSkillAssociationUpdate is the builder for updating UserSkillAssociation entities.
type UserSkillAssociationUpdate struct {
	config
	hooks    []Hook
	mutation *UserSkillAssociationMutation
}

// Where appends a list predicates to the UserSkillAssociationUpdate builder.
func (usau *UserSkillAssociationUpdate) Where(ps ...predicate.UserSkillAssociation) *UserSkillAssociationUpdate {
	usau.mutation.Where(ps...)
	return usau
}

// SetCreatedAt sets the "created_at" field.
func (usau *UserSkillAssociationUpdate) SetCreatedAt(t time.Time) *UserSkillAssociationUpdate {
	usau.mutation.SetCreatedAt(t)
	return usau
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (usau *UserSkillAssociationUpdate) SetNillableCreatedAt(t *time.Time) *UserSkillAssociationUpdate {
	if t != nil {
		usau.SetCreatedAt(*t)
	}
	return usau
}

// ClearCreatedAt clears the value of the "created_at" field.
func (usau *UserSkillAssociationUpdate) ClearCreatedAt() *UserSkillAssociationUpdate {
	usau.mutation.ClearCreatedAt()
	return usau
}

// SetUpdatedAt sets the "updated_at" field.
func (usau *UserSkillAssociationUpdate) SetUpdatedAt(t time.Time) *UserSkillAssociationUpdate {
	usau.mutation.SetUpdatedAt(t)
	return usau
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (usau *UserSkillAssociationUpdate) SetNillableUpdatedAt(t *time.Time) *UserSkillAssociationUpdate {
	if t != nil {
		usau.SetUpdatedAt(*t)
	}
	return usau
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (usau *UserSkillAssociationUpdate) ClearUpdatedAt() *UserSkillAssociationUpdate {
	usau.mutation.ClearUpdatedAt()
	return usau
}

// SetPercentage sets the "percentage" field.
func (usau *UserSkillAssociationUpdate) SetPercentage(i int32) *UserSkillAssociationUpdate {
	usau.mutation.ResetPercentage()
	usau.mutation.SetPercentage(i)
	return usau
}

// SetNillablePercentage sets the "percentage" field if the given value is not nil.
func (usau *UserSkillAssociationUpdate) SetNillablePercentage(i *int32) *UserSkillAssociationUpdate {
	if i != nil {
		usau.SetPercentage(*i)
	}
	return usau
}

// AddPercentage adds i to the "percentage" field.
func (usau *UserSkillAssociationUpdate) AddPercentage(i int32) *UserSkillAssociationUpdate {
	usau.mutation.AddPercentage(i)
	return usau
}

// ClearPercentage clears the value of the "percentage" field.
func (usau *UserSkillAssociationUpdate) ClearPercentage() *UserSkillAssociationUpdate {
	usau.mutation.ClearPercentage()
	return usau
}

// SetUserID sets the "user_id" field.
func (usau *UserSkillAssociationUpdate) SetUserID(u uint) *UserSkillAssociationUpdate {
	usau.mutation.SetUserID(u)
	return usau
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (usau *UserSkillAssociationUpdate) SetNillableUserID(u *uint) *UserSkillAssociationUpdate {
	if u != nil {
		usau.SetUserID(*u)
	}
	return usau
}

// ClearUserID clears the value of the "user_id" field.
func (usau *UserSkillAssociationUpdate) ClearUserID() *UserSkillAssociationUpdate {
	usau.mutation.ClearUserID()
	return usau
}

// SetSkillID sets the "skill_id" field.
func (usau *UserSkillAssociationUpdate) SetSkillID(u uint) *UserSkillAssociationUpdate {
	usau.mutation.SetSkillID(u)
	return usau
}

// SetNillableSkillID sets the "skill_id" field if the given value is not nil.
func (usau *UserSkillAssociationUpdate) SetNillableSkillID(u *uint) *UserSkillAssociationUpdate {
	if u != nil {
		usau.SetSkillID(*u)
	}
	return usau
}

// ClearSkillID clears the value of the "skill_id" field.
func (usau *UserSkillAssociationUpdate) ClearSkillID() *UserSkillAssociationUpdate {
	usau.mutation.ClearSkillID()
	return usau
}

// SetSkill sets the "skill" edge to the Skill entity.
func (usau *UserSkillAssociationUpdate) SetSkill(s *Skill) *UserSkillAssociationUpdate {
	return usau.SetSkillID(s.ID)
}

// SetUser sets the "user" edge to the User entity.
func (usau *UserSkillAssociationUpdate) SetUser(u *User) *UserSkillAssociationUpdate {
	return usau.SetUserID(u.ID)
}

// Mutation returns the UserSkillAssociationMutation object of the builder.
func (usau *UserSkillAssociationUpdate) Mutation() *UserSkillAssociationMutation {
	return usau.mutation
}

// ClearSkill clears the "skill" edge to the Skill entity.
func (usau *UserSkillAssociationUpdate) ClearSkill() *UserSkillAssociationUpdate {
	usau.mutation.ClearSkill()
	return usau
}

// ClearUser clears the "user" edge to the User entity.
func (usau *UserSkillAssociationUpdate) ClearUser() *UserSkillAssociationUpdate {
	usau.mutation.ClearUser()
	return usau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (usau *UserSkillAssociationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, usau.sqlSave, usau.mutation, usau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (usau *UserSkillAssociationUpdate) SaveX(ctx context.Context) int {
	affected, err := usau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (usau *UserSkillAssociationUpdate) Exec(ctx context.Context) error {
	_, err := usau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usau *UserSkillAssociationUpdate) ExecX(ctx context.Context) {
	if err := usau.Exec(ctx); err != nil {
		panic(err)
	}
}

func (usau *UserSkillAssociationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(userskillassociation.Table, userskillassociation.Columns, sqlgraph.NewFieldSpec(userskillassociation.FieldID, field.TypeUint))
	if ps := usau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := usau.mutation.CreatedAt(); ok {
		_spec.SetField(userskillassociation.FieldCreatedAt, field.TypeTime, value)
	}
	if usau.mutation.CreatedAtCleared() {
		_spec.ClearField(userskillassociation.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := usau.mutation.UpdatedAt(); ok {
		_spec.SetField(userskillassociation.FieldUpdatedAt, field.TypeTime, value)
	}
	if usau.mutation.UpdatedAtCleared() {
		_spec.ClearField(userskillassociation.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := usau.mutation.Percentage(); ok {
		_spec.SetField(userskillassociation.FieldPercentage, field.TypeInt32, value)
	}
	if value, ok := usau.mutation.AddedPercentage(); ok {
		_spec.AddField(userskillassociation.FieldPercentage, field.TypeInt32, value)
	}
	if usau.mutation.PercentageCleared() {
		_spec.ClearField(userskillassociation.FieldPercentage, field.TypeInt32)
	}
	if usau.mutation.SkillCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   userskillassociation.SkillTable,
			Columns: []string{userskillassociation.SkillColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skill.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := usau.mutation.SkillIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   userskillassociation.SkillTable,
			Columns: []string{userskillassociation.SkillColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skill.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if usau.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userskillassociation.UserTable,
			Columns: []string{userskillassociation.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := usau.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userskillassociation.UserTable,
			Columns: []string{userskillassociation.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, usau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userskillassociation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	usau.mutation.done = true
	return n, nil
}

// UserSkillAssociationUpdateOne is the builder for updating a single UserSkillAssociation entity.
type UserSkillAssociationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserSkillAssociationMutation
}

// SetCreatedAt sets the "created_at" field.
func (usauo *UserSkillAssociationUpdateOne) SetCreatedAt(t time.Time) *UserSkillAssociationUpdateOne {
	usauo.mutation.SetCreatedAt(t)
	return usauo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (usauo *UserSkillAssociationUpdateOne) SetNillableCreatedAt(t *time.Time) *UserSkillAssociationUpdateOne {
	if t != nil {
		usauo.SetCreatedAt(*t)
	}
	return usauo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (usauo *UserSkillAssociationUpdateOne) ClearCreatedAt() *UserSkillAssociationUpdateOne {
	usauo.mutation.ClearCreatedAt()
	return usauo
}

// SetUpdatedAt sets the "updated_at" field.
func (usauo *UserSkillAssociationUpdateOne) SetUpdatedAt(t time.Time) *UserSkillAssociationUpdateOne {
	usauo.mutation.SetUpdatedAt(t)
	return usauo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (usauo *UserSkillAssociationUpdateOne) SetNillableUpdatedAt(t *time.Time) *UserSkillAssociationUpdateOne {
	if t != nil {
		usauo.SetUpdatedAt(*t)
	}
	return usauo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (usauo *UserSkillAssociationUpdateOne) ClearUpdatedAt() *UserSkillAssociationUpdateOne {
	usauo.mutation.ClearUpdatedAt()
	return usauo
}

// SetPercentage sets the "percentage" field.
func (usauo *UserSkillAssociationUpdateOne) SetPercentage(i int32) *UserSkillAssociationUpdateOne {
	usauo.mutation.ResetPercentage()
	usauo.mutation.SetPercentage(i)
	return usauo
}

// SetNillablePercentage sets the "percentage" field if the given value is not nil.
func (usauo *UserSkillAssociationUpdateOne) SetNillablePercentage(i *int32) *UserSkillAssociationUpdateOne {
	if i != nil {
		usauo.SetPercentage(*i)
	}
	return usauo
}

// AddPercentage adds i to the "percentage" field.
func (usauo *UserSkillAssociationUpdateOne) AddPercentage(i int32) *UserSkillAssociationUpdateOne {
	usauo.mutation.AddPercentage(i)
	return usauo
}

// ClearPercentage clears the value of the "percentage" field.
func (usauo *UserSkillAssociationUpdateOne) ClearPercentage() *UserSkillAssociationUpdateOne {
	usauo.mutation.ClearPercentage()
	return usauo
}

// SetUserID sets the "user_id" field.
func (usauo *UserSkillAssociationUpdateOne) SetUserID(u uint) *UserSkillAssociationUpdateOne {
	usauo.mutation.SetUserID(u)
	return usauo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (usauo *UserSkillAssociationUpdateOne) SetNillableUserID(u *uint) *UserSkillAssociationUpdateOne {
	if u != nil {
		usauo.SetUserID(*u)
	}
	return usauo
}

// ClearUserID clears the value of the "user_id" field.
func (usauo *UserSkillAssociationUpdateOne) ClearUserID() *UserSkillAssociationUpdateOne {
	usauo.mutation.ClearUserID()
	return usauo
}

// SetSkillID sets the "skill_id" field.
func (usauo *UserSkillAssociationUpdateOne) SetSkillID(u uint) *UserSkillAssociationUpdateOne {
	usauo.mutation.SetSkillID(u)
	return usauo
}

// SetNillableSkillID sets the "skill_id" field if the given value is not nil.
func (usauo *UserSkillAssociationUpdateOne) SetNillableSkillID(u *uint) *UserSkillAssociationUpdateOne {
	if u != nil {
		usauo.SetSkillID(*u)
	}
	return usauo
}

// ClearSkillID clears the value of the "skill_id" field.
func (usauo *UserSkillAssociationUpdateOne) ClearSkillID() *UserSkillAssociationUpdateOne {
	usauo.mutation.ClearSkillID()
	return usauo
}

// SetSkill sets the "skill" edge to the Skill entity.
func (usauo *UserSkillAssociationUpdateOne) SetSkill(s *Skill) *UserSkillAssociationUpdateOne {
	return usauo.SetSkillID(s.ID)
}

// SetUser sets the "user" edge to the User entity.
func (usauo *UserSkillAssociationUpdateOne) SetUser(u *User) *UserSkillAssociationUpdateOne {
	return usauo.SetUserID(u.ID)
}

// Mutation returns the UserSkillAssociationMutation object of the builder.
func (usauo *UserSkillAssociationUpdateOne) Mutation() *UserSkillAssociationMutation {
	return usauo.mutation
}

// ClearSkill clears the "skill" edge to the Skill entity.
func (usauo *UserSkillAssociationUpdateOne) ClearSkill() *UserSkillAssociationUpdateOne {
	usauo.mutation.ClearSkill()
	return usauo
}

// ClearUser clears the "user" edge to the User entity.
func (usauo *UserSkillAssociationUpdateOne) ClearUser() *UserSkillAssociationUpdateOne {
	usauo.mutation.ClearUser()
	return usauo
}

// Where appends a list predicates to the UserSkillAssociationUpdate builder.
func (usauo *UserSkillAssociationUpdateOne) Where(ps ...predicate.UserSkillAssociation) *UserSkillAssociationUpdateOne {
	usauo.mutation.Where(ps...)
	return usauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (usauo *UserSkillAssociationUpdateOne) Select(field string, fields ...string) *UserSkillAssociationUpdateOne {
	usauo.fields = append([]string{field}, fields...)
	return usauo
}

// Save executes the query and returns the updated UserSkillAssociation entity.
func (usauo *UserSkillAssociationUpdateOne) Save(ctx context.Context) (*UserSkillAssociation, error) {
	return withHooks(ctx, usauo.sqlSave, usauo.mutation, usauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (usauo *UserSkillAssociationUpdateOne) SaveX(ctx context.Context) *UserSkillAssociation {
	node, err := usauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (usauo *UserSkillAssociationUpdateOne) Exec(ctx context.Context) error {
	_, err := usauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usauo *UserSkillAssociationUpdateOne) ExecX(ctx context.Context) {
	if err := usauo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (usauo *UserSkillAssociationUpdateOne) sqlSave(ctx context.Context) (_node *UserSkillAssociation, err error) {
	_spec := sqlgraph.NewUpdateSpec(userskillassociation.Table, userskillassociation.Columns, sqlgraph.NewFieldSpec(userskillassociation.FieldID, field.TypeUint))
	id, ok := usauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserSkillAssociation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := usauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userskillassociation.FieldID)
		for _, f := range fields {
			if !userskillassociation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userskillassociation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := usauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := usauo.mutation.CreatedAt(); ok {
		_spec.SetField(userskillassociation.FieldCreatedAt, field.TypeTime, value)
	}
	if usauo.mutation.CreatedAtCleared() {
		_spec.ClearField(userskillassociation.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := usauo.mutation.UpdatedAt(); ok {
		_spec.SetField(userskillassociation.FieldUpdatedAt, field.TypeTime, value)
	}
	if usauo.mutation.UpdatedAtCleared() {
		_spec.ClearField(userskillassociation.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := usauo.mutation.Percentage(); ok {
		_spec.SetField(userskillassociation.FieldPercentage, field.TypeInt32, value)
	}
	if value, ok := usauo.mutation.AddedPercentage(); ok {
		_spec.AddField(userskillassociation.FieldPercentage, field.TypeInt32, value)
	}
	if usauo.mutation.PercentageCleared() {
		_spec.ClearField(userskillassociation.FieldPercentage, field.TypeInt32)
	}
	if usauo.mutation.SkillCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   userskillassociation.SkillTable,
			Columns: []string{userskillassociation.SkillColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skill.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := usauo.mutation.SkillIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   userskillassociation.SkillTable,
			Columns: []string{userskillassociation.SkillColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skill.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if usauo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userskillassociation.UserTable,
			Columns: []string{userskillassociation.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := usauo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userskillassociation.UserTable,
			Columns: []string{userskillassociation.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserSkillAssociation{config: usauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, usauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userskillassociation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	usauo.mutation.done = true
	return _node, nil
}

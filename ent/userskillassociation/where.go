// Code generated by ent, DO NOT EDIT.

package userskillassociation

import (
	"theedashboard/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint) predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint) predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint) predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint) predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint) predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint) predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint) predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint) predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint) predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(sql.FieldEQ(FieldUpdatedAt, v))
}

// Percentage applies equality check predicate on the "percentage" field. It's identical to PercentageEQ.
func Percentage(v int32) predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(sql.FieldEQ(FieldPercentage, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uint) predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(sql.FieldEQ(FieldUserID, v))
}

// SkillID applies equality check predicate on the "skill_id" field. It's identical to SkillIDEQ.
func SkillID(v uint) predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(sql.FieldEQ(FieldSkillID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(sql.FieldNotNull(FieldUpdatedAt))
}

// PercentageEQ applies the EQ predicate on the "percentage" field.
func PercentageEQ(v int32) predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(sql.FieldEQ(FieldPercentage, v))
}

// PercentageNEQ applies the NEQ predicate on the "percentage" field.
func PercentageNEQ(v int32) predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(sql.FieldNEQ(FieldPercentage, v))
}

// PercentageIn applies the In predicate on the "percentage" field.
func PercentageIn(vs ...int32) predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(sql.FieldIn(FieldPercentage, vs...))
}

// PercentageNotIn applies the NotIn predicate on the "percentage" field.
func PercentageNotIn(vs ...int32) predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(sql.FieldNotIn(FieldPercentage, vs...))
}

// PercentageGT applies the GT predicate on the "percentage" field.
func PercentageGT(v int32) predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(sql.FieldGT(FieldPercentage, v))
}

// PercentageGTE applies the GTE predicate on the "percentage" field.
func PercentageGTE(v int32) predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(sql.FieldGTE(FieldPercentage, v))
}

// PercentageLT applies the LT predicate on the "percentage" field.
func PercentageLT(v int32) predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(sql.FieldLT(FieldPercentage, v))
}

// PercentageLTE applies the LTE predicate on the "percentage" field.
func PercentageLTE(v int32) predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(sql.FieldLTE(FieldPercentage, v))
}

// PercentageIsNil applies the IsNil predicate on the "percentage" field.
func PercentageIsNil() predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(sql.FieldIsNull(FieldPercentage))
}

// PercentageNotNil applies the NotNil predicate on the "percentage" field.
func PercentageNotNil() predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(sql.FieldNotNull(FieldPercentage))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uint) predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uint) predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uint) predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uint) predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(sql.FieldNotNull(FieldUserID))
}

// SkillIDEQ applies the EQ predicate on the "skill_id" field.
func SkillIDEQ(v uint) predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(sql.FieldEQ(FieldSkillID, v))
}

// SkillIDNEQ applies the NEQ predicate on the "skill_id" field.
func SkillIDNEQ(v uint) predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(sql.FieldNEQ(FieldSkillID, v))
}

// SkillIDIn applies the In predicate on the "skill_id" field.
func SkillIDIn(vs ...uint) predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(sql.FieldIn(FieldSkillID, vs...))
}

// SkillIDNotIn applies the NotIn predicate on the "skill_id" field.
func SkillIDNotIn(vs ...uint) predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(sql.FieldNotIn(FieldSkillID, vs...))
}

// SkillIDIsNil applies the IsNil predicate on the "skill_id" field.
func SkillIDIsNil() predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(sql.FieldIsNull(FieldSkillID))
}

// SkillIDNotNil applies the NotNil predicate on the "skill_id" field.
func SkillIDNotNil() predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(sql.FieldNotNull(FieldSkillID))
}

// HasSkill applies the HasEdge predicate on the "skill" edge.
func HasSkill() predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, SkillTable, SkillColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSkillWith applies the HasEdge predicate on the "skill" edge with a given conditions (other predicates).
func HasSkillWith(preds ...predicate.Skill) predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(func(s *sql.Selector) {
		step := newSkillStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserSkillAssociation) predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserSkillAssociation) predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserSkillAssociation) predicate.UserSkillAssociation {
	return predicate.UserSkillAssociation(sql.NotPredicates(p))
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"theedashboard/ent/experience"
	"theedashboard/ent/predicate"
	"theedashboard/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExperienceUpdate is the builder for updating Experience entities.
type ExperienceUpdate struct {
	config
	hooks    []Hook
	mutation *ExperienceMutation
}

// Where appends a list predicates to the ExperienceUpdate builder.
func (eu *ExperienceUpdate) Where(ps ...predicate.Experience) *ExperienceUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetCompanyName sets the "company_name" field.
func (eu *ExperienceUpdate) SetCompanyName(s string) *ExperienceUpdate {
	eu.mutation.SetCompanyName(s)
	return eu
}

// SetNillableCompanyName sets the "company_name" field if the given value is not nil.
func (eu *ExperienceUpdate) SetNillableCompanyName(s *string) *ExperienceUpdate {
	if s != nil {
		eu.SetCompanyName(*s)
	}
	return eu
}

// SetStartDate sets the "start_date" field.
func (eu *ExperienceUpdate) SetStartDate(t time.Time) *ExperienceUpdate {
	eu.mutation.SetStartDate(t)
	return eu
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (eu *ExperienceUpdate) SetNillableStartDate(t *time.Time) *ExperienceUpdate {
	if t != nil {
		eu.SetStartDate(*t)
	}
	return eu
}

// SetEndDate sets the "end_date" field.
func (eu *ExperienceUpdate) SetEndDate(t time.Time) *ExperienceUpdate {
	eu.mutation.SetEndDate(t)
	return eu
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (eu *ExperienceUpdate) SetNillableEndDate(t *time.Time) *ExperienceUpdate {
	if t != nil {
		eu.SetEndDate(*t)
	}
	return eu
}

// ClearEndDate clears the value of the "end_date" field.
func (eu *ExperienceUpdate) ClearEndDate() *ExperienceUpdate {
	eu.mutation.ClearEndDate()
	return eu
}

// SetCurrentPlace sets the "current_place" field.
func (eu *ExperienceUpdate) SetCurrentPlace(b bool) *ExperienceUpdate {
	eu.mutation.SetCurrentPlace(b)
	return eu
}

// SetNillableCurrentPlace sets the "current_place" field if the given value is not nil.
func (eu *ExperienceUpdate) SetNillableCurrentPlace(b *bool) *ExperienceUpdate {
	if b != nil {
		eu.SetCurrentPlace(*b)
	}
	return eu
}

// ClearCurrentPlace clears the value of the "current_place" field.
func (eu *ExperienceUpdate) ClearCurrentPlace() *ExperienceUpdate {
	eu.mutation.ClearCurrentPlace()
	return eu
}

// SetPosition sets the "position" field.
func (eu *ExperienceUpdate) SetPosition(s string) *ExperienceUpdate {
	eu.mutation.SetPosition(s)
	return eu
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (eu *ExperienceUpdate) SetNillablePosition(s *string) *ExperienceUpdate {
	if s != nil {
		eu.SetPosition(*s)
	}
	return eu
}

// SetUserID sets the "user_id" field.
func (eu *ExperienceUpdate) SetUserID(u uint) *ExperienceUpdate {
	eu.mutation.SetUserID(u)
	return eu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (eu *ExperienceUpdate) SetNillableUserID(u *uint) *ExperienceUpdate {
	if u != nil {
		eu.SetUserID(*u)
	}
	return eu
}

// ClearUserID clears the value of the "user_id" field.
func (eu *ExperienceUpdate) ClearUserID() *ExperienceUpdate {
	eu.mutation.ClearUserID()
	return eu
}

// SetCreatedAt sets the "created_at" field.
func (eu *ExperienceUpdate) SetCreatedAt(t time.Time) *ExperienceUpdate {
	eu.mutation.SetCreatedAt(t)
	return eu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (eu *ExperienceUpdate) SetNillableCreatedAt(t *time.Time) *ExperienceUpdate {
	if t != nil {
		eu.SetCreatedAt(*t)
	}
	return eu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (eu *ExperienceUpdate) ClearCreatedAt() *ExperienceUpdate {
	eu.mutation.ClearCreatedAt()
	return eu
}

// SetUpdatedAt sets the "updated_at" field.
func (eu *ExperienceUpdate) SetUpdatedAt(t time.Time) *ExperienceUpdate {
	eu.mutation.SetUpdatedAt(t)
	return eu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (eu *ExperienceUpdate) SetNillableUpdatedAt(t *time.Time) *ExperienceUpdate {
	if t != nil {
		eu.SetUpdatedAt(*t)
	}
	return eu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (eu *ExperienceUpdate) ClearUpdatedAt() *ExperienceUpdate {
	eu.mutation.ClearUpdatedAt()
	return eu
}

// SetDescription sets the "description" field.
func (eu *ExperienceUpdate) SetDescription(s string) *ExperienceUpdate {
	eu.mutation.SetDescription(s)
	return eu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (eu *ExperienceUpdate) SetNillableDescription(s *string) *ExperienceUpdate {
	if s != nil {
		eu.SetDescription(*s)
	}
	return eu
}

// ClearDescription clears the value of the "description" field.
func (eu *ExperienceUpdate) ClearDescription() *ExperienceUpdate {
	eu.mutation.ClearDescription()
	return eu
}

// SetUser sets the "user" edge to the User entity.
func (eu *ExperienceUpdate) SetUser(u *User) *ExperienceUpdate {
	return eu.SetUserID(u.ID)
}

// Mutation returns the ExperienceMutation object of the builder.
func (eu *ExperienceUpdate) Mutation() *ExperienceMutation {
	return eu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (eu *ExperienceUpdate) ClearUser() *ExperienceUpdate {
	eu.mutation.ClearUser()
	return eu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *ExperienceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *ExperienceUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *ExperienceUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *ExperienceUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eu *ExperienceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(experience.Table, experience.Columns, sqlgraph.NewFieldSpec(experience.FieldID, field.TypeUint))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.CompanyName(); ok {
		_spec.SetField(experience.FieldCompanyName, field.TypeString, value)
	}
	if value, ok := eu.mutation.StartDate(); ok {
		_spec.SetField(experience.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := eu.mutation.EndDate(); ok {
		_spec.SetField(experience.FieldEndDate, field.TypeTime, value)
	}
	if eu.mutation.EndDateCleared() {
		_spec.ClearField(experience.FieldEndDate, field.TypeTime)
	}
	if value, ok := eu.mutation.CurrentPlace(); ok {
		_spec.SetField(experience.FieldCurrentPlace, field.TypeBool, value)
	}
	if eu.mutation.CurrentPlaceCleared() {
		_spec.ClearField(experience.FieldCurrentPlace, field.TypeBool)
	}
	if value, ok := eu.mutation.Position(); ok {
		_spec.SetField(experience.FieldPosition, field.TypeString, value)
	}
	if value, ok := eu.mutation.CreatedAt(); ok {
		_spec.SetField(experience.FieldCreatedAt, field.TypeTime, value)
	}
	if eu.mutation.CreatedAtCleared() {
		_spec.ClearField(experience.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := eu.mutation.UpdatedAt(); ok {
		_spec.SetField(experience.FieldUpdatedAt, field.TypeTime, value)
	}
	if eu.mutation.UpdatedAtCleared() {
		_spec.ClearField(experience.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := eu.mutation.Description(); ok {
		_spec.SetField(experience.FieldDescription, field.TypeString, value)
	}
	if eu.mutation.DescriptionCleared() {
		_spec.ClearField(experience.FieldDescription, field.TypeString)
	}
	if eu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   experience.UserTable,
			Columns: []string{experience.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   experience.UserTable,
			Columns: []string{experience.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{experience.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// ExperienceUpdateOne is the builder for updating a single Experience entity.
type ExperienceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExperienceMutation
}

// SetCompanyName sets the "company_name" field.
func (euo *ExperienceUpdateOne) SetCompanyName(s string) *ExperienceUpdateOne {
	euo.mutation.SetCompanyName(s)
	return euo
}

// SetNillableCompanyName sets the "company_name" field if the given value is not nil.
func (euo *ExperienceUpdateOne) SetNillableCompanyName(s *string) *ExperienceUpdateOne {
	if s != nil {
		euo.SetCompanyName(*s)
	}
	return euo
}

// SetStartDate sets the "start_date" field.
func (euo *ExperienceUpdateOne) SetStartDate(t time.Time) *ExperienceUpdateOne {
	euo.mutation.SetStartDate(t)
	return euo
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (euo *ExperienceUpdateOne) SetNillableStartDate(t *time.Time) *ExperienceUpdateOne {
	if t != nil {
		euo.SetStartDate(*t)
	}
	return euo
}

// SetEndDate sets the "end_date" field.
func (euo *ExperienceUpdateOne) SetEndDate(t time.Time) *ExperienceUpdateOne {
	euo.mutation.SetEndDate(t)
	return euo
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (euo *ExperienceUpdateOne) SetNillableEndDate(t *time.Time) *ExperienceUpdateOne {
	if t != nil {
		euo.SetEndDate(*t)
	}
	return euo
}

// ClearEndDate clears the value of the "end_date" field.
func (euo *ExperienceUpdateOne) ClearEndDate() *ExperienceUpdateOne {
	euo.mutation.ClearEndDate()
	return euo
}

// SetCurrentPlace sets the "current_place" field.
func (euo *ExperienceUpdateOne) SetCurrentPlace(b bool) *ExperienceUpdateOne {
	euo.mutation.SetCurrentPlace(b)
	return euo
}

// SetNillableCurrentPlace sets the "current_place" field if the given value is not nil.
func (euo *ExperienceUpdateOne) SetNillableCurrentPlace(b *bool) *ExperienceUpdateOne {
	if b != nil {
		euo.SetCurrentPlace(*b)
	}
	return euo
}

// ClearCurrentPlace clears the value of the "current_place" field.
func (euo *ExperienceUpdateOne) ClearCurrentPlace() *ExperienceUpdateOne {
	euo.mutation.ClearCurrentPlace()
	return euo
}

// SetPosition sets the "position" field.
func (euo *ExperienceUpdateOne) SetPosition(s string) *ExperienceUpdateOne {
	euo.mutation.SetPosition(s)
	return euo
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (euo *ExperienceUpdateOne) SetNillablePosition(s *string) *ExperienceUpdateOne {
	if s != nil {
		euo.SetPosition(*s)
	}
	return euo
}

// SetUserID sets the "user_id" field.
func (euo *ExperienceUpdateOne) SetUserID(u uint) *ExperienceUpdateOne {
	euo.mutation.SetUserID(u)
	return euo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (euo *ExperienceUpdateOne) SetNillableUserID(u *uint) *ExperienceUpdateOne {
	if u != nil {
		euo.SetUserID(*u)
	}
	return euo
}

// ClearUserID clears the value of the "user_id" field.
func (euo *ExperienceUpdateOne) ClearUserID() *ExperienceUpdateOne {
	euo.mutation.ClearUserID()
	return euo
}

// SetCreatedAt sets the "created_at" field.
func (euo *ExperienceUpdateOne) SetCreatedAt(t time.Time) *ExperienceUpdateOne {
	euo.mutation.SetCreatedAt(t)
	return euo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (euo *ExperienceUpdateOne) SetNillableCreatedAt(t *time.Time) *ExperienceUpdateOne {
	if t != nil {
		euo.SetCreatedAt(*t)
	}
	return euo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (euo *ExperienceUpdateOne) ClearCreatedAt() *ExperienceUpdateOne {
	euo.mutation.ClearCreatedAt()
	return euo
}

// SetUpdatedAt sets the "updated_at" field.
func (euo *ExperienceUpdateOne) SetUpdatedAt(t time.Time) *ExperienceUpdateOne {
	euo.mutation.SetUpdatedAt(t)
	return euo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (euo *ExperienceUpdateOne) SetNillableUpdatedAt(t *time.Time) *ExperienceUpdateOne {
	if t != nil {
		euo.SetUpdatedAt(*t)
	}
	return euo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (euo *ExperienceUpdateOne) ClearUpdatedAt() *ExperienceUpdateOne {
	euo.mutation.ClearUpdatedAt()
	return euo
}

// SetDescription sets the "description" field.
func (euo *ExperienceUpdateOne) SetDescription(s string) *ExperienceUpdateOne {
	euo.mutation.SetDescription(s)
	return euo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (euo *ExperienceUpdateOne) SetNillableDescription(s *string) *ExperienceUpdateOne {
	if s != nil {
		euo.SetDescription(*s)
	}
	return euo
}

// ClearDescription clears the value of the "description" field.
func (euo *ExperienceUpdateOne) ClearDescription() *ExperienceUpdateOne {
	euo.mutation.ClearDescription()
	return euo
}

// SetUser sets the "user" edge to the User entity.
func (euo *ExperienceUpdateOne) SetUser(u *User) *ExperienceUpdateOne {
	return euo.SetUserID(u.ID)
}

// Mutation returns the ExperienceMutation object of the builder.
func (euo *ExperienceUpdateOne) Mutation() *ExperienceMutation {
	return euo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (euo *ExperienceUpdateOne) ClearUser() *ExperienceUpdateOne {
	euo.mutation.ClearUser()
	return euo
}

// Where appends a list predicates to the ExperienceUpdate builder.
func (euo *ExperienceUpdateOne) Where(ps ...predicate.Experience) *ExperienceUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *ExperienceUpdateOne) Select(field string, fields ...string) *ExperienceUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Experience entity.
func (euo *ExperienceUpdateOne) Save(ctx context.Context) (*Experience, error) {
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *ExperienceUpdateOne) SaveX(ctx context.Context) *Experience {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *ExperienceUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *ExperienceUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (euo *ExperienceUpdateOne) sqlSave(ctx context.Context) (_node *Experience, err error) {
	_spec := sqlgraph.NewUpdateSpec(experience.Table, experience.Columns, sqlgraph.NewFieldSpec(experience.FieldID, field.TypeUint))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Experience.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, experience.FieldID)
		for _, f := range fields {
			if !experience.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != experience.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.CompanyName(); ok {
		_spec.SetField(experience.FieldCompanyName, field.TypeString, value)
	}
	if value, ok := euo.mutation.StartDate(); ok {
		_spec.SetField(experience.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := euo.mutation.EndDate(); ok {
		_spec.SetField(experience.FieldEndDate, field.TypeTime, value)
	}
	if euo.mutation.EndDateCleared() {
		_spec.ClearField(experience.FieldEndDate, field.TypeTime)
	}
	if value, ok := euo.mutation.CurrentPlace(); ok {
		_spec.SetField(experience.FieldCurrentPlace, field.TypeBool, value)
	}
	if euo.mutation.CurrentPlaceCleared() {
		_spec.ClearField(experience.FieldCurrentPlace, field.TypeBool)
	}
	if value, ok := euo.mutation.Position(); ok {
		_spec.SetField(experience.FieldPosition, field.TypeString, value)
	}
	if value, ok := euo.mutation.CreatedAt(); ok {
		_spec.SetField(experience.FieldCreatedAt, field.TypeTime, value)
	}
	if euo.mutation.CreatedAtCleared() {
		_spec.ClearField(experience.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := euo.mutation.UpdatedAt(); ok {
		_spec.SetField(experience.FieldUpdatedAt, field.TypeTime, value)
	}
	if euo.mutation.UpdatedAtCleared() {
		_spec.ClearField(experience.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := euo.mutation.Description(); ok {
		_spec.SetField(experience.FieldDescription, field.TypeString, value)
	}
	if euo.mutation.DescriptionCleared() {
		_spec.ClearField(experience.FieldDescription, field.TypeString)
	}
	if euo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   experience.UserTable,
			Columns: []string{experience.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   experience.UserTable,
			Columns: []string{experience.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Experience{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{experience.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}

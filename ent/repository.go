// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"theedashboard/ent/repository"
	"theedashboard/ent/user"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Repository is the model entity for the Repository schema.
type Repository struct {
	config `json:"-"`
	// ID of the ent.
	ID uint `json:"id,omitempty"`
	// RepoName holds the value of the "repo_name" field.
	RepoName string `json:"repo_name,omitempty"`
	// RepoDescription holds the value of the "repo_description" field.
	RepoDescription string `json:"repo_description,omitempty"`
	// RepoURL holds the value of the "repo_url" field.
	RepoURL string `json:"repo_url,omitempty"`
	// RepoLanguage holds the value of the "repo_language" field.
	RepoLanguage string `json:"repo_language,omitempty"`
	// RepoCreatedAt holds the value of the "repo_created_at" field.
	RepoCreatedAt time.Time `json:"repo_created_at,omitempty"`
	// RepoUpdatedAt holds the value of the "repo_updated_at" field.
	RepoUpdatedAt time.Time `json:"repo_updated_at,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uint `json:"user_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// ShowOnProfile holds the value of the "show_on_profile" field.
	ShowOnProfile bool `json:"show_on_profile,omitempty"`
	// Order holds the value of the "order" field.
	Order int32 `json:"order,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RepositoryQuery when eager-loading is set.
	Edges        RepositoryEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RepositoryEdges holds the relations/edges for other nodes in the graph.
type RepositoryEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RepositoryEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Repository) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case repository.FieldShowOnProfile:
			values[i] = new(sql.NullBool)
		case repository.FieldID, repository.FieldUserID, repository.FieldOrder:
			values[i] = new(sql.NullInt64)
		case repository.FieldRepoName, repository.FieldRepoDescription, repository.FieldRepoURL, repository.FieldRepoLanguage:
			values[i] = new(sql.NullString)
		case repository.FieldRepoCreatedAt, repository.FieldRepoUpdatedAt, repository.FieldCreatedAt, repository.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Repository fields.
func (r *Repository) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case repository.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = uint(value.Int64)
		case repository.FieldRepoName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field repo_name", values[i])
			} else if value.Valid {
				r.RepoName = value.String
			}
		case repository.FieldRepoDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field repo_description", values[i])
			} else if value.Valid {
				r.RepoDescription = value.String
			}
		case repository.FieldRepoURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field repo_url", values[i])
			} else if value.Valid {
				r.RepoURL = value.String
			}
		case repository.FieldRepoLanguage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field repo_language", values[i])
			} else if value.Valid {
				r.RepoLanguage = value.String
			}
		case repository.FieldRepoCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field repo_created_at", values[i])
			} else if value.Valid {
				r.RepoCreatedAt = value.Time
			}
		case repository.FieldRepoUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field repo_updated_at", values[i])
			} else if value.Valid {
				r.RepoUpdatedAt = value.Time
			}
		case repository.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				r.UserID = uint(value.Int64)
			}
		case repository.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		case repository.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				r.UpdatedAt = value.Time
			}
		case repository.FieldShowOnProfile:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field show_on_profile", values[i])
			} else if value.Valid {
				r.ShowOnProfile = value.Bool
			}
		case repository.FieldOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order", values[i])
			} else if value.Valid {
				r.Order = int32(value.Int64)
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Repository.
// This includes values selected through modifiers, order, etc.
func (r *Repository) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Repository entity.
func (r *Repository) QueryUser() *UserQuery {
	return NewRepositoryClient(r.config).QueryUser(r)
}

// Update returns a builder for updating this Repository.
// Note that you need to call Repository.Unwrap() before calling this method if this Repository
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Repository) Update() *RepositoryUpdateOne {
	return NewRepositoryClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Repository entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Repository) Unwrap() *Repository {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Repository is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Repository) String() string {
	var builder strings.Builder
	builder.WriteString("Repository(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("repo_name=")
	builder.WriteString(r.RepoName)
	builder.WriteString(", ")
	builder.WriteString("repo_description=")
	builder.WriteString(r.RepoDescription)
	builder.WriteString(", ")
	builder.WriteString("repo_url=")
	builder.WriteString(r.RepoURL)
	builder.WriteString(", ")
	builder.WriteString("repo_language=")
	builder.WriteString(r.RepoLanguage)
	builder.WriteString(", ")
	builder.WriteString("repo_created_at=")
	builder.WriteString(r.RepoCreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("repo_updated_at=")
	builder.WriteString(r.RepoUpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", r.UserID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(r.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("show_on_profile=")
	builder.WriteString(fmt.Sprintf("%v", r.ShowOnProfile))
	builder.WriteString(", ")
	builder.WriteString("order=")
	builder.WriteString(fmt.Sprintf("%v", r.Order))
	builder.WriteByte(')')
	return builder.String()
}

// Repositories is a parsable slice of Repository.
type Repositories []*Repository

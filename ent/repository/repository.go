// Code generated by ent, DO NOT EDIT.

package repository

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the repository type in the database.
	Label = "repository"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRepoName holds the string denoting the repo_name field in the database.
	FieldRepoName = "repo_name"
	// FieldRepoDescription holds the string denoting the repo_description field in the database.
	FieldRepoDescription = "repo_description"
	// FieldRepoURL holds the string denoting the repo_url field in the database.
	FieldRepoURL = "repo_url"
	// FieldRepoLanguage holds the string denoting the repo_language field in the database.
	FieldRepoLanguage = "repo_language"
	// FieldRepoCreatedAt holds the string denoting the repo_created_at field in the database.
	FieldRepoCreatedAt = "repo_created_at"
	// FieldRepoUpdatedAt holds the string denoting the repo_updated_at field in the database.
	FieldRepoUpdatedAt = "repo_updated_at"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldShowOnProfile holds the string denoting the show_on_profile field in the database.
	FieldShowOnProfile = "show_on_profile"
	// FieldOrder holds the string denoting the order field in the database.
	FieldOrder = "order"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the repository in the database.
	Table = "repositories"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "repositories"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "user"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
)

// Columns holds all SQL columns for repository fields.
var Columns = []string{
	FieldID,
	FieldRepoName,
	FieldRepoDescription,
	FieldRepoURL,
	FieldRepoLanguage,
	FieldRepoCreatedAt,
	FieldRepoUpdatedAt,
	FieldUserID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldShowOnProfile,
	FieldOrder,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Repository queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByRepoName orders the results by the repo_name field.
func ByRepoName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRepoName, opts...).ToFunc()
}

// ByRepoDescription orders the results by the repo_description field.
func ByRepoDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRepoDescription, opts...).ToFunc()
}

// ByRepoURL orders the results by the repo_url field.
func ByRepoURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRepoURL, opts...).ToFunc()
}

// ByRepoLanguage orders the results by the repo_language field.
func ByRepoLanguage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRepoLanguage, opts...).ToFunc()
}

// ByRepoCreatedAt orders the results by the repo_created_at field.
func ByRepoCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRepoCreatedAt, opts...).ToFunc()
}

// ByRepoUpdatedAt orders the results by the repo_updated_at field.
func ByRepoUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRepoUpdatedAt, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByShowOnProfile orders the results by the show_on_profile field.
func ByShowOnProfile(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShowOnProfile, opts...).ToFunc()
}

// ByOrder orders the results by the order field.
func ByOrder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrder, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}

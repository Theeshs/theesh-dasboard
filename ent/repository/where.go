// Code generated by ent, DO NOT EDIT.

package repository

import (
	"theedashboard/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldID, id))
}

// RepoName applies equality check predicate on the "repo_name" field. It's identical to RepoNameEQ.
func RepoName(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldRepoName, v))
}

// RepoDescription applies equality check predicate on the "repo_description" field. It's identical to RepoDescriptionEQ.
func RepoDescription(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldRepoDescription, v))
}

// RepoURL applies equality check predicate on the "repo_url" field. It's identical to RepoURLEQ.
func RepoURL(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldRepoURL, v))
}

// RepoLanguage applies equality check predicate on the "repo_language" field. It's identical to RepoLanguageEQ.
func RepoLanguage(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldRepoLanguage, v))
}

// RepoCreatedAt applies equality check predicate on the "repo_created_at" field. It's identical to RepoCreatedAtEQ.
func RepoCreatedAt(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldRepoCreatedAt, v))
}

// RepoUpdatedAt applies equality check predicate on the "repo_updated_at" field. It's identical to RepoUpdatedAtEQ.
func RepoUpdatedAt(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldRepoUpdatedAt, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uint) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldUserID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldUpdatedAt, v))
}

// ShowOnProfile applies equality check predicate on the "show_on_profile" field. It's identical to ShowOnProfileEQ.
func ShowOnProfile(v bool) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldShowOnProfile, v))
}

// Order applies equality check predicate on the "order" field. It's identical to OrderEQ.
func Order(v int32) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldOrder, v))
}

// RepoNameEQ applies the EQ predicate on the "repo_name" field.
func RepoNameEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldRepoName, v))
}

// RepoNameNEQ applies the NEQ predicate on the "repo_name" field.
func RepoNameNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldRepoName, v))
}

// RepoNameIn applies the In predicate on the "repo_name" field.
func RepoNameIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldRepoName, vs...))
}

// RepoNameNotIn applies the NotIn predicate on the "repo_name" field.
func RepoNameNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldRepoName, vs...))
}

// RepoNameGT applies the GT predicate on the "repo_name" field.
func RepoNameGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldRepoName, v))
}

// RepoNameGTE applies the GTE predicate on the "repo_name" field.
func RepoNameGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldRepoName, v))
}

// RepoNameLT applies the LT predicate on the "repo_name" field.
func RepoNameLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldRepoName, v))
}

// RepoNameLTE applies the LTE predicate on the "repo_name" field.
func RepoNameLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldRepoName, v))
}

// RepoNameContains applies the Contains predicate on the "repo_name" field.
func RepoNameContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldRepoName, v))
}

// RepoNameHasPrefix applies the HasPrefix predicate on the "repo_name" field.
func RepoNameHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldRepoName, v))
}

// RepoNameHasSuffix applies the HasSuffix predicate on the "repo_name" field.
func RepoNameHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldRepoName, v))
}

// RepoNameEqualFold applies the EqualFold predicate on the "repo_name" field.
func RepoNameEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldRepoName, v))
}

// RepoNameContainsFold applies the ContainsFold predicate on the "repo_name" field.
func RepoNameContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldRepoName, v))
}

// RepoDescriptionEQ applies the EQ predicate on the "repo_description" field.
func RepoDescriptionEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldRepoDescription, v))
}

// RepoDescriptionNEQ applies the NEQ predicate on the "repo_description" field.
func RepoDescriptionNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldRepoDescription, v))
}

// RepoDescriptionIn applies the In predicate on the "repo_description" field.
func RepoDescriptionIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldRepoDescription, vs...))
}

// RepoDescriptionNotIn applies the NotIn predicate on the "repo_description" field.
func RepoDescriptionNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldRepoDescription, vs...))
}

// RepoDescriptionGT applies the GT predicate on the "repo_description" field.
func RepoDescriptionGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldRepoDescription, v))
}

// RepoDescriptionGTE applies the GTE predicate on the "repo_description" field.
func RepoDescriptionGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldRepoDescription, v))
}

// RepoDescriptionLT applies the LT predicate on the "repo_description" field.
func RepoDescriptionLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldRepoDescription, v))
}

// RepoDescriptionLTE applies the LTE predicate on the "repo_description" field.
func RepoDescriptionLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldRepoDescription, v))
}

// RepoDescriptionContains applies the Contains predicate on the "repo_description" field.
func RepoDescriptionContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldRepoDescription, v))
}

// RepoDescriptionHasPrefix applies the HasPrefix predicate on the "repo_description" field.
func RepoDescriptionHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldRepoDescription, v))
}

// RepoDescriptionHasSuffix applies the HasSuffix predicate on the "repo_description" field.
func RepoDescriptionHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldRepoDescription, v))
}

// RepoDescriptionIsNil applies the IsNil predicate on the "repo_description" field.
func RepoDescriptionIsNil() predicate.Repository {
	return predicate.Repository(sql.FieldIsNull(FieldRepoDescription))
}

// RepoDescriptionNotNil applies the NotNil predicate on the "repo_description" field.
func RepoDescriptionNotNil() predicate.Repository {
	return predicate.Repository(sql.FieldNotNull(FieldRepoDescription))
}

// RepoDescriptionEqualFold applies the EqualFold predicate on the "repo_description" field.
func RepoDescriptionEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldRepoDescription, v))
}

// RepoDescriptionContainsFold applies the ContainsFold predicate on the "repo_description" field.
func RepoDescriptionContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldRepoDescription, v))
}

// RepoURLEQ applies the EQ predicate on the "repo_url" field.
func RepoURLEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldRepoURL, v))
}

// RepoURLNEQ applies the NEQ predicate on the "repo_url" field.
func RepoURLNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldRepoURL, v))
}

// RepoURLIn applies the In predicate on the "repo_url" field.
func RepoURLIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldRepoURL, vs...))
}

// RepoURLNotIn applies the NotIn predicate on the "repo_url" field.
func RepoURLNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldRepoURL, vs...))
}

// RepoURLGT applies the GT predicate on the "repo_url" field.
func RepoURLGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldRepoURL, v))
}

// RepoURLGTE applies the GTE predicate on the "repo_url" field.
func RepoURLGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldRepoURL, v))
}

// RepoURLLT applies the LT predicate on the "repo_url" field.
func RepoURLLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldRepoURL, v))
}

// RepoURLLTE applies the LTE predicate on the "repo_url" field.
func RepoURLLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldRepoURL, v))
}

// RepoURLContains applies the Contains predicate on the "repo_url" field.
func RepoURLContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldRepoURL, v))
}

// RepoURLHasPrefix applies the HasPrefix predicate on the "repo_url" field.
func RepoURLHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldRepoURL, v))
}

// RepoURLHasSuffix applies the HasSuffix predicate on the "repo_url" field.
func RepoURLHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldRepoURL, v))
}

// RepoURLEqualFold applies the EqualFold predicate on the "repo_url" field.
func RepoURLEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldRepoURL, v))
}

// RepoURLContainsFold applies the ContainsFold predicate on the "repo_url" field.
func RepoURLContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldRepoURL, v))
}

// RepoLanguageEQ applies the EQ predicate on the "repo_language" field.
func RepoLanguageEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldRepoLanguage, v))
}

// RepoLanguageNEQ applies the NEQ predicate on the "repo_language" field.
func RepoLanguageNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldRepoLanguage, v))
}

// RepoLanguageIn applies the In predicate on the "repo_language" field.
func RepoLanguageIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldRepoLanguage, vs...))
}

// RepoLanguageNotIn applies the NotIn predicate on the "repo_language" field.
func RepoLanguageNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldRepoLanguage, vs...))
}

// RepoLanguageGT applies the GT predicate on the "repo_language" field.
func RepoLanguageGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldRepoLanguage, v))
}

// RepoLanguageGTE applies the GTE predicate on the "repo_language" field.
func RepoLanguageGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldRepoLanguage, v))
}

// RepoLanguageLT applies the LT predicate on the "repo_language" field.
func RepoLanguageLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldRepoLanguage, v))
}

// RepoLanguageLTE applies the LTE predicate on the "repo_language" field.
func RepoLanguageLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldRepoLanguage, v))
}

// RepoLanguageContains applies the Contains predicate on the "repo_language" field.
func RepoLanguageContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldRepoLanguage, v))
}

// RepoLanguageHasPrefix applies the HasPrefix predicate on the "repo_language" field.
func RepoLanguageHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldRepoLanguage, v))
}

// RepoLanguageHasSuffix applies the HasSuffix predicate on the "repo_language" field.
func RepoLanguageHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldRepoLanguage, v))
}

// RepoLanguageIsNil applies the IsNil predicate on the "repo_language" field.
func RepoLanguageIsNil() predicate.Repository {
	return predicate.Repository(sql.FieldIsNull(FieldRepoLanguage))
}

// RepoLanguageNotNil applies the NotNil predicate on the "repo_language" field.
func RepoLanguageNotNil() predicate.Repository {
	return predicate.Repository(sql.FieldNotNull(FieldRepoLanguage))
}

// RepoLanguageEqualFold applies the EqualFold predicate on the "repo_language" field.
func RepoLanguageEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldRepoLanguage, v))
}

// RepoLanguageContainsFold applies the ContainsFold predicate on the "repo_language" field.
func RepoLanguageContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldRepoLanguage, v))
}

// RepoCreatedAtEQ applies the EQ predicate on the "repo_created_at" field.
func RepoCreatedAtEQ(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldRepoCreatedAt, v))
}

// RepoCreatedAtNEQ applies the NEQ predicate on the "repo_created_at" field.
func RepoCreatedAtNEQ(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldRepoCreatedAt, v))
}

// RepoCreatedAtIn applies the In predicate on the "repo_created_at" field.
func RepoCreatedAtIn(vs ...time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldRepoCreatedAt, vs...))
}

// RepoCreatedAtNotIn applies the NotIn predicate on the "repo_created_at" field.
func RepoCreatedAtNotIn(vs ...time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldRepoCreatedAt, vs...))
}

// RepoCreatedAtGT applies the GT predicate on the "repo_created_at" field.
func RepoCreatedAtGT(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldRepoCreatedAt, v))
}

// RepoCreatedAtGTE applies the GTE predicate on the "repo_created_at" field.
func RepoCreatedAtGTE(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldRepoCreatedAt, v))
}

// RepoCreatedAtLT applies the LT predicate on the "repo_created_at" field.
func RepoCreatedAtLT(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldRepoCreatedAt, v))
}

// RepoCreatedAtLTE applies the LTE predicate on the "repo_created_at" field.
func RepoCreatedAtLTE(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldRepoCreatedAt, v))
}

// RepoUpdatedAtEQ applies the EQ predicate on the "repo_updated_at" field.
func RepoUpdatedAtEQ(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldRepoUpdatedAt, v))
}

// RepoUpdatedAtNEQ applies the NEQ predicate on the "repo_updated_at" field.
func RepoUpdatedAtNEQ(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldRepoUpdatedAt, v))
}

// RepoUpdatedAtIn applies the In predicate on the "repo_updated_at" field.
func RepoUpdatedAtIn(vs ...time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldRepoUpdatedAt, vs...))
}

// RepoUpdatedAtNotIn applies the NotIn predicate on the "repo_updated_at" field.
func RepoUpdatedAtNotIn(vs ...time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldRepoUpdatedAt, vs...))
}

// RepoUpdatedAtGT applies the GT predicate on the "repo_updated_at" field.
func RepoUpdatedAtGT(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldRepoUpdatedAt, v))
}

// RepoUpdatedAtGTE applies the GTE predicate on the "repo_updated_at" field.
func RepoUpdatedAtGTE(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldRepoUpdatedAt, v))
}

// RepoUpdatedAtLT applies the LT predicate on the "repo_updated_at" field.
func RepoUpdatedAtLT(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldRepoUpdatedAt, v))
}

// RepoUpdatedAtLTE applies the LTE predicate on the "repo_updated_at" field.
func RepoUpdatedAtLTE(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldRepoUpdatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uint) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uint) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uint) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uint) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.Repository {
	return predicate.Repository(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.Repository {
	return predicate.Repository(sql.FieldNotNull(FieldUserID))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.Repository {
	return predicate.Repository(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.Repository {
	return predicate.Repository(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Repository {
	return predicate.Repository(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Repository {
	return predicate.Repository(sql.FieldNotNull(FieldUpdatedAt))
}

// ShowOnProfileEQ applies the EQ predicate on the "show_on_profile" field.
func ShowOnProfileEQ(v bool) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldShowOnProfile, v))
}

// ShowOnProfileNEQ applies the NEQ predicate on the "show_on_profile" field.
func ShowOnProfileNEQ(v bool) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldShowOnProfile, v))
}

// OrderEQ applies the EQ predicate on the "order" field.
func OrderEQ(v int32) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldOrder, v))
}

// OrderNEQ applies the NEQ predicate on the "order" field.
func OrderNEQ(v int32) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldOrder, v))
}

// OrderIn applies the In predicate on the "order" field.
func OrderIn(vs ...int32) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldOrder, vs...))
}

// OrderNotIn applies the NotIn predicate on the "order" field.
func OrderNotIn(vs ...int32) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldOrder, vs...))
}

// OrderGT applies the GT predicate on the "order" field.
func OrderGT(v int32) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldOrder, v))
}

// OrderGTE applies the GTE predicate on the "order" field.
func OrderGTE(v int32) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldOrder, v))
}

// OrderLT applies the LT predicate on the "order" field.
func OrderLT(v int32) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldOrder, v))
}

// OrderLTE applies the LTE predicate on the "order" field.
func OrderLTE(v int32) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldOrder, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Repository) predicate.Repository {
	return predicate.Repository(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Repository) predicate.Repository {
	return predicate.Repository(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Repository) predicate.Repository {
	return predicate.Repository(sql.NotPredicates(p))
}

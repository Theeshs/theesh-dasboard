// Code generated by ent, DO NOT EDIT.

package education

import (
	"theedashboard/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint) predicate.Education {
	return predicate.Education(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint) predicate.Education {
	return predicate.Education(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint) predicate.Education {
	return predicate.Education(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint) predicate.Education {
	return predicate.Education(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint) predicate.Education {
	return predicate.Education(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint) predicate.Education {
	return predicate.Education(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint) predicate.Education {
	return predicate.Education(sql.FieldLTE(FieldID, id))
}

// InstitueName applies equality check predicate on the "institue_name" field. It's identical to InstitueNameEQ.
func InstitueName(v string) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldInstitueName, v))
}

// StartDate applies equality check predicate on the "start_date" field. It's identical to StartDateEQ.
func StartDate(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldStartDate, v))
}

// EndDate applies equality check predicate on the "end_date" field. It's identical to EndDateEQ.
func EndDate(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldEndDate, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uint) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldUserID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldUpdatedAt, v))
}

// ModeOfStudy applies equality check predicate on the "mode_of_study" field. It's identical to ModeOfStudyEQ.
func ModeOfStudy(v string) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldModeOfStudy, v))
}

// DegreeType applies equality check predicate on the "degree_type" field. It's identical to DegreeTypeEQ.
func DegreeType(v string) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldDegreeType, v))
}

// AreaOfStudy applies equality check predicate on the "area_of_study" field. It's identical to AreaOfStudyEQ.
func AreaOfStudy(v string) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldAreaOfStudy, v))
}

// CurrentyStudying applies equality check predicate on the "currenty_studying" field. It's identical to CurrentyStudyingEQ.
func CurrentyStudying(v bool) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldCurrentyStudying, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldDescription, v))
}

// InstitueNameEQ applies the EQ predicate on the "institue_name" field.
func InstitueNameEQ(v string) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldInstitueName, v))
}

// InstitueNameNEQ applies the NEQ predicate on the "institue_name" field.
func InstitueNameNEQ(v string) predicate.Education {
	return predicate.Education(sql.FieldNEQ(FieldInstitueName, v))
}

// InstitueNameIn applies the In predicate on the "institue_name" field.
func InstitueNameIn(vs ...string) predicate.Education {
	return predicate.Education(sql.FieldIn(FieldInstitueName, vs...))
}

// InstitueNameNotIn applies the NotIn predicate on the "institue_name" field.
func InstitueNameNotIn(vs ...string) predicate.Education {
	return predicate.Education(sql.FieldNotIn(FieldInstitueName, vs...))
}

// InstitueNameGT applies the GT predicate on the "institue_name" field.
func InstitueNameGT(v string) predicate.Education {
	return predicate.Education(sql.FieldGT(FieldInstitueName, v))
}

// InstitueNameGTE applies the GTE predicate on the "institue_name" field.
func InstitueNameGTE(v string) predicate.Education {
	return predicate.Education(sql.FieldGTE(FieldInstitueName, v))
}

// InstitueNameLT applies the LT predicate on the "institue_name" field.
func InstitueNameLT(v string) predicate.Education {
	return predicate.Education(sql.FieldLT(FieldInstitueName, v))
}

// InstitueNameLTE applies the LTE predicate on the "institue_name" field.
func InstitueNameLTE(v string) predicate.Education {
	return predicate.Education(sql.FieldLTE(FieldInstitueName, v))
}

// InstitueNameContains applies the Contains predicate on the "institue_name" field.
func InstitueNameContains(v string) predicate.Education {
	return predicate.Education(sql.FieldContains(FieldInstitueName, v))
}

// InstitueNameHasPrefix applies the HasPrefix predicate on the "institue_name" field.
func InstitueNameHasPrefix(v string) predicate.Education {
	return predicate.Education(sql.FieldHasPrefix(FieldInstitueName, v))
}

// InstitueNameHasSuffix applies the HasSuffix predicate on the "institue_name" field.
func InstitueNameHasSuffix(v string) predicate.Education {
	return predicate.Education(sql.FieldHasSuffix(FieldInstitueName, v))
}

// InstitueNameEqualFold applies the EqualFold predicate on the "institue_name" field.
func InstitueNameEqualFold(v string) predicate.Education {
	return predicate.Education(sql.FieldEqualFold(FieldInstitueName, v))
}

// InstitueNameContainsFold applies the ContainsFold predicate on the "institue_name" field.
func InstitueNameContainsFold(v string) predicate.Education {
	return predicate.Education(sql.FieldContainsFold(FieldInstitueName, v))
}

// StartDateEQ applies the EQ predicate on the "start_date" field.
func StartDateEQ(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldStartDate, v))
}

// StartDateNEQ applies the NEQ predicate on the "start_date" field.
func StartDateNEQ(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldNEQ(FieldStartDate, v))
}

// StartDateIn applies the In predicate on the "start_date" field.
func StartDateIn(vs ...time.Time) predicate.Education {
	return predicate.Education(sql.FieldIn(FieldStartDate, vs...))
}

// StartDateNotIn applies the NotIn predicate on the "start_date" field.
func StartDateNotIn(vs ...time.Time) predicate.Education {
	return predicate.Education(sql.FieldNotIn(FieldStartDate, vs...))
}

// StartDateGT applies the GT predicate on the "start_date" field.
func StartDateGT(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldGT(FieldStartDate, v))
}

// StartDateGTE applies the GTE predicate on the "start_date" field.
func StartDateGTE(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldGTE(FieldStartDate, v))
}

// StartDateLT applies the LT predicate on the "start_date" field.
func StartDateLT(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldLT(FieldStartDate, v))
}

// StartDateLTE applies the LTE predicate on the "start_date" field.
func StartDateLTE(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldLTE(FieldStartDate, v))
}

// EndDateEQ applies the EQ predicate on the "end_date" field.
func EndDateEQ(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldEndDate, v))
}

// EndDateNEQ applies the NEQ predicate on the "end_date" field.
func EndDateNEQ(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldNEQ(FieldEndDate, v))
}

// EndDateIn applies the In predicate on the "end_date" field.
func EndDateIn(vs ...time.Time) predicate.Education {
	return predicate.Education(sql.FieldIn(FieldEndDate, vs...))
}

// EndDateNotIn applies the NotIn predicate on the "end_date" field.
func EndDateNotIn(vs ...time.Time) predicate.Education {
	return predicate.Education(sql.FieldNotIn(FieldEndDate, vs...))
}

// EndDateGT applies the GT predicate on the "end_date" field.
func EndDateGT(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldGT(FieldEndDate, v))
}

// EndDateGTE applies the GTE predicate on the "end_date" field.
func EndDateGTE(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldGTE(FieldEndDate, v))
}

// EndDateLT applies the LT predicate on the "end_date" field.
func EndDateLT(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldLT(FieldEndDate, v))
}

// EndDateLTE applies the LTE predicate on the "end_date" field.
func EndDateLTE(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldLTE(FieldEndDate, v))
}

// EndDateIsNil applies the IsNil predicate on the "end_date" field.
func EndDateIsNil() predicate.Education {
	return predicate.Education(sql.FieldIsNull(FieldEndDate))
}

// EndDateNotNil applies the NotNil predicate on the "end_date" field.
func EndDateNotNil() predicate.Education {
	return predicate.Education(sql.FieldNotNull(FieldEndDate))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uint) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uint) predicate.Education {
	return predicate.Education(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uint) predicate.Education {
	return predicate.Education(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uint) predicate.Education {
	return predicate.Education(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.Education {
	return predicate.Education(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.Education {
	return predicate.Education(sql.FieldNotNull(FieldUserID))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Education {
	return predicate.Education(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Education {
	return predicate.Education(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.Education {
	return predicate.Education(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.Education {
	return predicate.Education(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Education {
	return predicate.Education(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Education {
	return predicate.Education(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Education {
	return predicate.Education(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Education {
	return predicate.Education(sql.FieldNotNull(FieldUpdatedAt))
}

// ModeOfStudyEQ applies the EQ predicate on the "mode_of_study" field.
func ModeOfStudyEQ(v string) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldModeOfStudy, v))
}

// ModeOfStudyNEQ applies the NEQ predicate on the "mode_of_study" field.
func ModeOfStudyNEQ(v string) predicate.Education {
	return predicate.Education(sql.FieldNEQ(FieldModeOfStudy, v))
}

// ModeOfStudyIn applies the In predicate on the "mode_of_study" field.
func ModeOfStudyIn(vs ...string) predicate.Education {
	return predicate.Education(sql.FieldIn(FieldModeOfStudy, vs...))
}

// ModeOfStudyNotIn applies the NotIn predicate on the "mode_of_study" field.
func ModeOfStudyNotIn(vs ...string) predicate.Education {
	return predicate.Education(sql.FieldNotIn(FieldModeOfStudy, vs...))
}

// ModeOfStudyGT applies the GT predicate on the "mode_of_study" field.
func ModeOfStudyGT(v string) predicate.Education {
	return predicate.Education(sql.FieldGT(FieldModeOfStudy, v))
}

// ModeOfStudyGTE applies the GTE predicate on the "mode_of_study" field.
func ModeOfStudyGTE(v string) predicate.Education {
	return predicate.Education(sql.FieldGTE(FieldModeOfStudy, v))
}

// ModeOfStudyLT applies the LT predicate on the "mode_of_study" field.
func ModeOfStudyLT(v string) predicate.Education {
	return predicate.Education(sql.FieldLT(FieldModeOfStudy, v))
}

// ModeOfStudyLTE applies the LTE predicate on the "mode_of_study" field.
func ModeOfStudyLTE(v string) predicate.Education {
	return predicate.Education(sql.FieldLTE(FieldModeOfStudy, v))
}

// ModeOfStudyContains applies the Contains predicate on the "mode_of_study" field.
func ModeOfStudyContains(v string) predicate.Education {
	return predicate.Education(sql.FieldContains(FieldModeOfStudy, v))
}

// ModeOfStudyHasPrefix applies the HasPrefix predicate on the "mode_of_study" field.
func ModeOfStudyHasPrefix(v string) predicate.Education {
	return predicate.Education(sql.FieldHasPrefix(FieldModeOfStudy, v))
}

// ModeOfStudyHasSuffix applies the HasSuffix predicate on the "mode_of_study" field.
func ModeOfStudyHasSuffix(v string) predicate.Education {
	return predicate.Education(sql.FieldHasSuffix(FieldModeOfStudy, v))
}

// ModeOfStudyEqualFold applies the EqualFold predicate on the "mode_of_study" field.
func ModeOfStudyEqualFold(v string) predicate.Education {
	return predicate.Education(sql.FieldEqualFold(FieldModeOfStudy, v))
}

// ModeOfStudyContainsFold applies the ContainsFold predicate on the "mode_of_study" field.
func ModeOfStudyContainsFold(v string) predicate.Education {
	return predicate.Education(sql.FieldContainsFold(FieldModeOfStudy, v))
}

// DegreeTypeEQ applies the EQ predicate on the "degree_type" field.
func DegreeTypeEQ(v string) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldDegreeType, v))
}

// DegreeTypeNEQ applies the NEQ predicate on the "degree_type" field.
func DegreeTypeNEQ(v string) predicate.Education {
	return predicate.Education(sql.FieldNEQ(FieldDegreeType, v))
}

// DegreeTypeIn applies the In predicate on the "degree_type" field.
func DegreeTypeIn(vs ...string) predicate.Education {
	return predicate.Education(sql.FieldIn(FieldDegreeType, vs...))
}

// DegreeTypeNotIn applies the NotIn predicate on the "degree_type" field.
func DegreeTypeNotIn(vs ...string) predicate.Education {
	return predicate.Education(sql.FieldNotIn(FieldDegreeType, vs...))
}

// DegreeTypeGT applies the GT predicate on the "degree_type" field.
func DegreeTypeGT(v string) predicate.Education {
	return predicate.Education(sql.FieldGT(FieldDegreeType, v))
}

// DegreeTypeGTE applies the GTE predicate on the "degree_type" field.
func DegreeTypeGTE(v string) predicate.Education {
	return predicate.Education(sql.FieldGTE(FieldDegreeType, v))
}

// DegreeTypeLT applies the LT predicate on the "degree_type" field.
func DegreeTypeLT(v string) predicate.Education {
	return predicate.Education(sql.FieldLT(FieldDegreeType, v))
}

// DegreeTypeLTE applies the LTE predicate on the "degree_type" field.
func DegreeTypeLTE(v string) predicate.Education {
	return predicate.Education(sql.FieldLTE(FieldDegreeType, v))
}

// DegreeTypeContains applies the Contains predicate on the "degree_type" field.
func DegreeTypeContains(v string) predicate.Education {
	return predicate.Education(sql.FieldContains(FieldDegreeType, v))
}

// DegreeTypeHasPrefix applies the HasPrefix predicate on the "degree_type" field.
func DegreeTypeHasPrefix(v string) predicate.Education {
	return predicate.Education(sql.FieldHasPrefix(FieldDegreeType, v))
}

// DegreeTypeHasSuffix applies the HasSuffix predicate on the "degree_type" field.
func DegreeTypeHasSuffix(v string) predicate.Education {
	return predicate.Education(sql.FieldHasSuffix(FieldDegreeType, v))
}

// DegreeTypeEqualFold applies the EqualFold predicate on the "degree_type" field.
func DegreeTypeEqualFold(v string) predicate.Education {
	return predicate.Education(sql.FieldEqualFold(FieldDegreeType, v))
}

// DegreeTypeContainsFold applies the ContainsFold predicate on the "degree_type" field.
func DegreeTypeContainsFold(v string) predicate.Education {
	return predicate.Education(sql.FieldContainsFold(FieldDegreeType, v))
}

// AreaOfStudyEQ applies the EQ predicate on the "area_of_study" field.
func AreaOfStudyEQ(v string) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldAreaOfStudy, v))
}

// AreaOfStudyNEQ applies the NEQ predicate on the "area_of_study" field.
func AreaOfStudyNEQ(v string) predicate.Education {
	return predicate.Education(sql.FieldNEQ(FieldAreaOfStudy, v))
}

// AreaOfStudyIn applies the In predicate on the "area_of_study" field.
func AreaOfStudyIn(vs ...string) predicate.Education {
	return predicate.Education(sql.FieldIn(FieldAreaOfStudy, vs...))
}

// AreaOfStudyNotIn applies the NotIn predicate on the "area_of_study" field.
func AreaOfStudyNotIn(vs ...string) predicate.Education {
	return predicate.Education(sql.FieldNotIn(FieldAreaOfStudy, vs...))
}

// AreaOfStudyGT applies the GT predicate on the "area_of_study" field.
func AreaOfStudyGT(v string) predicate.Education {
	return predicate.Education(sql.FieldGT(FieldAreaOfStudy, v))
}

// AreaOfStudyGTE applies the GTE predicate on the "area_of_study" field.
func AreaOfStudyGTE(v string) predicate.Education {
	return predicate.Education(sql.FieldGTE(FieldAreaOfStudy, v))
}

// AreaOfStudyLT applies the LT predicate on the "area_of_study" field.
func AreaOfStudyLT(v string) predicate.Education {
	return predicate.Education(sql.FieldLT(FieldAreaOfStudy, v))
}

// AreaOfStudyLTE applies the LTE predicate on the "area_of_study" field.
func AreaOfStudyLTE(v string) predicate.Education {
	return predicate.Education(sql.FieldLTE(FieldAreaOfStudy, v))
}

// AreaOfStudyContains applies the Contains predicate on the "area_of_study" field.
func AreaOfStudyContains(v string) predicate.Education {
	return predicate.Education(sql.FieldContains(FieldAreaOfStudy, v))
}

// AreaOfStudyHasPrefix applies the HasPrefix predicate on the "area_of_study" field.
func AreaOfStudyHasPrefix(v string) predicate.Education {
	return predicate.Education(sql.FieldHasPrefix(FieldAreaOfStudy, v))
}

// AreaOfStudyHasSuffix applies the HasSuffix predicate on the "area_of_study" field.
func AreaOfStudyHasSuffix(v string) predicate.Education {
	return predicate.Education(sql.FieldHasSuffix(FieldAreaOfStudy, v))
}

// AreaOfStudyEqualFold applies the EqualFold predicate on the "area_of_study" field.
func AreaOfStudyEqualFold(v string) predicate.Education {
	return predicate.Education(sql.FieldEqualFold(FieldAreaOfStudy, v))
}

// AreaOfStudyContainsFold applies the ContainsFold predicate on the "area_of_study" field.
func AreaOfStudyContainsFold(v string) predicate.Education {
	return predicate.Education(sql.FieldContainsFold(FieldAreaOfStudy, v))
}

// CurrentyStudyingEQ applies the EQ predicate on the "currenty_studying" field.
func CurrentyStudyingEQ(v bool) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldCurrentyStudying, v))
}

// CurrentyStudyingNEQ applies the NEQ predicate on the "currenty_studying" field.
func CurrentyStudyingNEQ(v bool) predicate.Education {
	return predicate.Education(sql.FieldNEQ(FieldCurrentyStudying, v))
}

// CurrentyStudyingIsNil applies the IsNil predicate on the "currenty_studying" field.
func CurrentyStudyingIsNil() predicate.Education {
	return predicate.Education(sql.FieldIsNull(FieldCurrentyStudying))
}

// CurrentyStudyingNotNil applies the NotNil predicate on the "currenty_studying" field.
func CurrentyStudyingNotNil() predicate.Education {
	return predicate.Education(sql.FieldNotNull(FieldCurrentyStudying))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Education {
	return predicate.Education(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Education {
	return predicate.Education(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Education {
	return predicate.Education(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Education {
	return predicate.Education(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Education {
	return predicate.Education(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Education {
	return predicate.Education(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Education {
	return predicate.Education(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Education {
	return predicate.Education(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Education {
	return predicate.Education(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Education {
	return predicate.Education(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Education {
	return predicate.Education(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Education {
	return predicate.Education(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Education {
	return predicate.Education(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Education {
	return predicate.Education(sql.FieldContainsFold(FieldDescription, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Education {
	return predicate.Education(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Education {
	return predicate.Education(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Education) predicate.Education {
	return predicate.Education(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Education) predicate.Education {
	return predicate.Education(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Education) predicate.Education {
	return predicate.Education(sql.NotPredicates(p))
}

// Code generated by ent, DO NOT EDIT.

package education

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the education type in the database.
	Label = "education"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldInstitueName holds the string denoting the institue_name field in the database.
	FieldInstitueName = "institue_name"
	// FieldStartDate holds the string denoting the start_date field in the database.
	FieldStartDate = "start_date"
	// FieldEndDate holds the string denoting the end_date field in the database.
	FieldEndDate = "end_date"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldModeOfStudy holds the string denoting the mode_of_study field in the database.
	FieldModeOfStudy = "mode_of_study"
	// FieldDegreeType holds the string denoting the degree_type field in the database.
	FieldDegreeType = "degree_type"
	// FieldAreaOfStudy holds the string denoting the area_of_study field in the database.
	FieldAreaOfStudy = "area_of_study"
	// FieldCurrentyStudying holds the string denoting the currenty_studying field in the database.
	FieldCurrentyStudying = "currenty_studying"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the education in the database.
	Table = "education"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "education"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "user"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
)

// Columns holds all SQL columns for education fields.
var Columns = []string{
	FieldID,
	FieldInstitueName,
	FieldStartDate,
	FieldEndDate,
	FieldUserID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldModeOfStudy,
	FieldDegreeType,
	FieldAreaOfStudy,
	FieldCurrentyStudying,
	FieldDescription,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Education queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByInstitueName orders the results by the institue_name field.
func ByInstitueName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInstitueName, opts...).ToFunc()
}

// ByStartDate orders the results by the start_date field.
func ByStartDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartDate, opts...).ToFunc()
}

// ByEndDate orders the results by the end_date field.
func ByEndDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndDate, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByModeOfStudy orders the results by the mode_of_study field.
func ByModeOfStudy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModeOfStudy, opts...).ToFunc()
}

// ByDegreeType orders the results by the degree_type field.
func ByDegreeType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDegreeType, opts...).ToFunc()
}

// ByAreaOfStudy orders the results by the area_of_study field.
func ByAreaOfStudy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAreaOfStudy, opts...).ToFunc()
}

// ByCurrentyStudying orders the results by the currenty_studying field.
func ByCurrentyStudying(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrentyStudying, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}

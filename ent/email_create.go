// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"theedashboard/ent/email"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EmailCreate is the builder for creating a Email entity.
type EmailCreate struct {
	config
	mutation *EmailMutation
	hooks    []Hook
}

// SetCallBackEmail sets the "call_back_email" field.
func (ec *EmailCreate) SetCallBackEmail(s string) *EmailCreate {
	ec.mutation.SetCallBackEmail(s)
	return ec
}

// SetMessage sets the "message" field.
func (ec *EmailCreate) SetMessage(s string) *EmailCreate {
	ec.mutation.SetMessage(s)
	return ec
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (ec *EmailCreate) SetNillableMessage(s *string) *EmailCreate {
	if s != nil {
		ec.SetMessage(*s)
	}
	return ec
}

// SetName sets the "name" field.
func (ec *EmailCreate) SetName(s string) *EmailCreate {
	ec.mutation.SetName(s)
	return ec
}

// SetSubject sets the "subject" field.
func (ec *EmailCreate) SetSubject(s string) *EmailCreate {
	ec.mutation.SetSubject(s)
	return ec
}

// SetCreatedAt sets the "created_at" field.
func (ec *EmailCreate) SetCreatedAt(t time.Time) *EmailCreate {
	ec.mutation.SetCreatedAt(t)
	return ec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ec *EmailCreate) SetNillableCreatedAt(t *time.Time) *EmailCreate {
	if t != nil {
		ec.SetCreatedAt(*t)
	}
	return ec
}

// SetUpdatedAt sets the "updated_at" field.
func (ec *EmailCreate) SetUpdatedAt(t time.Time) *EmailCreate {
	ec.mutation.SetUpdatedAt(t)
	return ec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ec *EmailCreate) SetNillableUpdatedAt(t *time.Time) *EmailCreate {
	if t != nil {
		ec.SetUpdatedAt(*t)
	}
	return ec
}

// SetID sets the "id" field.
func (ec *EmailCreate) SetID(u uint) *EmailCreate {
	ec.mutation.SetID(u)
	return ec
}

// Mutation returns the EmailMutation object of the builder.
func (ec *EmailCreate) Mutation() *EmailMutation {
	return ec.mutation
}

// Save creates the Email in the database.
func (ec *EmailCreate) Save(ctx context.Context) (*Email, error) {
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EmailCreate) SaveX(ctx context.Context) *Email {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EmailCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EmailCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *EmailCreate) check() error {
	if _, ok := ec.mutation.CallBackEmail(); !ok {
		return &ValidationError{Name: "call_back_email", err: errors.New(`ent: missing required field "Email.call_back_email"`)}
	}
	if _, ok := ec.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Email.name"`)}
	}
	if _, ok := ec.mutation.Subject(); !ok {
		return &ValidationError{Name: "subject", err: errors.New(`ent: missing required field "Email.subject"`)}
	}
	return nil
}

func (ec *EmailCreate) sqlSave(ctx context.Context) (*Email, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint(id)
	}
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *EmailCreate) createSpec() (*Email, *sqlgraph.CreateSpec) {
	var (
		_node = &Email{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(email.Table, sqlgraph.NewFieldSpec(email.FieldID, field.TypeUint))
	)
	if id, ok := ec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ec.mutation.CallBackEmail(); ok {
		_spec.SetField(email.FieldCallBackEmail, field.TypeString, value)
		_node.CallBackEmail = value
	}
	if value, ok := ec.mutation.Message(); ok {
		_spec.SetField(email.FieldMessage, field.TypeString, value)
		_node.Message = value
	}
	if value, ok := ec.mutation.Name(); ok {
		_spec.SetField(email.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ec.mutation.Subject(); ok {
		_spec.SetField(email.FieldSubject, field.TypeString, value)
		_node.Subject = value
	}
	if value, ok := ec.mutation.CreatedAt(); ok {
		_spec.SetField(email.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ec.mutation.UpdatedAt(); ok {
		_spec.SetField(email.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// EmailCreateBulk is the builder for creating many Email entities in bulk.
type EmailCreateBulk struct {
	config
	err      error
	builders []*EmailCreate
}

// Save creates the Email entities in the database.
func (ecb *EmailCreateBulk) Save(ctx context.Context) ([]*Email, error) {
	if ecb.err != nil {
		return nil, ecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Email, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EmailMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EmailCreateBulk) SaveX(ctx context.Context) []*Email {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EmailCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EmailCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}

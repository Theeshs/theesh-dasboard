// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"theedashboard/ent/user"
	"theedashboard/ent/userproject"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UserProject is the model entity for the UserProject schema.
type UserProject struct {
	config `json:"-"`
	// ID of the ent.
	ID uint `json:"id,omitempty"`
	// ProjectName holds the value of the "project_name" field.
	ProjectName string `json:"project_name,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uint `json:"user_id,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// FromDate holds the value of the "from_date" field.
	FromDate time.Time `json:"from_date,omitempty"`
	// ToDate holds the value of the "to_date" field.
	ToDate time.Time `json:"to_date,omitempty"`
	// ProjectLink holds the value of the "project_link" field.
	ProjectLink string `json:"project_link,omitempty"`
	// Technologies holds the value of the "technologies" field.
	Technologies string `json:"technologies,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserProjectQuery when eager-loading is set.
	Edges        UserProjectEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserProjectEdges holds the relations/edges for other nodes in the graph.
type UserProjectEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserProjectEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserProject) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userproject.FieldID, userproject.FieldUserID:
			values[i] = new(sql.NullInt64)
		case userproject.FieldProjectName, userproject.FieldDescription, userproject.FieldProjectLink, userproject.FieldTechnologies:
			values[i] = new(sql.NullString)
		case userproject.FieldFromDate, userproject.FieldToDate, userproject.FieldCreatedAt, userproject.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserProject fields.
func (up *UserProject) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userproject.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			up.ID = uint(value.Int64)
		case userproject.FieldProjectName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field project_name", values[i])
			} else if value.Valid {
				up.ProjectName = value.String
			}
		case userproject.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				up.UserID = uint(value.Int64)
			}
		case userproject.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				up.Description = value.String
			}
		case userproject.FieldFromDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field from_date", values[i])
			} else if value.Valid {
				up.FromDate = value.Time
			}
		case userproject.FieldToDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field to_date", values[i])
			} else if value.Valid {
				up.ToDate = value.Time
			}
		case userproject.FieldProjectLink:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field project_link", values[i])
			} else if value.Valid {
				up.ProjectLink = value.String
			}
		case userproject.FieldTechnologies:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field technologies", values[i])
			} else if value.Valid {
				up.Technologies = value.String
			}
		case userproject.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				up.CreatedAt = value.Time
			}
		case userproject.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				up.UpdatedAt = value.Time
			}
		default:
			up.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserProject.
// This includes values selected through modifiers, order, etc.
func (up *UserProject) Value(name string) (ent.Value, error) {
	return up.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the UserProject entity.
func (up *UserProject) QueryUser() *UserQuery {
	return NewUserProjectClient(up.config).QueryUser(up)
}

// Update returns a builder for updating this UserProject.
// Note that you need to call UserProject.Unwrap() before calling this method if this UserProject
// was returned from a transaction, and the transaction was committed or rolled back.
func (up *UserProject) Update() *UserProjectUpdateOne {
	return NewUserProjectClient(up.config).UpdateOne(up)
}

// Unwrap unwraps the UserProject entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (up *UserProject) Unwrap() *UserProject {
	_tx, ok := up.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserProject is not a transactional entity")
	}
	up.config.driver = _tx.drv
	return up
}

// String implements the fmt.Stringer.
func (up *UserProject) String() string {
	var builder strings.Builder
	builder.WriteString("UserProject(")
	builder.WriteString(fmt.Sprintf("id=%v, ", up.ID))
	builder.WriteString("project_name=")
	builder.WriteString(up.ProjectName)
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", up.UserID))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(up.Description)
	builder.WriteString(", ")
	builder.WriteString("from_date=")
	builder.WriteString(up.FromDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("to_date=")
	builder.WriteString(up.ToDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("project_link=")
	builder.WriteString(up.ProjectLink)
	builder.WriteString(", ")
	builder.WriteString("technologies=")
	builder.WriteString(up.Technologies)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(up.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(up.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UserProjects is a parsable slice of UserProject.
type UserProjects []*UserProject

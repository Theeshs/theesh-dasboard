// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"theedashboard/ent/education"
	"theedashboard/ent/experience"
	"theedashboard/ent/repository"
	"theedashboard/ent/user"
	"theedashboard/ent/userproject"
	"theedashboard/ent/userservice"
	"theedashboard/ent/userskillassociation"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
}

// SetFirstName sets the "first_name" field.
func (uc *UserCreate) SetFirstName(s string) *UserCreate {
	uc.mutation.SetFirstName(s)
	return uc
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (uc *UserCreate) SetNillableFirstName(s *string) *UserCreate {
	if s != nil {
		uc.SetFirstName(*s)
	}
	return uc
}

// SetLastName sets the "last_name" field.
func (uc *UserCreate) SetLastName(s string) *UserCreate {
	uc.mutation.SetLastName(s)
	return uc
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (uc *UserCreate) SetNillableLastName(s *string) *UserCreate {
	if s != nil {
		uc.SetLastName(*s)
	}
	return uc
}

// SetDob sets the "dob" field.
func (uc *UserCreate) SetDob(t time.Time) *UserCreate {
	uc.mutation.SetDob(t)
	return uc
}

// SetNillableDob sets the "dob" field if the given value is not nil.
func (uc *UserCreate) SetNillableDob(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetDob(*t)
	}
	return uc
}

// SetUsername sets the "username" field.
func (uc *UserCreate) SetUsername(s string) *UserCreate {
	uc.mutation.SetUsername(s)
	return uc
}

// SetPassword sets the "password" field.
func (uc *UserCreate) SetPassword(s string) *UserCreate {
	uc.mutation.SetPassword(s)
	return uc
}

// SetEmail sets the "email" field.
func (uc *UserCreate) SetEmail(s string) *UserCreate {
	uc.mutation.SetEmail(s)
	return uc
}

// SetGithubUsername sets the "github_username" field.
func (uc *UserCreate) SetGithubUsername(s string) *UserCreate {
	uc.mutation.SetGithubUsername(s)
	return uc
}

// SetNillableGithubUsername sets the "github_username" field if the given value is not nil.
func (uc *UserCreate) SetNillableGithubUsername(s *string) *UserCreate {
	if s != nil {
		uc.SetGithubUsername(*s)
	}
	return uc
}

// SetDescription sets the "description" field.
func (uc *UserCreate) SetDescription(s string) *UserCreate {
	uc.mutation.SetDescription(s)
	return uc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (uc *UserCreate) SetNillableDescription(s *string) *UserCreate {
	if s != nil {
		uc.SetDescription(*s)
	}
	return uc
}

// SetCreatedAt sets the "created_at" field.
func (uc *UserCreate) SetCreatedAt(t time.Time) *UserCreate {
	uc.mutation.SetCreatedAt(t)
	return uc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableCreatedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetCreatedAt(*t)
	}
	return uc
}

// SetUpdatedAt sets the "updated_at" field.
func (uc *UserCreate) SetUpdatedAt(t time.Time) *UserCreate {
	uc.mutation.SetUpdatedAt(t)
	return uc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableUpdatedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetUpdatedAt(*t)
	}
	return uc
}

// SetMobileNumber sets the "mobile_number" field.
func (uc *UserCreate) SetMobileNumber(i int32) *UserCreate {
	uc.mutation.SetMobileNumber(i)
	return uc
}

// SetNillableMobileNumber sets the "mobile_number" field if the given value is not nil.
func (uc *UserCreate) SetNillableMobileNumber(i *int32) *UserCreate {
	if i != nil {
		uc.SetMobileNumber(*i)
	}
	return uc
}

// SetAddressBlock sets the "address_block" field.
func (uc *UserCreate) SetAddressBlock(s string) *UserCreate {
	uc.mutation.SetAddressBlock(s)
	return uc
}

// SetNillableAddressBlock sets the "address_block" field if the given value is not nil.
func (uc *UserCreate) SetNillableAddressBlock(s *string) *UserCreate {
	if s != nil {
		uc.SetAddressBlock(*s)
	}
	return uc
}

// SetAddressStreet sets the "address_street" field.
func (uc *UserCreate) SetAddressStreet(s string) *UserCreate {
	uc.mutation.SetAddressStreet(s)
	return uc
}

// SetNillableAddressStreet sets the "address_street" field if the given value is not nil.
func (uc *UserCreate) SetNillableAddressStreet(s *string) *UserCreate {
	if s != nil {
		uc.SetAddressStreet(*s)
	}
	return uc
}

// SetRecidentialCountry sets the "recidential_country" field.
func (uc *UserCreate) SetRecidentialCountry(s string) *UserCreate {
	uc.mutation.SetRecidentialCountry(s)
	return uc
}

// SetNillableRecidentialCountry sets the "recidential_country" field if the given value is not nil.
func (uc *UserCreate) SetNillableRecidentialCountry(s *string) *UserCreate {
	if s != nil {
		uc.SetRecidentialCountry(*s)
	}
	return uc
}

// SetNationality sets the "nationality" field.
func (uc *UserCreate) SetNationality(s string) *UserCreate {
	uc.mutation.SetNationality(s)
	return uc
}

// SetNillableNationality sets the "nationality" field if the given value is not nil.
func (uc *UserCreate) SetNillableNationality(s *string) *UserCreate {
	if s != nil {
		uc.SetNationality(*s)
	}
	return uc
}

// SetID sets the "id" field.
func (uc *UserCreate) SetID(u uint) *UserCreate {
	uc.mutation.SetID(u)
	return uc
}

// AddEducationIDs adds the "educations" edge to the Education entity by IDs.
func (uc *UserCreate) AddEducationIDs(ids ...uint) *UserCreate {
	uc.mutation.AddEducationIDs(ids...)
	return uc
}

// AddEducations adds the "educations" edges to the Education entity.
func (uc *UserCreate) AddEducations(e ...*Education) *UserCreate {
	ids := make([]uint, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uc.AddEducationIDs(ids...)
}

// AddExperienceIDs adds the "experiences" edge to the Experience entity by IDs.
func (uc *UserCreate) AddExperienceIDs(ids ...uint) *UserCreate {
	uc.mutation.AddExperienceIDs(ids...)
	return uc
}

// AddExperiences adds the "experiences" edges to the Experience entity.
func (uc *UserCreate) AddExperiences(e ...*Experience) *UserCreate {
	ids := make([]uint, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uc.AddExperienceIDs(ids...)
}

// AddRepositoryIDs adds the "repositories" edge to the Repository entity by IDs.
func (uc *UserCreate) AddRepositoryIDs(ids ...uint) *UserCreate {
	uc.mutation.AddRepositoryIDs(ids...)
	return uc
}

// AddRepositories adds the "repositories" edges to the Repository entity.
func (uc *UserCreate) AddRepositories(r ...*Repository) *UserCreate {
	ids := make([]uint, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uc.AddRepositoryIDs(ids...)
}

// AddUserProjectIDs adds the "user_projects" edge to the UserProject entity by IDs.
func (uc *UserCreate) AddUserProjectIDs(ids ...uint) *UserCreate {
	uc.mutation.AddUserProjectIDs(ids...)
	return uc
}

// AddUserProjects adds the "user_projects" edges to the UserProject entity.
func (uc *UserCreate) AddUserProjects(u ...*UserProject) *UserCreate {
	ids := make([]uint, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uc.AddUserProjectIDs(ids...)
}

// AddUserServiceIDs adds the "user_services" edge to the UserService entity by IDs.
func (uc *UserCreate) AddUserServiceIDs(ids ...uint) *UserCreate {
	uc.mutation.AddUserServiceIDs(ids...)
	return uc
}

// AddUserServices adds the "user_services" edges to the UserService entity.
func (uc *UserCreate) AddUserServices(u ...*UserService) *UserCreate {
	ids := make([]uint, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uc.AddUserServiceIDs(ids...)
}

// AddUserSkillAssociationIDs adds the "user_skill_associations" edge to the UserSkillAssociation entity by IDs.
func (uc *UserCreate) AddUserSkillAssociationIDs(ids ...uint) *UserCreate {
	uc.mutation.AddUserSkillAssociationIDs(ids...)
	return uc
}

// AddUserSkillAssociations adds the "user_skill_associations" edges to the UserSkillAssociation entity.
func (uc *UserCreate) AddUserSkillAssociations(u ...*UserSkillAssociation) *UserCreate {
	ids := make([]uint, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uc.AddUserSkillAssociationIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	return withHooks(ctx, uc.sqlSave, uc.mutation, uc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UserCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UserCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *UserCreate) check() error {
	if _, ok := uc.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "User.username"`)}
	}
	if _, ok := uc.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`ent: missing required field "User.password"`)}
	}
	if _, ok := uc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "User.email"`)}
	}
	return nil
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	if err := uc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint(id)
	}
	uc.mutation.id = &_node.ID
	uc.mutation.done = true
	return _node, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: uc.config}
		_spec = sqlgraph.NewCreateSpec(user.Table, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint))
	)
	if id, ok := uc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := uc.mutation.FirstName(); ok {
		_spec.SetField(user.FieldFirstName, field.TypeString, value)
		_node.FirstName = value
	}
	if value, ok := uc.mutation.LastName(); ok {
		_spec.SetField(user.FieldLastName, field.TypeString, value)
		_node.LastName = value
	}
	if value, ok := uc.mutation.Dob(); ok {
		_spec.SetField(user.FieldDob, field.TypeTime, value)
		_node.Dob = value
	}
	if value, ok := uc.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := uc.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := uc.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := uc.mutation.GithubUsername(); ok {
		_spec.SetField(user.FieldGithubUsername, field.TypeString, value)
		_node.GithubUsername = value
	}
	if value, ok := uc.mutation.Description(); ok {
		_spec.SetField(user.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := uc.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := uc.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := uc.mutation.MobileNumber(); ok {
		_spec.SetField(user.FieldMobileNumber, field.TypeInt32, value)
		_node.MobileNumber = value
	}
	if value, ok := uc.mutation.AddressBlock(); ok {
		_spec.SetField(user.FieldAddressBlock, field.TypeString, value)
		_node.AddressBlock = value
	}
	if value, ok := uc.mutation.AddressStreet(); ok {
		_spec.SetField(user.FieldAddressStreet, field.TypeString, value)
		_node.AddressStreet = value
	}
	if value, ok := uc.mutation.RecidentialCountry(); ok {
		_spec.SetField(user.FieldRecidentialCountry, field.TypeString, value)
		_node.RecidentialCountry = value
	}
	if value, ok := uc.mutation.Nationality(); ok {
		_spec.SetField(user.FieldNationality, field.TypeString, value)
		_node.Nationality = value
	}
	if nodes := uc.mutation.EducationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.EducationsTable,
			Columns: []string{user.EducationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(education.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.ExperiencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ExperiencesTable,
			Columns: []string{user.ExperiencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(experience.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.RepositoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RepositoriesTable,
			Columns: []string{user.RepositoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.UserProjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserProjectsTable,
			Columns: []string{user.UserProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userproject.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.UserServicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserServicesTable,
			Columns: []string{user.UserServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userservice.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.UserSkillAssociationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserSkillAssociationsTable,
			Columns: []string{user.UserSkillAssociationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userskillassociation.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	err      error
	builders []*UserCreate
}

// Save creates the User entities in the database.
func (ucb *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	if ucb.err != nil {
		return nil, ucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*User, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UserCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}

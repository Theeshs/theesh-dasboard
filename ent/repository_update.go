// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"theedashboard/ent/predicate"
	"theedashboard/ent/repository"
	"theedashboard/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RepositoryUpdate is the builder for updating Repository entities.
type RepositoryUpdate struct {
	config
	hooks    []Hook
	mutation *RepositoryMutation
}

// Where appends a list predicates to the RepositoryUpdate builder.
func (ru *RepositoryUpdate) Where(ps ...predicate.Repository) *RepositoryUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetRepoName sets the "repo_name" field.
func (ru *RepositoryUpdate) SetRepoName(s string) *RepositoryUpdate {
	ru.mutation.SetRepoName(s)
	return ru
}

// SetNillableRepoName sets the "repo_name" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableRepoName(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetRepoName(*s)
	}
	return ru
}

// SetRepoDescription sets the "repo_description" field.
func (ru *RepositoryUpdate) SetRepoDescription(s string) *RepositoryUpdate {
	ru.mutation.SetRepoDescription(s)
	return ru
}

// SetNillableRepoDescription sets the "repo_description" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableRepoDescription(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetRepoDescription(*s)
	}
	return ru
}

// ClearRepoDescription clears the value of the "repo_description" field.
func (ru *RepositoryUpdate) ClearRepoDescription() *RepositoryUpdate {
	ru.mutation.ClearRepoDescription()
	return ru
}

// SetRepoURL sets the "repo_url" field.
func (ru *RepositoryUpdate) SetRepoURL(s string) *RepositoryUpdate {
	ru.mutation.SetRepoURL(s)
	return ru
}

// SetNillableRepoURL sets the "repo_url" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableRepoURL(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetRepoURL(*s)
	}
	return ru
}

// SetRepoLanguage sets the "repo_language" field.
func (ru *RepositoryUpdate) SetRepoLanguage(s string) *RepositoryUpdate {
	ru.mutation.SetRepoLanguage(s)
	return ru
}

// SetNillableRepoLanguage sets the "repo_language" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableRepoLanguage(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetRepoLanguage(*s)
	}
	return ru
}

// ClearRepoLanguage clears the value of the "repo_language" field.
func (ru *RepositoryUpdate) ClearRepoLanguage() *RepositoryUpdate {
	ru.mutation.ClearRepoLanguage()
	return ru
}

// SetRepoCreatedAt sets the "repo_created_at" field.
func (ru *RepositoryUpdate) SetRepoCreatedAt(t time.Time) *RepositoryUpdate {
	ru.mutation.SetRepoCreatedAt(t)
	return ru
}

// SetNillableRepoCreatedAt sets the "repo_created_at" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableRepoCreatedAt(t *time.Time) *RepositoryUpdate {
	if t != nil {
		ru.SetRepoCreatedAt(*t)
	}
	return ru
}

// SetRepoUpdatedAt sets the "repo_updated_at" field.
func (ru *RepositoryUpdate) SetRepoUpdatedAt(t time.Time) *RepositoryUpdate {
	ru.mutation.SetRepoUpdatedAt(t)
	return ru
}

// SetNillableRepoUpdatedAt sets the "repo_updated_at" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableRepoUpdatedAt(t *time.Time) *RepositoryUpdate {
	if t != nil {
		ru.SetRepoUpdatedAt(*t)
	}
	return ru
}

// SetUserID sets the "user_id" field.
func (ru *RepositoryUpdate) SetUserID(u uint) *RepositoryUpdate {
	ru.mutation.SetUserID(u)
	return ru
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableUserID(u *uint) *RepositoryUpdate {
	if u != nil {
		ru.SetUserID(*u)
	}
	return ru
}

// ClearUserID clears the value of the "user_id" field.
func (ru *RepositoryUpdate) ClearUserID() *RepositoryUpdate {
	ru.mutation.ClearUserID()
	return ru
}

// SetCreatedAt sets the "created_at" field.
func (ru *RepositoryUpdate) SetCreatedAt(t time.Time) *RepositoryUpdate {
	ru.mutation.SetCreatedAt(t)
	return ru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableCreatedAt(t *time.Time) *RepositoryUpdate {
	if t != nil {
		ru.SetCreatedAt(*t)
	}
	return ru
}

// ClearCreatedAt clears the value of the "created_at" field.
func (ru *RepositoryUpdate) ClearCreatedAt() *RepositoryUpdate {
	ru.mutation.ClearCreatedAt()
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *RepositoryUpdate) SetUpdatedAt(t time.Time) *RepositoryUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableUpdatedAt(t *time.Time) *RepositoryUpdate {
	if t != nil {
		ru.SetUpdatedAt(*t)
	}
	return ru
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ru *RepositoryUpdate) ClearUpdatedAt() *RepositoryUpdate {
	ru.mutation.ClearUpdatedAt()
	return ru
}

// SetShowOnProfile sets the "show_on_profile" field.
func (ru *RepositoryUpdate) SetShowOnProfile(b bool) *RepositoryUpdate {
	ru.mutation.SetShowOnProfile(b)
	return ru
}

// SetNillableShowOnProfile sets the "show_on_profile" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableShowOnProfile(b *bool) *RepositoryUpdate {
	if b != nil {
		ru.SetShowOnProfile(*b)
	}
	return ru
}

// SetOrder sets the "order" field.
func (ru *RepositoryUpdate) SetOrder(i int32) *RepositoryUpdate {
	ru.mutation.ResetOrder()
	ru.mutation.SetOrder(i)
	return ru
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableOrder(i *int32) *RepositoryUpdate {
	if i != nil {
		ru.SetOrder(*i)
	}
	return ru
}

// AddOrder adds i to the "order" field.
func (ru *RepositoryUpdate) AddOrder(i int32) *RepositoryUpdate {
	ru.mutation.AddOrder(i)
	return ru
}

// SetUser sets the "user" edge to the User entity.
func (ru *RepositoryUpdate) SetUser(u *User) *RepositoryUpdate {
	return ru.SetUserID(u.ID)
}

// Mutation returns the RepositoryMutation object of the builder.
func (ru *RepositoryUpdate) Mutation() *RepositoryMutation {
	return ru.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ru *RepositoryUpdate) ClearUser() *RepositoryUpdate {
	ru.mutation.ClearUser()
	return ru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RepositoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RepositoryUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RepositoryUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RepositoryUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *RepositoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(repository.Table, repository.Columns, sqlgraph.NewFieldSpec(repository.FieldID, field.TypeUint))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.RepoName(); ok {
		_spec.SetField(repository.FieldRepoName, field.TypeString, value)
	}
	if value, ok := ru.mutation.RepoDescription(); ok {
		_spec.SetField(repository.FieldRepoDescription, field.TypeString, value)
	}
	if ru.mutation.RepoDescriptionCleared() {
		_spec.ClearField(repository.FieldRepoDescription, field.TypeString)
	}
	if value, ok := ru.mutation.RepoURL(); ok {
		_spec.SetField(repository.FieldRepoURL, field.TypeString, value)
	}
	if value, ok := ru.mutation.RepoLanguage(); ok {
		_spec.SetField(repository.FieldRepoLanguage, field.TypeString, value)
	}
	if ru.mutation.RepoLanguageCleared() {
		_spec.ClearField(repository.FieldRepoLanguage, field.TypeString)
	}
	if value, ok := ru.mutation.RepoCreatedAt(); ok {
		_spec.SetField(repository.FieldRepoCreatedAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.RepoUpdatedAt(); ok {
		_spec.SetField(repository.FieldRepoUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.CreatedAt(); ok {
		_spec.SetField(repository.FieldCreatedAt, field.TypeTime, value)
	}
	if ru.mutation.CreatedAtCleared() {
		_spec.ClearField(repository.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(repository.FieldUpdatedAt, field.TypeTime, value)
	}
	if ru.mutation.UpdatedAtCleared() {
		_spec.ClearField(repository.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := ru.mutation.ShowOnProfile(); ok {
		_spec.SetField(repository.FieldShowOnProfile, field.TypeBool, value)
	}
	if value, ok := ru.mutation.Order(); ok {
		_spec.SetField(repository.FieldOrder, field.TypeInt32, value)
	}
	if value, ok := ru.mutation.AddedOrder(); ok {
		_spec.AddField(repository.FieldOrder, field.TypeInt32, value)
	}
	if ru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   repository.UserTable,
			Columns: []string{repository.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   repository.UserTable,
			Columns: []string{repository.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{repository.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RepositoryUpdateOne is the builder for updating a single Repository entity.
type RepositoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RepositoryMutation
}

// SetRepoName sets the "repo_name" field.
func (ruo *RepositoryUpdateOne) SetRepoName(s string) *RepositoryUpdateOne {
	ruo.mutation.SetRepoName(s)
	return ruo
}

// SetNillableRepoName sets the "repo_name" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableRepoName(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetRepoName(*s)
	}
	return ruo
}

// SetRepoDescription sets the "repo_description" field.
func (ruo *RepositoryUpdateOne) SetRepoDescription(s string) *RepositoryUpdateOne {
	ruo.mutation.SetRepoDescription(s)
	return ruo
}

// SetNillableRepoDescription sets the "repo_description" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableRepoDescription(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetRepoDescription(*s)
	}
	return ruo
}

// ClearRepoDescription clears the value of the "repo_description" field.
func (ruo *RepositoryUpdateOne) ClearRepoDescription() *RepositoryUpdateOne {
	ruo.mutation.ClearRepoDescription()
	return ruo
}

// SetRepoURL sets the "repo_url" field.
func (ruo *RepositoryUpdateOne) SetRepoURL(s string) *RepositoryUpdateOne {
	ruo.mutation.SetRepoURL(s)
	return ruo
}

// SetNillableRepoURL sets the "repo_url" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableRepoURL(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetRepoURL(*s)
	}
	return ruo
}

// SetRepoLanguage sets the "repo_language" field.
func (ruo *RepositoryUpdateOne) SetRepoLanguage(s string) *RepositoryUpdateOne {
	ruo.mutation.SetRepoLanguage(s)
	return ruo
}

// SetNillableRepoLanguage sets the "repo_language" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableRepoLanguage(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetRepoLanguage(*s)
	}
	return ruo
}

// ClearRepoLanguage clears the value of the "repo_language" field.
func (ruo *RepositoryUpdateOne) ClearRepoLanguage() *RepositoryUpdateOne {
	ruo.mutation.ClearRepoLanguage()
	return ruo
}

// SetRepoCreatedAt sets the "repo_created_at" field.
func (ruo *RepositoryUpdateOne) SetRepoCreatedAt(t time.Time) *RepositoryUpdateOne {
	ruo.mutation.SetRepoCreatedAt(t)
	return ruo
}

// SetNillableRepoCreatedAt sets the "repo_created_at" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableRepoCreatedAt(t *time.Time) *RepositoryUpdateOne {
	if t != nil {
		ruo.SetRepoCreatedAt(*t)
	}
	return ruo
}

// SetRepoUpdatedAt sets the "repo_updated_at" field.
func (ruo *RepositoryUpdateOne) SetRepoUpdatedAt(t time.Time) *RepositoryUpdateOne {
	ruo.mutation.SetRepoUpdatedAt(t)
	return ruo
}

// SetNillableRepoUpdatedAt sets the "repo_updated_at" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableRepoUpdatedAt(t *time.Time) *RepositoryUpdateOne {
	if t != nil {
		ruo.SetRepoUpdatedAt(*t)
	}
	return ruo
}

// SetUserID sets the "user_id" field.
func (ruo *RepositoryUpdateOne) SetUserID(u uint) *RepositoryUpdateOne {
	ruo.mutation.SetUserID(u)
	return ruo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableUserID(u *uint) *RepositoryUpdateOne {
	if u != nil {
		ruo.SetUserID(*u)
	}
	return ruo
}

// ClearUserID clears the value of the "user_id" field.
func (ruo *RepositoryUpdateOne) ClearUserID() *RepositoryUpdateOne {
	ruo.mutation.ClearUserID()
	return ruo
}

// SetCreatedAt sets the "created_at" field.
func (ruo *RepositoryUpdateOne) SetCreatedAt(t time.Time) *RepositoryUpdateOne {
	ruo.mutation.SetCreatedAt(t)
	return ruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableCreatedAt(t *time.Time) *RepositoryUpdateOne {
	if t != nil {
		ruo.SetCreatedAt(*t)
	}
	return ruo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (ruo *RepositoryUpdateOne) ClearCreatedAt() *RepositoryUpdateOne {
	ruo.mutation.ClearCreatedAt()
	return ruo
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *RepositoryUpdateOne) SetUpdatedAt(t time.Time) *RepositoryUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableUpdatedAt(t *time.Time) *RepositoryUpdateOne {
	if t != nil {
		ruo.SetUpdatedAt(*t)
	}
	return ruo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ruo *RepositoryUpdateOne) ClearUpdatedAt() *RepositoryUpdateOne {
	ruo.mutation.ClearUpdatedAt()
	return ruo
}

// SetShowOnProfile sets the "show_on_profile" field.
func (ruo *RepositoryUpdateOne) SetShowOnProfile(b bool) *RepositoryUpdateOne {
	ruo.mutation.SetShowOnProfile(b)
	return ruo
}

// SetNillableShowOnProfile sets the "show_on_profile" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableShowOnProfile(b *bool) *RepositoryUpdateOne {
	if b != nil {
		ruo.SetShowOnProfile(*b)
	}
	return ruo
}

// SetOrder sets the "order" field.
func (ruo *RepositoryUpdateOne) SetOrder(i int32) *RepositoryUpdateOne {
	ruo.mutation.ResetOrder()
	ruo.mutation.SetOrder(i)
	return ruo
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableOrder(i *int32) *RepositoryUpdateOne {
	if i != nil {
		ruo.SetOrder(*i)
	}
	return ruo
}

// AddOrder adds i to the "order" field.
func (ruo *RepositoryUpdateOne) AddOrder(i int32) *RepositoryUpdateOne {
	ruo.mutation.AddOrder(i)
	return ruo
}

// SetUser sets the "user" edge to the User entity.
func (ruo *RepositoryUpdateOne) SetUser(u *User) *RepositoryUpdateOne {
	return ruo.SetUserID(u.ID)
}

// Mutation returns the RepositoryMutation object of the builder.
func (ruo *RepositoryUpdateOne) Mutation() *RepositoryMutation {
	return ruo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ruo *RepositoryUpdateOne) ClearUser() *RepositoryUpdateOne {
	ruo.mutation.ClearUser()
	return ruo
}

// Where appends a list predicates to the RepositoryUpdate builder.
func (ruo *RepositoryUpdateOne) Where(ps ...predicate.Repository) *RepositoryUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RepositoryUpdateOne) Select(field string, fields ...string) *RepositoryUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Repository entity.
func (ruo *RepositoryUpdateOne) Save(ctx context.Context) (*Repository, error) {
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RepositoryUpdateOne) SaveX(ctx context.Context) *Repository {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RepositoryUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RepositoryUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *RepositoryUpdateOne) sqlSave(ctx context.Context) (_node *Repository, err error) {
	_spec := sqlgraph.NewUpdateSpec(repository.Table, repository.Columns, sqlgraph.NewFieldSpec(repository.FieldID, field.TypeUint))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Repository.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, repository.FieldID)
		for _, f := range fields {
			if !repository.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != repository.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.RepoName(); ok {
		_spec.SetField(repository.FieldRepoName, field.TypeString, value)
	}
	if value, ok := ruo.mutation.RepoDescription(); ok {
		_spec.SetField(repository.FieldRepoDescription, field.TypeString, value)
	}
	if ruo.mutation.RepoDescriptionCleared() {
		_spec.ClearField(repository.FieldRepoDescription, field.TypeString)
	}
	if value, ok := ruo.mutation.RepoURL(); ok {
		_spec.SetField(repository.FieldRepoURL, field.TypeString, value)
	}
	if value, ok := ruo.mutation.RepoLanguage(); ok {
		_spec.SetField(repository.FieldRepoLanguage, field.TypeString, value)
	}
	if ruo.mutation.RepoLanguageCleared() {
		_spec.ClearField(repository.FieldRepoLanguage, field.TypeString)
	}
	if value, ok := ruo.mutation.RepoCreatedAt(); ok {
		_spec.SetField(repository.FieldRepoCreatedAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.RepoUpdatedAt(); ok {
		_spec.SetField(repository.FieldRepoUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.CreatedAt(); ok {
		_spec.SetField(repository.FieldCreatedAt, field.TypeTime, value)
	}
	if ruo.mutation.CreatedAtCleared() {
		_spec.ClearField(repository.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(repository.FieldUpdatedAt, field.TypeTime, value)
	}
	if ruo.mutation.UpdatedAtCleared() {
		_spec.ClearField(repository.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := ruo.mutation.ShowOnProfile(); ok {
		_spec.SetField(repository.FieldShowOnProfile, field.TypeBool, value)
	}
	if value, ok := ruo.mutation.Order(); ok {
		_spec.SetField(repository.FieldOrder, field.TypeInt32, value)
	}
	if value, ok := ruo.mutation.AddedOrder(); ok {
		_spec.AddField(repository.FieldOrder, field.TypeInt32, value)
	}
	if ruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   repository.UserTable,
			Columns: []string{repository.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   repository.UserTable,
			Columns: []string{repository.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Repository{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{repository.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}

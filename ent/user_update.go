// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"theedashboard/ent/education"
	"theedashboard/ent/experience"
	"theedashboard/ent/predicate"
	"theedashboard/ent/repository"
	"theedashboard/ent/user"
	"theedashboard/ent/userproject"
	"theedashboard/ent/userservice"
	"theedashboard/ent/userskillassociation"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetFirstName sets the "first_name" field.
func (uu *UserUpdate) SetFirstName(s string) *UserUpdate {
	uu.mutation.SetFirstName(s)
	return uu
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableFirstName(s *string) *UserUpdate {
	if s != nil {
		uu.SetFirstName(*s)
	}
	return uu
}

// ClearFirstName clears the value of the "first_name" field.
func (uu *UserUpdate) ClearFirstName() *UserUpdate {
	uu.mutation.ClearFirstName()
	return uu
}

// SetLastName sets the "last_name" field.
func (uu *UserUpdate) SetLastName(s string) *UserUpdate {
	uu.mutation.SetLastName(s)
	return uu
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLastName(s *string) *UserUpdate {
	if s != nil {
		uu.SetLastName(*s)
	}
	return uu
}

// ClearLastName clears the value of the "last_name" field.
func (uu *UserUpdate) ClearLastName() *UserUpdate {
	uu.mutation.ClearLastName()
	return uu
}

// SetDob sets the "dob" field.
func (uu *UserUpdate) SetDob(t time.Time) *UserUpdate {
	uu.mutation.SetDob(t)
	return uu
}

// SetNillableDob sets the "dob" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDob(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetDob(*t)
	}
	return uu
}

// ClearDob clears the value of the "dob" field.
func (uu *UserUpdate) ClearDob() *UserUpdate {
	uu.mutation.ClearDob()
	return uu
}

// SetUsername sets the "username" field.
func (uu *UserUpdate) SetUsername(s string) *UserUpdate {
	uu.mutation.SetUsername(s)
	return uu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUsername(s *string) *UserUpdate {
	if s != nil {
		uu.SetUsername(*s)
	}
	return uu
}

// SetPassword sets the "password" field.
func (uu *UserUpdate) SetPassword(s string) *UserUpdate {
	uu.mutation.SetPassword(s)
	return uu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePassword(s *string) *UserUpdate {
	if s != nil {
		uu.SetPassword(*s)
	}
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmail(s *string) *UserUpdate {
	if s != nil {
		uu.SetEmail(*s)
	}
	return uu
}

// SetGithubUsername sets the "github_username" field.
func (uu *UserUpdate) SetGithubUsername(s string) *UserUpdate {
	uu.mutation.SetGithubUsername(s)
	return uu
}

// SetNillableGithubUsername sets the "github_username" field if the given value is not nil.
func (uu *UserUpdate) SetNillableGithubUsername(s *string) *UserUpdate {
	if s != nil {
		uu.SetGithubUsername(*s)
	}
	return uu
}

// ClearGithubUsername clears the value of the "github_username" field.
func (uu *UserUpdate) ClearGithubUsername() *UserUpdate {
	uu.mutation.ClearGithubUsername()
	return uu
}

// SetDescription sets the "description" field.
func (uu *UserUpdate) SetDescription(s string) *UserUpdate {
	uu.mutation.SetDescription(s)
	return uu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDescription(s *string) *UserUpdate {
	if s != nil {
		uu.SetDescription(*s)
	}
	return uu
}

// ClearDescription clears the value of the "description" field.
func (uu *UserUpdate) ClearDescription() *UserUpdate {
	uu.mutation.ClearDescription()
	return uu
}

// SetCreatedAt sets the "created_at" field.
func (uu *UserUpdate) SetCreatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetCreatedAt(t)
	return uu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCreatedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetCreatedAt(*t)
	}
	return uu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (uu *UserUpdate) ClearCreatedAt() *UserUpdate {
	uu.mutation.ClearCreatedAt()
	return uu
}

// SetUpdatedAt sets the "updated_at" field.
func (uu *UserUpdate) SetUpdatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetUpdatedAt(t)
	return uu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUpdatedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetUpdatedAt(*t)
	}
	return uu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (uu *UserUpdate) ClearUpdatedAt() *UserUpdate {
	uu.mutation.ClearUpdatedAt()
	return uu
}

// SetMobileNumber sets the "mobile_number" field.
func (uu *UserUpdate) SetMobileNumber(i int32) *UserUpdate {
	uu.mutation.ResetMobileNumber()
	uu.mutation.SetMobileNumber(i)
	return uu
}

// SetNillableMobileNumber sets the "mobile_number" field if the given value is not nil.
func (uu *UserUpdate) SetNillableMobileNumber(i *int32) *UserUpdate {
	if i != nil {
		uu.SetMobileNumber(*i)
	}
	return uu
}

// AddMobileNumber adds i to the "mobile_number" field.
func (uu *UserUpdate) AddMobileNumber(i int32) *UserUpdate {
	uu.mutation.AddMobileNumber(i)
	return uu
}

// ClearMobileNumber clears the value of the "mobile_number" field.
func (uu *UserUpdate) ClearMobileNumber() *UserUpdate {
	uu.mutation.ClearMobileNumber()
	return uu
}

// SetAddressBlock sets the "address_block" field.
func (uu *UserUpdate) SetAddressBlock(s string) *UserUpdate {
	uu.mutation.SetAddressBlock(s)
	return uu
}

// SetNillableAddressBlock sets the "address_block" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAddressBlock(s *string) *UserUpdate {
	if s != nil {
		uu.SetAddressBlock(*s)
	}
	return uu
}

// ClearAddressBlock clears the value of the "address_block" field.
func (uu *UserUpdate) ClearAddressBlock() *UserUpdate {
	uu.mutation.ClearAddressBlock()
	return uu
}

// SetAddressStreet sets the "address_street" field.
func (uu *UserUpdate) SetAddressStreet(s string) *UserUpdate {
	uu.mutation.SetAddressStreet(s)
	return uu
}

// SetNillableAddressStreet sets the "address_street" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAddressStreet(s *string) *UserUpdate {
	if s != nil {
		uu.SetAddressStreet(*s)
	}
	return uu
}

// ClearAddressStreet clears the value of the "address_street" field.
func (uu *UserUpdate) ClearAddressStreet() *UserUpdate {
	uu.mutation.ClearAddressStreet()
	return uu
}

// SetRecidentialCountry sets the "recidential_country" field.
func (uu *UserUpdate) SetRecidentialCountry(s string) *UserUpdate {
	uu.mutation.SetRecidentialCountry(s)
	return uu
}

// SetNillableRecidentialCountry sets the "recidential_country" field if the given value is not nil.
func (uu *UserUpdate) SetNillableRecidentialCountry(s *string) *UserUpdate {
	if s != nil {
		uu.SetRecidentialCountry(*s)
	}
	return uu
}

// ClearRecidentialCountry clears the value of the "recidential_country" field.
func (uu *UserUpdate) ClearRecidentialCountry() *UserUpdate {
	uu.mutation.ClearRecidentialCountry()
	return uu
}

// SetNationality sets the "nationality" field.
func (uu *UserUpdate) SetNationality(s string) *UserUpdate {
	uu.mutation.SetNationality(s)
	return uu
}

// SetNillableNationality sets the "nationality" field if the given value is not nil.
func (uu *UserUpdate) SetNillableNationality(s *string) *UserUpdate {
	if s != nil {
		uu.SetNationality(*s)
	}
	return uu
}

// ClearNationality clears the value of the "nationality" field.
func (uu *UserUpdate) ClearNationality() *UserUpdate {
	uu.mutation.ClearNationality()
	return uu
}

// AddEducationIDs adds the "educations" edge to the Education entity by IDs.
func (uu *UserUpdate) AddEducationIDs(ids ...uint) *UserUpdate {
	uu.mutation.AddEducationIDs(ids...)
	return uu
}

// AddEducations adds the "educations" edges to the Education entity.
func (uu *UserUpdate) AddEducations(e ...*Education) *UserUpdate {
	ids := make([]uint, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uu.AddEducationIDs(ids...)
}

// AddExperienceIDs adds the "experiences" edge to the Experience entity by IDs.
func (uu *UserUpdate) AddExperienceIDs(ids ...uint) *UserUpdate {
	uu.mutation.AddExperienceIDs(ids...)
	return uu
}

// AddExperiences adds the "experiences" edges to the Experience entity.
func (uu *UserUpdate) AddExperiences(e ...*Experience) *UserUpdate {
	ids := make([]uint, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uu.AddExperienceIDs(ids...)
}

// AddRepositoryIDs adds the "repositories" edge to the Repository entity by IDs.
func (uu *UserUpdate) AddRepositoryIDs(ids ...uint) *UserUpdate {
	uu.mutation.AddRepositoryIDs(ids...)
	return uu
}

// AddRepositories adds the "repositories" edges to the Repository entity.
func (uu *UserUpdate) AddRepositories(r ...*Repository) *UserUpdate {
	ids := make([]uint, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uu.AddRepositoryIDs(ids...)
}

// AddUserProjectIDs adds the "user_projects" edge to the UserProject entity by IDs.
func (uu *UserUpdate) AddUserProjectIDs(ids ...uint) *UserUpdate {
	uu.mutation.AddUserProjectIDs(ids...)
	return uu
}

// AddUserProjects adds the "user_projects" edges to the UserProject entity.
func (uu *UserUpdate) AddUserProjects(u ...*UserProject) *UserUpdate {
	ids := make([]uint, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddUserProjectIDs(ids...)
}

// AddUserServiceIDs adds the "user_services" edge to the UserService entity by IDs.
func (uu *UserUpdate) AddUserServiceIDs(ids ...uint) *UserUpdate {
	uu.mutation.AddUserServiceIDs(ids...)
	return uu
}

// AddUserServices adds the "user_services" edges to the UserService entity.
func (uu *UserUpdate) AddUserServices(u ...*UserService) *UserUpdate {
	ids := make([]uint, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddUserServiceIDs(ids...)
}

// AddUserSkillAssociationIDs adds the "user_skill_associations" edge to the UserSkillAssociation entity by IDs.
func (uu *UserUpdate) AddUserSkillAssociationIDs(ids ...uint) *UserUpdate {
	uu.mutation.AddUserSkillAssociationIDs(ids...)
	return uu
}

// AddUserSkillAssociations adds the "user_skill_associations" edges to the UserSkillAssociation entity.
func (uu *UserUpdate) AddUserSkillAssociations(u ...*UserSkillAssociation) *UserUpdate {
	ids := make([]uint, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddUserSkillAssociationIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearEducations clears all "educations" edges to the Education entity.
func (uu *UserUpdate) ClearEducations() *UserUpdate {
	uu.mutation.ClearEducations()
	return uu
}

// RemoveEducationIDs removes the "educations" edge to Education entities by IDs.
func (uu *UserUpdate) RemoveEducationIDs(ids ...uint) *UserUpdate {
	uu.mutation.RemoveEducationIDs(ids...)
	return uu
}

// RemoveEducations removes "educations" edges to Education entities.
func (uu *UserUpdate) RemoveEducations(e ...*Education) *UserUpdate {
	ids := make([]uint, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uu.RemoveEducationIDs(ids...)
}

// ClearExperiences clears all "experiences" edges to the Experience entity.
func (uu *UserUpdate) ClearExperiences() *UserUpdate {
	uu.mutation.ClearExperiences()
	return uu
}

// RemoveExperienceIDs removes the "experiences" edge to Experience entities by IDs.
func (uu *UserUpdate) RemoveExperienceIDs(ids ...uint) *UserUpdate {
	uu.mutation.RemoveExperienceIDs(ids...)
	return uu
}

// RemoveExperiences removes "experiences" edges to Experience entities.
func (uu *UserUpdate) RemoveExperiences(e ...*Experience) *UserUpdate {
	ids := make([]uint, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uu.RemoveExperienceIDs(ids...)
}

// ClearRepositories clears all "repositories" edges to the Repository entity.
func (uu *UserUpdate) ClearRepositories() *UserUpdate {
	uu.mutation.ClearRepositories()
	return uu
}

// RemoveRepositoryIDs removes the "repositories" edge to Repository entities by IDs.
func (uu *UserUpdate) RemoveRepositoryIDs(ids ...uint) *UserUpdate {
	uu.mutation.RemoveRepositoryIDs(ids...)
	return uu
}

// RemoveRepositories removes "repositories" edges to Repository entities.
func (uu *UserUpdate) RemoveRepositories(r ...*Repository) *UserUpdate {
	ids := make([]uint, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uu.RemoveRepositoryIDs(ids...)
}

// ClearUserProjects clears all "user_projects" edges to the UserProject entity.
func (uu *UserUpdate) ClearUserProjects() *UserUpdate {
	uu.mutation.ClearUserProjects()
	return uu
}

// RemoveUserProjectIDs removes the "user_projects" edge to UserProject entities by IDs.
func (uu *UserUpdate) RemoveUserProjectIDs(ids ...uint) *UserUpdate {
	uu.mutation.RemoveUserProjectIDs(ids...)
	return uu
}

// RemoveUserProjects removes "user_projects" edges to UserProject entities.
func (uu *UserUpdate) RemoveUserProjects(u ...*UserProject) *UserUpdate {
	ids := make([]uint, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveUserProjectIDs(ids...)
}

// ClearUserServices clears all "user_services" edges to the UserService entity.
func (uu *UserUpdate) ClearUserServices() *UserUpdate {
	uu.mutation.ClearUserServices()
	return uu
}

// RemoveUserServiceIDs removes the "user_services" edge to UserService entities by IDs.
func (uu *UserUpdate) RemoveUserServiceIDs(ids ...uint) *UserUpdate {
	uu.mutation.RemoveUserServiceIDs(ids...)
	return uu
}

// RemoveUserServices removes "user_services" edges to UserService entities.
func (uu *UserUpdate) RemoveUserServices(u ...*UserService) *UserUpdate {
	ids := make([]uint, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveUserServiceIDs(ids...)
}

// ClearUserSkillAssociations clears all "user_skill_associations" edges to the UserSkillAssociation entity.
func (uu *UserUpdate) ClearUserSkillAssociations() *UserUpdate {
	uu.mutation.ClearUserSkillAssociations()
	return uu
}

// RemoveUserSkillAssociationIDs removes the "user_skill_associations" edge to UserSkillAssociation entities by IDs.
func (uu *UserUpdate) RemoveUserSkillAssociationIDs(ids ...uint) *UserUpdate {
	uu.mutation.RemoveUserSkillAssociationIDs(ids...)
	return uu
}

// RemoveUserSkillAssociations removes "user_skill_associations" edges to UserSkillAssociation entities.
func (uu *UserUpdate) RemoveUserSkillAssociations(u ...*UserSkillAssociation) *UserUpdate {
	ids := make([]uint, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveUserSkillAssociationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.FirstName(); ok {
		_spec.SetField(user.FieldFirstName, field.TypeString, value)
	}
	if uu.mutation.FirstNameCleared() {
		_spec.ClearField(user.FieldFirstName, field.TypeString)
	}
	if value, ok := uu.mutation.LastName(); ok {
		_spec.SetField(user.FieldLastName, field.TypeString, value)
	}
	if uu.mutation.LastNameCleared() {
		_spec.ClearField(user.FieldLastName, field.TypeString)
	}
	if value, ok := uu.mutation.Dob(); ok {
		_spec.SetField(user.FieldDob, field.TypeTime, value)
	}
	if uu.mutation.DobCleared() {
		_spec.ClearField(user.FieldDob, field.TypeTime)
	}
	if value, ok := uu.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := uu.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uu.mutation.GithubUsername(); ok {
		_spec.SetField(user.FieldGithubUsername, field.TypeString, value)
	}
	if uu.mutation.GithubUsernameCleared() {
		_spec.ClearField(user.FieldGithubUsername, field.TypeString)
	}
	if value, ok := uu.mutation.Description(); ok {
		_spec.SetField(user.FieldDescription, field.TypeString, value)
	}
	if uu.mutation.DescriptionCleared() {
		_spec.ClearField(user.FieldDescription, field.TypeString)
	}
	if value, ok := uu.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
	}
	if uu.mutation.CreatedAtCleared() {
		_spec.ClearField(user.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if uu.mutation.UpdatedAtCleared() {
		_spec.ClearField(user.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := uu.mutation.MobileNumber(); ok {
		_spec.SetField(user.FieldMobileNumber, field.TypeInt32, value)
	}
	if value, ok := uu.mutation.AddedMobileNumber(); ok {
		_spec.AddField(user.FieldMobileNumber, field.TypeInt32, value)
	}
	if uu.mutation.MobileNumberCleared() {
		_spec.ClearField(user.FieldMobileNumber, field.TypeInt32)
	}
	if value, ok := uu.mutation.AddressBlock(); ok {
		_spec.SetField(user.FieldAddressBlock, field.TypeString, value)
	}
	if uu.mutation.AddressBlockCleared() {
		_spec.ClearField(user.FieldAddressBlock, field.TypeString)
	}
	if value, ok := uu.mutation.AddressStreet(); ok {
		_spec.SetField(user.FieldAddressStreet, field.TypeString, value)
	}
	if uu.mutation.AddressStreetCleared() {
		_spec.ClearField(user.FieldAddressStreet, field.TypeString)
	}
	if value, ok := uu.mutation.RecidentialCountry(); ok {
		_spec.SetField(user.FieldRecidentialCountry, field.TypeString, value)
	}
	if uu.mutation.RecidentialCountryCleared() {
		_spec.ClearField(user.FieldRecidentialCountry, field.TypeString)
	}
	if value, ok := uu.mutation.Nationality(); ok {
		_spec.SetField(user.FieldNationality, field.TypeString, value)
	}
	if uu.mutation.NationalityCleared() {
		_spec.ClearField(user.FieldNationality, field.TypeString)
	}
	if uu.mutation.EducationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.EducationsTable,
			Columns: []string{user.EducationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(education.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedEducationsIDs(); len(nodes) > 0 && !uu.mutation.EducationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.EducationsTable,
			Columns: []string{user.EducationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(education.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.EducationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.EducationsTable,
			Columns: []string{user.EducationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(education.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.ExperiencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ExperiencesTable,
			Columns: []string{user.ExperiencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(experience.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedExperiencesIDs(); len(nodes) > 0 && !uu.mutation.ExperiencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ExperiencesTable,
			Columns: []string{user.ExperiencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(experience.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ExperiencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ExperiencesTable,
			Columns: []string{user.ExperiencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(experience.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.RepositoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RepositoriesTable,
			Columns: []string{user.RepositoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedRepositoriesIDs(); len(nodes) > 0 && !uu.mutation.RepositoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RepositoriesTable,
			Columns: []string{user.RepositoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RepositoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RepositoriesTable,
			Columns: []string{user.RepositoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.UserProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserProjectsTable,
			Columns: []string{user.UserProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userproject.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedUserProjectsIDs(); len(nodes) > 0 && !uu.mutation.UserProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserProjectsTable,
			Columns: []string{user.UserProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userproject.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UserProjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserProjectsTable,
			Columns: []string{user.UserProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userproject.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.UserServicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserServicesTable,
			Columns: []string{user.UserServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userservice.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedUserServicesIDs(); len(nodes) > 0 && !uu.mutation.UserServicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserServicesTable,
			Columns: []string{user.UserServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userservice.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UserServicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserServicesTable,
			Columns: []string{user.UserServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userservice.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.UserSkillAssociationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserSkillAssociationsTable,
			Columns: []string{user.UserSkillAssociationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userskillassociation.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedUserSkillAssociationsIDs(); len(nodes) > 0 && !uu.mutation.UserSkillAssociationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserSkillAssociationsTable,
			Columns: []string{user.UserSkillAssociationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userskillassociation.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UserSkillAssociationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserSkillAssociationsTable,
			Columns: []string{user.UserSkillAssociationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userskillassociation.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetFirstName sets the "first_name" field.
func (uuo *UserUpdateOne) SetFirstName(s string) *UserUpdateOne {
	uuo.mutation.SetFirstName(s)
	return uuo
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableFirstName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetFirstName(*s)
	}
	return uuo
}

// ClearFirstName clears the value of the "first_name" field.
func (uuo *UserUpdateOne) ClearFirstName() *UserUpdateOne {
	uuo.mutation.ClearFirstName()
	return uuo
}

// SetLastName sets the "last_name" field.
func (uuo *UserUpdateOne) SetLastName(s string) *UserUpdateOne {
	uuo.mutation.SetLastName(s)
	return uuo
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLastName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetLastName(*s)
	}
	return uuo
}

// ClearLastName clears the value of the "last_name" field.
func (uuo *UserUpdateOne) ClearLastName() *UserUpdateOne {
	uuo.mutation.ClearLastName()
	return uuo
}

// SetDob sets the "dob" field.
func (uuo *UserUpdateOne) SetDob(t time.Time) *UserUpdateOne {
	uuo.mutation.SetDob(t)
	return uuo
}

// SetNillableDob sets the "dob" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDob(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetDob(*t)
	}
	return uuo
}

// ClearDob clears the value of the "dob" field.
func (uuo *UserUpdateOne) ClearDob() *UserUpdateOne {
	uuo.mutation.ClearDob()
	return uuo
}

// SetUsername sets the "username" field.
func (uuo *UserUpdateOne) SetUsername(s string) *UserUpdateOne {
	uuo.mutation.SetUsername(s)
	return uuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUsername(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetUsername(*s)
	}
	return uuo
}

// SetPassword sets the "password" field.
func (uuo *UserUpdateOne) SetPassword(s string) *UserUpdateOne {
	uuo.mutation.SetPassword(s)
	return uuo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePassword(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPassword(*s)
	}
	return uuo
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmail(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetEmail(*s)
	}
	return uuo
}

// SetGithubUsername sets the "github_username" field.
func (uuo *UserUpdateOne) SetGithubUsername(s string) *UserUpdateOne {
	uuo.mutation.SetGithubUsername(s)
	return uuo
}

// SetNillableGithubUsername sets the "github_username" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableGithubUsername(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetGithubUsername(*s)
	}
	return uuo
}

// ClearGithubUsername clears the value of the "github_username" field.
func (uuo *UserUpdateOne) ClearGithubUsername() *UserUpdateOne {
	uuo.mutation.ClearGithubUsername()
	return uuo
}

// SetDescription sets the "description" field.
func (uuo *UserUpdateOne) SetDescription(s string) *UserUpdateOne {
	uuo.mutation.SetDescription(s)
	return uuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDescription(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetDescription(*s)
	}
	return uuo
}

// ClearDescription clears the value of the "description" field.
func (uuo *UserUpdateOne) ClearDescription() *UserUpdateOne {
	uuo.mutation.ClearDescription()
	return uuo
}

// SetCreatedAt sets the "created_at" field.
func (uuo *UserUpdateOne) SetCreatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetCreatedAt(t)
	return uuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCreatedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetCreatedAt(*t)
	}
	return uuo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (uuo *UserUpdateOne) ClearCreatedAt() *UserUpdateOne {
	uuo.mutation.ClearCreatedAt()
	return uuo
}

// SetUpdatedAt sets the "updated_at" field.
func (uuo *UserUpdateOne) SetUpdatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdatedAt(t)
	return uuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUpdatedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetUpdatedAt(*t)
	}
	return uuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (uuo *UserUpdateOne) ClearUpdatedAt() *UserUpdateOne {
	uuo.mutation.ClearUpdatedAt()
	return uuo
}

// SetMobileNumber sets the "mobile_number" field.
func (uuo *UserUpdateOne) SetMobileNumber(i int32) *UserUpdateOne {
	uuo.mutation.ResetMobileNumber()
	uuo.mutation.SetMobileNumber(i)
	return uuo
}

// SetNillableMobileNumber sets the "mobile_number" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableMobileNumber(i *int32) *UserUpdateOne {
	if i != nil {
		uuo.SetMobileNumber(*i)
	}
	return uuo
}

// AddMobileNumber adds i to the "mobile_number" field.
func (uuo *UserUpdateOne) AddMobileNumber(i int32) *UserUpdateOne {
	uuo.mutation.AddMobileNumber(i)
	return uuo
}

// ClearMobileNumber clears the value of the "mobile_number" field.
func (uuo *UserUpdateOne) ClearMobileNumber() *UserUpdateOne {
	uuo.mutation.ClearMobileNumber()
	return uuo
}

// SetAddressBlock sets the "address_block" field.
func (uuo *UserUpdateOne) SetAddressBlock(s string) *UserUpdateOne {
	uuo.mutation.SetAddressBlock(s)
	return uuo
}

// SetNillableAddressBlock sets the "address_block" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAddressBlock(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetAddressBlock(*s)
	}
	return uuo
}

// ClearAddressBlock clears the value of the "address_block" field.
func (uuo *UserUpdateOne) ClearAddressBlock() *UserUpdateOne {
	uuo.mutation.ClearAddressBlock()
	return uuo
}

// SetAddressStreet sets the "address_street" field.
func (uuo *UserUpdateOne) SetAddressStreet(s string) *UserUpdateOne {
	uuo.mutation.SetAddressStreet(s)
	return uuo
}

// SetNillableAddressStreet sets the "address_street" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAddressStreet(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetAddressStreet(*s)
	}
	return uuo
}

// ClearAddressStreet clears the value of the "address_street" field.
func (uuo *UserUpdateOne) ClearAddressStreet() *UserUpdateOne {
	uuo.mutation.ClearAddressStreet()
	return uuo
}

// SetRecidentialCountry sets the "recidential_country" field.
func (uuo *UserUpdateOne) SetRecidentialCountry(s string) *UserUpdateOne {
	uuo.mutation.SetRecidentialCountry(s)
	return uuo
}

// SetNillableRecidentialCountry sets the "recidential_country" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableRecidentialCountry(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetRecidentialCountry(*s)
	}
	return uuo
}

// ClearRecidentialCountry clears the value of the "recidential_country" field.
func (uuo *UserUpdateOne) ClearRecidentialCountry() *UserUpdateOne {
	uuo.mutation.ClearRecidentialCountry()
	return uuo
}

// SetNationality sets the "nationality" field.
func (uuo *UserUpdateOne) SetNationality(s string) *UserUpdateOne {
	uuo.mutation.SetNationality(s)
	return uuo
}

// SetNillableNationality sets the "nationality" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableNationality(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetNationality(*s)
	}
	return uuo
}

// ClearNationality clears the value of the "nationality" field.
func (uuo *UserUpdateOne) ClearNationality() *UserUpdateOne {
	uuo.mutation.ClearNationality()
	return uuo
}

// AddEducationIDs adds the "educations" edge to the Education entity by IDs.
func (uuo *UserUpdateOne) AddEducationIDs(ids ...uint) *UserUpdateOne {
	uuo.mutation.AddEducationIDs(ids...)
	return uuo
}

// AddEducations adds the "educations" edges to the Education entity.
func (uuo *UserUpdateOne) AddEducations(e ...*Education) *UserUpdateOne {
	ids := make([]uint, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uuo.AddEducationIDs(ids...)
}

// AddExperienceIDs adds the "experiences" edge to the Experience entity by IDs.
func (uuo *UserUpdateOne) AddExperienceIDs(ids ...uint) *UserUpdateOne {
	uuo.mutation.AddExperienceIDs(ids...)
	return uuo
}

// AddExperiences adds the "experiences" edges to the Experience entity.
func (uuo *UserUpdateOne) AddExperiences(e ...*Experience) *UserUpdateOne {
	ids := make([]uint, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uuo.AddExperienceIDs(ids...)
}

// AddRepositoryIDs adds the "repositories" edge to the Repository entity by IDs.
func (uuo *UserUpdateOne) AddRepositoryIDs(ids ...uint) *UserUpdateOne {
	uuo.mutation.AddRepositoryIDs(ids...)
	return uuo
}

// AddRepositories adds the "repositories" edges to the Repository entity.
func (uuo *UserUpdateOne) AddRepositories(r ...*Repository) *UserUpdateOne {
	ids := make([]uint, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uuo.AddRepositoryIDs(ids...)
}

// AddUserProjectIDs adds the "user_projects" edge to the UserProject entity by IDs.
func (uuo *UserUpdateOne) AddUserProjectIDs(ids ...uint) *UserUpdateOne {
	uuo.mutation.AddUserProjectIDs(ids...)
	return uuo
}

// AddUserProjects adds the "user_projects" edges to the UserProject entity.
func (uuo *UserUpdateOne) AddUserProjects(u ...*UserProject) *UserUpdateOne {
	ids := make([]uint, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddUserProjectIDs(ids...)
}

// AddUserServiceIDs adds the "user_services" edge to the UserService entity by IDs.
func (uuo *UserUpdateOne) AddUserServiceIDs(ids ...uint) *UserUpdateOne {
	uuo.mutation.AddUserServiceIDs(ids...)
	return uuo
}

// AddUserServices adds the "user_services" edges to the UserService entity.
func (uuo *UserUpdateOne) AddUserServices(u ...*UserService) *UserUpdateOne {
	ids := make([]uint, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddUserServiceIDs(ids...)
}

// AddUserSkillAssociationIDs adds the "user_skill_associations" edge to the UserSkillAssociation entity by IDs.
func (uuo *UserUpdateOne) AddUserSkillAssociationIDs(ids ...uint) *UserUpdateOne {
	uuo.mutation.AddUserSkillAssociationIDs(ids...)
	return uuo
}

// AddUserSkillAssociations adds the "user_skill_associations" edges to the UserSkillAssociation entity.
func (uuo *UserUpdateOne) AddUserSkillAssociations(u ...*UserSkillAssociation) *UserUpdateOne {
	ids := make([]uint, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddUserSkillAssociationIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearEducations clears all "educations" edges to the Education entity.
func (uuo *UserUpdateOne) ClearEducations() *UserUpdateOne {
	uuo.mutation.ClearEducations()
	return uuo
}

// RemoveEducationIDs removes the "educations" edge to Education entities by IDs.
func (uuo *UserUpdateOne) RemoveEducationIDs(ids ...uint) *UserUpdateOne {
	uuo.mutation.RemoveEducationIDs(ids...)
	return uuo
}

// RemoveEducations removes "educations" edges to Education entities.
func (uuo *UserUpdateOne) RemoveEducations(e ...*Education) *UserUpdateOne {
	ids := make([]uint, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uuo.RemoveEducationIDs(ids...)
}

// ClearExperiences clears all "experiences" edges to the Experience entity.
func (uuo *UserUpdateOne) ClearExperiences() *UserUpdateOne {
	uuo.mutation.ClearExperiences()
	return uuo
}

// RemoveExperienceIDs removes the "experiences" edge to Experience entities by IDs.
func (uuo *UserUpdateOne) RemoveExperienceIDs(ids ...uint) *UserUpdateOne {
	uuo.mutation.RemoveExperienceIDs(ids...)
	return uuo
}

// RemoveExperiences removes "experiences" edges to Experience entities.
func (uuo *UserUpdateOne) RemoveExperiences(e ...*Experience) *UserUpdateOne {
	ids := make([]uint, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uuo.RemoveExperienceIDs(ids...)
}

// ClearRepositories clears all "repositories" edges to the Repository entity.
func (uuo *UserUpdateOne) ClearRepositories() *UserUpdateOne {
	uuo.mutation.ClearRepositories()
	return uuo
}

// RemoveRepositoryIDs removes the "repositories" edge to Repository entities by IDs.
func (uuo *UserUpdateOne) RemoveRepositoryIDs(ids ...uint) *UserUpdateOne {
	uuo.mutation.RemoveRepositoryIDs(ids...)
	return uuo
}

// RemoveRepositories removes "repositories" edges to Repository entities.
func (uuo *UserUpdateOne) RemoveRepositories(r ...*Repository) *UserUpdateOne {
	ids := make([]uint, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uuo.RemoveRepositoryIDs(ids...)
}

// ClearUserProjects clears all "user_projects" edges to the UserProject entity.
func (uuo *UserUpdateOne) ClearUserProjects() *UserUpdateOne {
	uuo.mutation.ClearUserProjects()
	return uuo
}

// RemoveUserProjectIDs removes the "user_projects" edge to UserProject entities by IDs.
func (uuo *UserUpdateOne) RemoveUserProjectIDs(ids ...uint) *UserUpdateOne {
	uuo.mutation.RemoveUserProjectIDs(ids...)
	return uuo
}

// RemoveUserProjects removes "user_projects" edges to UserProject entities.
func (uuo *UserUpdateOne) RemoveUserProjects(u ...*UserProject) *UserUpdateOne {
	ids := make([]uint, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveUserProjectIDs(ids...)
}

// ClearUserServices clears all "user_services" edges to the UserService entity.
func (uuo *UserUpdateOne) ClearUserServices() *UserUpdateOne {
	uuo.mutation.ClearUserServices()
	return uuo
}

// RemoveUserServiceIDs removes the "user_services" edge to UserService entities by IDs.
func (uuo *UserUpdateOne) RemoveUserServiceIDs(ids ...uint) *UserUpdateOne {
	uuo.mutation.RemoveUserServiceIDs(ids...)
	return uuo
}

// RemoveUserServices removes "user_services" edges to UserService entities.
func (uuo *UserUpdateOne) RemoveUserServices(u ...*UserService) *UserUpdateOne {
	ids := make([]uint, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveUserServiceIDs(ids...)
}

// ClearUserSkillAssociations clears all "user_skill_associations" edges to the UserSkillAssociation entity.
func (uuo *UserUpdateOne) ClearUserSkillAssociations() *UserUpdateOne {
	uuo.mutation.ClearUserSkillAssociations()
	return uuo
}

// RemoveUserSkillAssociationIDs removes the "user_skill_associations" edge to UserSkillAssociation entities by IDs.
func (uuo *UserUpdateOne) RemoveUserSkillAssociationIDs(ids ...uint) *UserUpdateOne {
	uuo.mutation.RemoveUserSkillAssociationIDs(ids...)
	return uuo
}

// RemoveUserSkillAssociations removes "user_skill_associations" edges to UserSkillAssociation entities.
func (uuo *UserUpdateOne) RemoveUserSkillAssociations(u ...*UserSkillAssociation) *UserUpdateOne {
	ids := make([]uint, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveUserSkillAssociationIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.FirstName(); ok {
		_spec.SetField(user.FieldFirstName, field.TypeString, value)
	}
	if uuo.mutation.FirstNameCleared() {
		_spec.ClearField(user.FieldFirstName, field.TypeString)
	}
	if value, ok := uuo.mutation.LastName(); ok {
		_spec.SetField(user.FieldLastName, field.TypeString, value)
	}
	if uuo.mutation.LastNameCleared() {
		_spec.ClearField(user.FieldLastName, field.TypeString)
	}
	if value, ok := uuo.mutation.Dob(); ok {
		_spec.SetField(user.FieldDob, field.TypeTime, value)
	}
	if uuo.mutation.DobCleared() {
		_spec.ClearField(user.FieldDob, field.TypeTime)
	}
	if value, ok := uuo.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uuo.mutation.GithubUsername(); ok {
		_spec.SetField(user.FieldGithubUsername, field.TypeString, value)
	}
	if uuo.mutation.GithubUsernameCleared() {
		_spec.ClearField(user.FieldGithubUsername, field.TypeString)
	}
	if value, ok := uuo.mutation.Description(); ok {
		_spec.SetField(user.FieldDescription, field.TypeString, value)
	}
	if uuo.mutation.DescriptionCleared() {
		_spec.ClearField(user.FieldDescription, field.TypeString)
	}
	if value, ok := uuo.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
	}
	if uuo.mutation.CreatedAtCleared() {
		_spec.ClearField(user.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if uuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(user.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := uuo.mutation.MobileNumber(); ok {
		_spec.SetField(user.FieldMobileNumber, field.TypeInt32, value)
	}
	if value, ok := uuo.mutation.AddedMobileNumber(); ok {
		_spec.AddField(user.FieldMobileNumber, field.TypeInt32, value)
	}
	if uuo.mutation.MobileNumberCleared() {
		_spec.ClearField(user.FieldMobileNumber, field.TypeInt32)
	}
	if value, ok := uuo.mutation.AddressBlock(); ok {
		_spec.SetField(user.FieldAddressBlock, field.TypeString, value)
	}
	if uuo.mutation.AddressBlockCleared() {
		_spec.ClearField(user.FieldAddressBlock, field.TypeString)
	}
	if value, ok := uuo.mutation.AddressStreet(); ok {
		_spec.SetField(user.FieldAddressStreet, field.TypeString, value)
	}
	if uuo.mutation.AddressStreetCleared() {
		_spec.ClearField(user.FieldAddressStreet, field.TypeString)
	}
	if value, ok := uuo.mutation.RecidentialCountry(); ok {
		_spec.SetField(user.FieldRecidentialCountry, field.TypeString, value)
	}
	if uuo.mutation.RecidentialCountryCleared() {
		_spec.ClearField(user.FieldRecidentialCountry, field.TypeString)
	}
	if value, ok := uuo.mutation.Nationality(); ok {
		_spec.SetField(user.FieldNationality, field.TypeString, value)
	}
	if uuo.mutation.NationalityCleared() {
		_spec.ClearField(user.FieldNationality, field.TypeString)
	}
	if uuo.mutation.EducationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.EducationsTable,
			Columns: []string{user.EducationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(education.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedEducationsIDs(); len(nodes) > 0 && !uuo.mutation.EducationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.EducationsTable,
			Columns: []string{user.EducationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(education.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.EducationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.EducationsTable,
			Columns: []string{user.EducationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(education.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.ExperiencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ExperiencesTable,
			Columns: []string{user.ExperiencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(experience.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedExperiencesIDs(); len(nodes) > 0 && !uuo.mutation.ExperiencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ExperiencesTable,
			Columns: []string{user.ExperiencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(experience.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ExperiencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ExperiencesTable,
			Columns: []string{user.ExperiencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(experience.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.RepositoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RepositoriesTable,
			Columns: []string{user.RepositoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedRepositoriesIDs(); len(nodes) > 0 && !uuo.mutation.RepositoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RepositoriesTable,
			Columns: []string{user.RepositoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RepositoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RepositoriesTable,
			Columns: []string{user.RepositoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.UserProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserProjectsTable,
			Columns: []string{user.UserProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userproject.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedUserProjectsIDs(); len(nodes) > 0 && !uuo.mutation.UserProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserProjectsTable,
			Columns: []string{user.UserProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userproject.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UserProjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserProjectsTable,
			Columns: []string{user.UserProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userproject.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.UserServicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserServicesTable,
			Columns: []string{user.UserServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userservice.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedUserServicesIDs(); len(nodes) > 0 && !uuo.mutation.UserServicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserServicesTable,
			Columns: []string{user.UserServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userservice.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UserServicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserServicesTable,
			Columns: []string{user.UserServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userservice.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.UserSkillAssociationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserSkillAssociationsTable,
			Columns: []string{user.UserSkillAssociationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userskillassociation.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedUserSkillAssociationsIDs(); len(nodes) > 0 && !uuo.mutation.UserSkillAssociationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserSkillAssociationsTable,
			Columns: []string{user.UserSkillAssociationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userskillassociation.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UserSkillAssociationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserSkillAssociationsTable,
			Columns: []string{user.UserSkillAssociationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userskillassociation.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"theedashboard/ent/repository"
	"theedashboard/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RepositoryCreate is the builder for creating a Repository entity.
type RepositoryCreate struct {
	config
	mutation *RepositoryMutation
	hooks    []Hook
}

// SetRepoName sets the "repo_name" field.
func (rc *RepositoryCreate) SetRepoName(s string) *RepositoryCreate {
	rc.mutation.SetRepoName(s)
	return rc
}

// SetRepoDescription sets the "repo_description" field.
func (rc *RepositoryCreate) SetRepoDescription(s string) *RepositoryCreate {
	rc.mutation.SetRepoDescription(s)
	return rc
}

// SetNillableRepoDescription sets the "repo_description" field if the given value is not nil.
func (rc *RepositoryCreate) SetNillableRepoDescription(s *string) *RepositoryCreate {
	if s != nil {
		rc.SetRepoDescription(*s)
	}
	return rc
}

// SetRepoURL sets the "repo_url" field.
func (rc *RepositoryCreate) SetRepoURL(s string) *RepositoryCreate {
	rc.mutation.SetRepoURL(s)
	return rc
}

// SetRepoLanguage sets the "repo_language" field.
func (rc *RepositoryCreate) SetRepoLanguage(s string) *RepositoryCreate {
	rc.mutation.SetRepoLanguage(s)
	return rc
}

// SetNillableRepoLanguage sets the "repo_language" field if the given value is not nil.
func (rc *RepositoryCreate) SetNillableRepoLanguage(s *string) *RepositoryCreate {
	if s != nil {
		rc.SetRepoLanguage(*s)
	}
	return rc
}

// SetRepoCreatedAt sets the "repo_created_at" field.
func (rc *RepositoryCreate) SetRepoCreatedAt(t time.Time) *RepositoryCreate {
	rc.mutation.SetRepoCreatedAt(t)
	return rc
}

// SetRepoUpdatedAt sets the "repo_updated_at" field.
func (rc *RepositoryCreate) SetRepoUpdatedAt(t time.Time) *RepositoryCreate {
	rc.mutation.SetRepoUpdatedAt(t)
	return rc
}

// SetUserID sets the "user_id" field.
func (rc *RepositoryCreate) SetUserID(u uint) *RepositoryCreate {
	rc.mutation.SetUserID(u)
	return rc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (rc *RepositoryCreate) SetNillableUserID(u *uint) *RepositoryCreate {
	if u != nil {
		rc.SetUserID(*u)
	}
	return rc
}

// SetCreatedAt sets the "created_at" field.
func (rc *RepositoryCreate) SetCreatedAt(t time.Time) *RepositoryCreate {
	rc.mutation.SetCreatedAt(t)
	return rc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rc *RepositoryCreate) SetNillableCreatedAt(t *time.Time) *RepositoryCreate {
	if t != nil {
		rc.SetCreatedAt(*t)
	}
	return rc
}

// SetUpdatedAt sets the "updated_at" field.
func (rc *RepositoryCreate) SetUpdatedAt(t time.Time) *RepositoryCreate {
	rc.mutation.SetUpdatedAt(t)
	return rc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rc *RepositoryCreate) SetNillableUpdatedAt(t *time.Time) *RepositoryCreate {
	if t != nil {
		rc.SetUpdatedAt(*t)
	}
	return rc
}

// SetShowOnProfile sets the "show_on_profile" field.
func (rc *RepositoryCreate) SetShowOnProfile(b bool) *RepositoryCreate {
	rc.mutation.SetShowOnProfile(b)
	return rc
}

// SetOrder sets the "order" field.
func (rc *RepositoryCreate) SetOrder(i int32) *RepositoryCreate {
	rc.mutation.SetOrder(i)
	return rc
}

// SetID sets the "id" field.
func (rc *RepositoryCreate) SetID(u uint) *RepositoryCreate {
	rc.mutation.SetID(u)
	return rc
}

// SetUser sets the "user" edge to the User entity.
func (rc *RepositoryCreate) SetUser(u *User) *RepositoryCreate {
	return rc.SetUserID(u.ID)
}

// Mutation returns the RepositoryMutation object of the builder.
func (rc *RepositoryCreate) Mutation() *RepositoryMutation {
	return rc.mutation
}

// Save creates the Repository in the database.
func (rc *RepositoryCreate) Save(ctx context.Context) (*Repository, error) {
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RepositoryCreate) SaveX(ctx context.Context) *Repository {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RepositoryCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RepositoryCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RepositoryCreate) check() error {
	if _, ok := rc.mutation.RepoName(); !ok {
		return &ValidationError{Name: "repo_name", err: errors.New(`ent: missing required field "Repository.repo_name"`)}
	}
	if _, ok := rc.mutation.RepoURL(); !ok {
		return &ValidationError{Name: "repo_url", err: errors.New(`ent: missing required field "Repository.repo_url"`)}
	}
	if _, ok := rc.mutation.RepoCreatedAt(); !ok {
		return &ValidationError{Name: "repo_created_at", err: errors.New(`ent: missing required field "Repository.repo_created_at"`)}
	}
	if _, ok := rc.mutation.RepoUpdatedAt(); !ok {
		return &ValidationError{Name: "repo_updated_at", err: errors.New(`ent: missing required field "Repository.repo_updated_at"`)}
	}
	if _, ok := rc.mutation.ShowOnProfile(); !ok {
		return &ValidationError{Name: "show_on_profile", err: errors.New(`ent: missing required field "Repository.show_on_profile"`)}
	}
	if _, ok := rc.mutation.Order(); !ok {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required field "Repository.order"`)}
	}
	return nil
}

func (rc *RepositoryCreate) sqlSave(ctx context.Context) (*Repository, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint(id)
	}
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *RepositoryCreate) createSpec() (*Repository, *sqlgraph.CreateSpec) {
	var (
		_node = &Repository{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(repository.Table, sqlgraph.NewFieldSpec(repository.FieldID, field.TypeUint))
	)
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rc.mutation.RepoName(); ok {
		_spec.SetField(repository.FieldRepoName, field.TypeString, value)
		_node.RepoName = value
	}
	if value, ok := rc.mutation.RepoDescription(); ok {
		_spec.SetField(repository.FieldRepoDescription, field.TypeString, value)
		_node.RepoDescription = value
	}
	if value, ok := rc.mutation.RepoURL(); ok {
		_spec.SetField(repository.FieldRepoURL, field.TypeString, value)
		_node.RepoURL = value
	}
	if value, ok := rc.mutation.RepoLanguage(); ok {
		_spec.SetField(repository.FieldRepoLanguage, field.TypeString, value)
		_node.RepoLanguage = value
	}
	if value, ok := rc.mutation.RepoCreatedAt(); ok {
		_spec.SetField(repository.FieldRepoCreatedAt, field.TypeTime, value)
		_node.RepoCreatedAt = value
	}
	if value, ok := rc.mutation.RepoUpdatedAt(); ok {
		_spec.SetField(repository.FieldRepoUpdatedAt, field.TypeTime, value)
		_node.RepoUpdatedAt = value
	}
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.SetField(repository.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rc.mutation.UpdatedAt(); ok {
		_spec.SetField(repository.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := rc.mutation.ShowOnProfile(); ok {
		_spec.SetField(repository.FieldShowOnProfile, field.TypeBool, value)
		_node.ShowOnProfile = value
	}
	if value, ok := rc.mutation.Order(); ok {
		_spec.SetField(repository.FieldOrder, field.TypeInt32, value)
		_node.Order = value
	}
	if nodes := rc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   repository.UserTable,
			Columns: []string{repository.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RepositoryCreateBulk is the builder for creating many Repository entities in bulk.
type RepositoryCreateBulk struct {
	config
	err      error
	builders []*RepositoryCreate
}

// Save creates the Repository entities in the database.
func (rcb *RepositoryCreateBulk) Save(ctx context.Context) ([]*Repository, error) {
	if rcb.err != nil {
		return nil, rcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Repository, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RepositoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RepositoryCreateBulk) SaveX(ctx context.Context) []*Repository {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RepositoryCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RepositoryCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"theedashboard/ent/alembicversion"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AlembicVersionCreate is the builder for creating a AlembicVersion entity.
type AlembicVersionCreate struct {
	config
	mutation *AlembicVersionMutation
	hooks    []Hook
}

// SetID sets the "id" field.
func (avc *AlembicVersionCreate) SetID(s string) *AlembicVersionCreate {
	avc.mutation.SetID(s)
	return avc
}

// Mutation returns the AlembicVersionMutation object of the builder.
func (avc *AlembicVersionCreate) Mutation() *AlembicVersionMutation {
	return avc.mutation
}

// Save creates the AlembicVersion in the database.
func (avc *AlembicVersionCreate) Save(ctx context.Context) (*AlembicVersion, error) {
	return withHooks(ctx, avc.sqlSave, avc.mutation, avc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (avc *AlembicVersionCreate) SaveX(ctx context.Context) *AlembicVersion {
	v, err := avc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (avc *AlembicVersionCreate) Exec(ctx context.Context) error {
	_, err := avc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (avc *AlembicVersionCreate) ExecX(ctx context.Context) {
	if err := avc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (avc *AlembicVersionCreate) check() error {
	return nil
}

func (avc *AlembicVersionCreate) sqlSave(ctx context.Context) (*AlembicVersion, error) {
	if err := avc.check(); err != nil {
		return nil, err
	}
	_node, _spec := avc.createSpec()
	if err := sqlgraph.CreateNode(ctx, avc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected AlembicVersion.ID type: %T", _spec.ID.Value)
		}
	}
	avc.mutation.id = &_node.ID
	avc.mutation.done = true
	return _node, nil
}

func (avc *AlembicVersionCreate) createSpec() (*AlembicVersion, *sqlgraph.CreateSpec) {
	var (
		_node = &AlembicVersion{config: avc.config}
		_spec = sqlgraph.NewCreateSpec(alembicversion.Table, sqlgraph.NewFieldSpec(alembicversion.FieldID, field.TypeString))
	)
	if id, ok := avc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	return _node, _spec
}

// AlembicVersionCreateBulk is the builder for creating many AlembicVersion entities in bulk.
type AlembicVersionCreateBulk struct {
	config
	err      error
	builders []*AlembicVersionCreate
}

// Save creates the AlembicVersion entities in the database.
func (avcb *AlembicVersionCreateBulk) Save(ctx context.Context) ([]*AlembicVersion, error) {
	if avcb.err != nil {
		return nil, avcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(avcb.builders))
	nodes := make([]*AlembicVersion, len(avcb.builders))
	mutators := make([]Mutator, len(avcb.builders))
	for i := range avcb.builders {
		func(i int, root context.Context) {
			builder := avcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AlembicVersionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, avcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, avcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, avcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (avcb *AlembicVersionCreateBulk) SaveX(ctx context.Context) []*AlembicVersion {
	v, err := avcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (avcb *AlembicVersionCreateBulk) Exec(ctx context.Context) error {
	_, err := avcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (avcb *AlembicVersionCreateBulk) ExecX(ctx context.Context) {
	if err := avcb.Exec(ctx); err != nil {
		panic(err)
	}
}

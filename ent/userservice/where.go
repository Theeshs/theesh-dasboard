// Code generated by ent, DO NOT EDIT.

package userservice

import (
	"theedashboard/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint) predicate.UserService {
	return predicate.UserService(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint) predicate.UserService {
	return predicate.UserService(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint) predicate.UserService {
	return predicate.UserService(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint) predicate.UserService {
	return predicate.UserService(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint) predicate.UserService {
	return predicate.UserService(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint) predicate.UserService {
	return predicate.UserService(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint) predicate.UserService {
	return predicate.UserService(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint) predicate.UserService {
	return predicate.UserService(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint) predicate.UserService {
	return predicate.UserService(sql.FieldLTE(FieldID, id))
}

// ServiceName applies equality check predicate on the "service_name" field. It's identical to ServiceNameEQ.
func ServiceName(v string) predicate.UserService {
	return predicate.UserService(sql.FieldEQ(FieldServiceName, v))
}

// ServiceDescription applies equality check predicate on the "service_description" field. It's identical to ServiceDescriptionEQ.
func ServiceDescription(v string) predicate.UserService {
	return predicate.UserService(sql.FieldEQ(FieldServiceDescription, v))
}

// ServiceIcon applies equality check predicate on the "service_icon" field. It's identical to ServiceIconEQ.
func ServiceIcon(v string) predicate.UserService {
	return predicate.UserService(sql.FieldEQ(FieldServiceIcon, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.UserService {
	return predicate.UserService(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.UserService {
	return predicate.UserService(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uint) predicate.UserService {
	return predicate.UserService(sql.FieldEQ(FieldUserID, v))
}

// ServiceNameEQ applies the EQ predicate on the "service_name" field.
func ServiceNameEQ(v string) predicate.UserService {
	return predicate.UserService(sql.FieldEQ(FieldServiceName, v))
}

// ServiceNameNEQ applies the NEQ predicate on the "service_name" field.
func ServiceNameNEQ(v string) predicate.UserService {
	return predicate.UserService(sql.FieldNEQ(FieldServiceName, v))
}

// ServiceNameIn applies the In predicate on the "service_name" field.
func ServiceNameIn(vs ...string) predicate.UserService {
	return predicate.UserService(sql.FieldIn(FieldServiceName, vs...))
}

// ServiceNameNotIn applies the NotIn predicate on the "service_name" field.
func ServiceNameNotIn(vs ...string) predicate.UserService {
	return predicate.UserService(sql.FieldNotIn(FieldServiceName, vs...))
}

// ServiceNameGT applies the GT predicate on the "service_name" field.
func ServiceNameGT(v string) predicate.UserService {
	return predicate.UserService(sql.FieldGT(FieldServiceName, v))
}

// ServiceNameGTE applies the GTE predicate on the "service_name" field.
func ServiceNameGTE(v string) predicate.UserService {
	return predicate.UserService(sql.FieldGTE(FieldServiceName, v))
}

// ServiceNameLT applies the LT predicate on the "service_name" field.
func ServiceNameLT(v string) predicate.UserService {
	return predicate.UserService(sql.FieldLT(FieldServiceName, v))
}

// ServiceNameLTE applies the LTE predicate on the "service_name" field.
func ServiceNameLTE(v string) predicate.UserService {
	return predicate.UserService(sql.FieldLTE(FieldServiceName, v))
}

// ServiceNameContains applies the Contains predicate on the "service_name" field.
func ServiceNameContains(v string) predicate.UserService {
	return predicate.UserService(sql.FieldContains(FieldServiceName, v))
}

// ServiceNameHasPrefix applies the HasPrefix predicate on the "service_name" field.
func ServiceNameHasPrefix(v string) predicate.UserService {
	return predicate.UserService(sql.FieldHasPrefix(FieldServiceName, v))
}

// ServiceNameHasSuffix applies the HasSuffix predicate on the "service_name" field.
func ServiceNameHasSuffix(v string) predicate.UserService {
	return predicate.UserService(sql.FieldHasSuffix(FieldServiceName, v))
}

// ServiceNameIsNil applies the IsNil predicate on the "service_name" field.
func ServiceNameIsNil() predicate.UserService {
	return predicate.UserService(sql.FieldIsNull(FieldServiceName))
}

// ServiceNameNotNil applies the NotNil predicate on the "service_name" field.
func ServiceNameNotNil() predicate.UserService {
	return predicate.UserService(sql.FieldNotNull(FieldServiceName))
}

// ServiceNameEqualFold applies the EqualFold predicate on the "service_name" field.
func ServiceNameEqualFold(v string) predicate.UserService {
	return predicate.UserService(sql.FieldEqualFold(FieldServiceName, v))
}

// ServiceNameContainsFold applies the ContainsFold predicate on the "service_name" field.
func ServiceNameContainsFold(v string) predicate.UserService {
	return predicate.UserService(sql.FieldContainsFold(FieldServiceName, v))
}

// ServiceDescriptionEQ applies the EQ predicate on the "service_description" field.
func ServiceDescriptionEQ(v string) predicate.UserService {
	return predicate.UserService(sql.FieldEQ(FieldServiceDescription, v))
}

// ServiceDescriptionNEQ applies the NEQ predicate on the "service_description" field.
func ServiceDescriptionNEQ(v string) predicate.UserService {
	return predicate.UserService(sql.FieldNEQ(FieldServiceDescription, v))
}

// ServiceDescriptionIn applies the In predicate on the "service_description" field.
func ServiceDescriptionIn(vs ...string) predicate.UserService {
	return predicate.UserService(sql.FieldIn(FieldServiceDescription, vs...))
}

// ServiceDescriptionNotIn applies the NotIn predicate on the "service_description" field.
func ServiceDescriptionNotIn(vs ...string) predicate.UserService {
	return predicate.UserService(sql.FieldNotIn(FieldServiceDescription, vs...))
}

// ServiceDescriptionGT applies the GT predicate on the "service_description" field.
func ServiceDescriptionGT(v string) predicate.UserService {
	return predicate.UserService(sql.FieldGT(FieldServiceDescription, v))
}

// ServiceDescriptionGTE applies the GTE predicate on the "service_description" field.
func ServiceDescriptionGTE(v string) predicate.UserService {
	return predicate.UserService(sql.FieldGTE(FieldServiceDescription, v))
}

// ServiceDescriptionLT applies the LT predicate on the "service_description" field.
func ServiceDescriptionLT(v string) predicate.UserService {
	return predicate.UserService(sql.FieldLT(FieldServiceDescription, v))
}

// ServiceDescriptionLTE applies the LTE predicate on the "service_description" field.
func ServiceDescriptionLTE(v string) predicate.UserService {
	return predicate.UserService(sql.FieldLTE(FieldServiceDescription, v))
}

// ServiceDescriptionContains applies the Contains predicate on the "service_description" field.
func ServiceDescriptionContains(v string) predicate.UserService {
	return predicate.UserService(sql.FieldContains(FieldServiceDescription, v))
}

// ServiceDescriptionHasPrefix applies the HasPrefix predicate on the "service_description" field.
func ServiceDescriptionHasPrefix(v string) predicate.UserService {
	return predicate.UserService(sql.FieldHasPrefix(FieldServiceDescription, v))
}

// ServiceDescriptionHasSuffix applies the HasSuffix predicate on the "service_description" field.
func ServiceDescriptionHasSuffix(v string) predicate.UserService {
	return predicate.UserService(sql.FieldHasSuffix(FieldServiceDescription, v))
}

// ServiceDescriptionIsNil applies the IsNil predicate on the "service_description" field.
func ServiceDescriptionIsNil() predicate.UserService {
	return predicate.UserService(sql.FieldIsNull(FieldServiceDescription))
}

// ServiceDescriptionNotNil applies the NotNil predicate on the "service_description" field.
func ServiceDescriptionNotNil() predicate.UserService {
	return predicate.UserService(sql.FieldNotNull(FieldServiceDescription))
}

// ServiceDescriptionEqualFold applies the EqualFold predicate on the "service_description" field.
func ServiceDescriptionEqualFold(v string) predicate.UserService {
	return predicate.UserService(sql.FieldEqualFold(FieldServiceDescription, v))
}

// ServiceDescriptionContainsFold applies the ContainsFold predicate on the "service_description" field.
func ServiceDescriptionContainsFold(v string) predicate.UserService {
	return predicate.UserService(sql.FieldContainsFold(FieldServiceDescription, v))
}

// ServiceIconEQ applies the EQ predicate on the "service_icon" field.
func ServiceIconEQ(v string) predicate.UserService {
	return predicate.UserService(sql.FieldEQ(FieldServiceIcon, v))
}

// ServiceIconNEQ applies the NEQ predicate on the "service_icon" field.
func ServiceIconNEQ(v string) predicate.UserService {
	return predicate.UserService(sql.FieldNEQ(FieldServiceIcon, v))
}

// ServiceIconIn applies the In predicate on the "service_icon" field.
func ServiceIconIn(vs ...string) predicate.UserService {
	return predicate.UserService(sql.FieldIn(FieldServiceIcon, vs...))
}

// ServiceIconNotIn applies the NotIn predicate on the "service_icon" field.
func ServiceIconNotIn(vs ...string) predicate.UserService {
	return predicate.UserService(sql.FieldNotIn(FieldServiceIcon, vs...))
}

// ServiceIconGT applies the GT predicate on the "service_icon" field.
func ServiceIconGT(v string) predicate.UserService {
	return predicate.UserService(sql.FieldGT(FieldServiceIcon, v))
}

// ServiceIconGTE applies the GTE predicate on the "service_icon" field.
func ServiceIconGTE(v string) predicate.UserService {
	return predicate.UserService(sql.FieldGTE(FieldServiceIcon, v))
}

// ServiceIconLT applies the LT predicate on the "service_icon" field.
func ServiceIconLT(v string) predicate.UserService {
	return predicate.UserService(sql.FieldLT(FieldServiceIcon, v))
}

// ServiceIconLTE applies the LTE predicate on the "service_icon" field.
func ServiceIconLTE(v string) predicate.UserService {
	return predicate.UserService(sql.FieldLTE(FieldServiceIcon, v))
}

// ServiceIconContains applies the Contains predicate on the "service_icon" field.
func ServiceIconContains(v string) predicate.UserService {
	return predicate.UserService(sql.FieldContains(FieldServiceIcon, v))
}

// ServiceIconHasPrefix applies the HasPrefix predicate on the "service_icon" field.
func ServiceIconHasPrefix(v string) predicate.UserService {
	return predicate.UserService(sql.FieldHasPrefix(FieldServiceIcon, v))
}

// ServiceIconHasSuffix applies the HasSuffix predicate on the "service_icon" field.
func ServiceIconHasSuffix(v string) predicate.UserService {
	return predicate.UserService(sql.FieldHasSuffix(FieldServiceIcon, v))
}

// ServiceIconIsNil applies the IsNil predicate on the "service_icon" field.
func ServiceIconIsNil() predicate.UserService {
	return predicate.UserService(sql.FieldIsNull(FieldServiceIcon))
}

// ServiceIconNotNil applies the NotNil predicate on the "service_icon" field.
func ServiceIconNotNil() predicate.UserService {
	return predicate.UserService(sql.FieldNotNull(FieldServiceIcon))
}

// ServiceIconEqualFold applies the EqualFold predicate on the "service_icon" field.
func ServiceIconEqualFold(v string) predicate.UserService {
	return predicate.UserService(sql.FieldEqualFold(FieldServiceIcon, v))
}

// ServiceIconContainsFold applies the ContainsFold predicate on the "service_icon" field.
func ServiceIconContainsFold(v string) predicate.UserService {
	return predicate.UserService(sql.FieldContainsFold(FieldServiceIcon, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.UserService {
	return predicate.UserService(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.UserService {
	return predicate.UserService(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.UserService {
	return predicate.UserService(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.UserService {
	return predicate.UserService(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.UserService {
	return predicate.UserService(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.UserService {
	return predicate.UserService(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.UserService {
	return predicate.UserService(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.UserService {
	return predicate.UserService(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.UserService {
	return predicate.UserService(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.UserService {
	return predicate.UserService(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.UserService {
	return predicate.UserService(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.UserService {
	return predicate.UserService(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.UserService {
	return predicate.UserService(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.UserService {
	return predicate.UserService(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.UserService {
	return predicate.UserService(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.UserService {
	return predicate.UserService(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.UserService {
	return predicate.UserService(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.UserService {
	return predicate.UserService(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.UserService {
	return predicate.UserService(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.UserService {
	return predicate.UserService(sql.FieldNotNull(FieldUpdatedAt))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uint) predicate.UserService {
	return predicate.UserService(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uint) predicate.UserService {
	return predicate.UserService(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uint) predicate.UserService {
	return predicate.UserService(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uint) predicate.UserService {
	return predicate.UserService(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.UserService {
	return predicate.UserService(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.UserService {
	return predicate.UserService(sql.FieldNotNull(FieldUserID))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.UserService {
	return predicate.UserService(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.UserService {
	return predicate.UserService(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserService) predicate.UserService {
	return predicate.UserService(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserService) predicate.UserService {
	return predicate.UserService(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserService) predicate.UserService {
	return predicate.UserService(sql.NotPredicates(p))
}

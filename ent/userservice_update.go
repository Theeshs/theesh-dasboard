// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"theedashboard/ent/predicate"
	"theedashboard/ent/user"
	"theedashboard/ent/userservice"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserServiceUpdate is the builder for updating UserService entities.
type UserServiceUpdate struct {
	config
	hooks    []Hook
	mutation *UserServiceMutation
}

// Where appends a list predicates to the UserServiceUpdate builder.
func (usu *UserServiceUpdate) Where(ps ...predicate.UserService) *UserServiceUpdate {
	usu.mutation.Where(ps...)
	return usu
}

// SetServiceName sets the "service_name" field.
func (usu *UserServiceUpdate) SetServiceName(s string) *UserServiceUpdate {
	usu.mutation.SetServiceName(s)
	return usu
}

// SetNillableServiceName sets the "service_name" field if the given value is not nil.
func (usu *UserServiceUpdate) SetNillableServiceName(s *string) *UserServiceUpdate {
	if s != nil {
		usu.SetServiceName(*s)
	}
	return usu
}

// ClearServiceName clears the value of the "service_name" field.
func (usu *UserServiceUpdate) ClearServiceName() *UserServiceUpdate {
	usu.mutation.ClearServiceName()
	return usu
}

// SetServiceDescription sets the "service_description" field.
func (usu *UserServiceUpdate) SetServiceDescription(s string) *UserServiceUpdate {
	usu.mutation.SetServiceDescription(s)
	return usu
}

// SetNillableServiceDescription sets the "service_description" field if the given value is not nil.
func (usu *UserServiceUpdate) SetNillableServiceDescription(s *string) *UserServiceUpdate {
	if s != nil {
		usu.SetServiceDescription(*s)
	}
	return usu
}

// ClearServiceDescription clears the value of the "service_description" field.
func (usu *UserServiceUpdate) ClearServiceDescription() *UserServiceUpdate {
	usu.mutation.ClearServiceDescription()
	return usu
}

// SetServiceIcon sets the "service_icon" field.
func (usu *UserServiceUpdate) SetServiceIcon(s string) *UserServiceUpdate {
	usu.mutation.SetServiceIcon(s)
	return usu
}

// SetNillableServiceIcon sets the "service_icon" field if the given value is not nil.
func (usu *UserServiceUpdate) SetNillableServiceIcon(s *string) *UserServiceUpdate {
	if s != nil {
		usu.SetServiceIcon(*s)
	}
	return usu
}

// ClearServiceIcon clears the value of the "service_icon" field.
func (usu *UserServiceUpdate) ClearServiceIcon() *UserServiceUpdate {
	usu.mutation.ClearServiceIcon()
	return usu
}

// SetCreatedAt sets the "created_at" field.
func (usu *UserServiceUpdate) SetCreatedAt(t time.Time) *UserServiceUpdate {
	usu.mutation.SetCreatedAt(t)
	return usu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (usu *UserServiceUpdate) SetNillableCreatedAt(t *time.Time) *UserServiceUpdate {
	if t != nil {
		usu.SetCreatedAt(*t)
	}
	return usu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (usu *UserServiceUpdate) ClearCreatedAt() *UserServiceUpdate {
	usu.mutation.ClearCreatedAt()
	return usu
}

// SetUpdatedAt sets the "updated_at" field.
func (usu *UserServiceUpdate) SetUpdatedAt(t time.Time) *UserServiceUpdate {
	usu.mutation.SetUpdatedAt(t)
	return usu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (usu *UserServiceUpdate) SetNillableUpdatedAt(t *time.Time) *UserServiceUpdate {
	if t != nil {
		usu.SetUpdatedAt(*t)
	}
	return usu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (usu *UserServiceUpdate) ClearUpdatedAt() *UserServiceUpdate {
	usu.mutation.ClearUpdatedAt()
	return usu
}

// SetUserID sets the "user_id" field.
func (usu *UserServiceUpdate) SetUserID(u uint) *UserServiceUpdate {
	usu.mutation.SetUserID(u)
	return usu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (usu *UserServiceUpdate) SetNillableUserID(u *uint) *UserServiceUpdate {
	if u != nil {
		usu.SetUserID(*u)
	}
	return usu
}

// ClearUserID clears the value of the "user_id" field.
func (usu *UserServiceUpdate) ClearUserID() *UserServiceUpdate {
	usu.mutation.ClearUserID()
	return usu
}

// SetUser sets the "user" edge to the User entity.
func (usu *UserServiceUpdate) SetUser(u *User) *UserServiceUpdate {
	return usu.SetUserID(u.ID)
}

// Mutation returns the UserServiceMutation object of the builder.
func (usu *UserServiceUpdate) Mutation() *UserServiceMutation {
	return usu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (usu *UserServiceUpdate) ClearUser() *UserServiceUpdate {
	usu.mutation.ClearUser()
	return usu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (usu *UserServiceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, usu.sqlSave, usu.mutation, usu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (usu *UserServiceUpdate) SaveX(ctx context.Context) int {
	affected, err := usu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (usu *UserServiceUpdate) Exec(ctx context.Context) error {
	_, err := usu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usu *UserServiceUpdate) ExecX(ctx context.Context) {
	if err := usu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (usu *UserServiceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(userservice.Table, userservice.Columns, sqlgraph.NewFieldSpec(userservice.FieldID, field.TypeUint))
	if ps := usu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := usu.mutation.ServiceName(); ok {
		_spec.SetField(userservice.FieldServiceName, field.TypeString, value)
	}
	if usu.mutation.ServiceNameCleared() {
		_spec.ClearField(userservice.FieldServiceName, field.TypeString)
	}
	if value, ok := usu.mutation.ServiceDescription(); ok {
		_spec.SetField(userservice.FieldServiceDescription, field.TypeString, value)
	}
	if usu.mutation.ServiceDescriptionCleared() {
		_spec.ClearField(userservice.FieldServiceDescription, field.TypeString)
	}
	if value, ok := usu.mutation.ServiceIcon(); ok {
		_spec.SetField(userservice.FieldServiceIcon, field.TypeString, value)
	}
	if usu.mutation.ServiceIconCleared() {
		_spec.ClearField(userservice.FieldServiceIcon, field.TypeString)
	}
	if value, ok := usu.mutation.CreatedAt(); ok {
		_spec.SetField(userservice.FieldCreatedAt, field.TypeTime, value)
	}
	if usu.mutation.CreatedAtCleared() {
		_spec.ClearField(userservice.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := usu.mutation.UpdatedAt(); ok {
		_spec.SetField(userservice.FieldUpdatedAt, field.TypeTime, value)
	}
	if usu.mutation.UpdatedAtCleared() {
		_spec.ClearField(userservice.FieldUpdatedAt, field.TypeTime)
	}
	if usu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userservice.UserTable,
			Columns: []string{userservice.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := usu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userservice.UserTable,
			Columns: []string{userservice.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, usu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userservice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	usu.mutation.done = true
	return n, nil
}

// UserServiceUpdateOne is the builder for updating a single UserService entity.
type UserServiceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserServiceMutation
}

// SetServiceName sets the "service_name" field.
func (usuo *UserServiceUpdateOne) SetServiceName(s string) *UserServiceUpdateOne {
	usuo.mutation.SetServiceName(s)
	return usuo
}

// SetNillableServiceName sets the "service_name" field if the given value is not nil.
func (usuo *UserServiceUpdateOne) SetNillableServiceName(s *string) *UserServiceUpdateOne {
	if s != nil {
		usuo.SetServiceName(*s)
	}
	return usuo
}

// ClearServiceName clears the value of the "service_name" field.
func (usuo *UserServiceUpdateOne) ClearServiceName() *UserServiceUpdateOne {
	usuo.mutation.ClearServiceName()
	return usuo
}

// SetServiceDescription sets the "service_description" field.
func (usuo *UserServiceUpdateOne) SetServiceDescription(s string) *UserServiceUpdateOne {
	usuo.mutation.SetServiceDescription(s)
	return usuo
}

// SetNillableServiceDescription sets the "service_description" field if the given value is not nil.
func (usuo *UserServiceUpdateOne) SetNillableServiceDescription(s *string) *UserServiceUpdateOne {
	if s != nil {
		usuo.SetServiceDescription(*s)
	}
	return usuo
}

// ClearServiceDescription clears the value of the "service_description" field.
func (usuo *UserServiceUpdateOne) ClearServiceDescription() *UserServiceUpdateOne {
	usuo.mutation.ClearServiceDescription()
	return usuo
}

// SetServiceIcon sets the "service_icon" field.
func (usuo *UserServiceUpdateOne) SetServiceIcon(s string) *UserServiceUpdateOne {
	usuo.mutation.SetServiceIcon(s)
	return usuo
}

// SetNillableServiceIcon sets the "service_icon" field if the given value is not nil.
func (usuo *UserServiceUpdateOne) SetNillableServiceIcon(s *string) *UserServiceUpdateOne {
	if s != nil {
		usuo.SetServiceIcon(*s)
	}
	return usuo
}

// ClearServiceIcon clears the value of the "service_icon" field.
func (usuo *UserServiceUpdateOne) ClearServiceIcon() *UserServiceUpdateOne {
	usuo.mutation.ClearServiceIcon()
	return usuo
}

// SetCreatedAt sets the "created_at" field.
func (usuo *UserServiceUpdateOne) SetCreatedAt(t time.Time) *UserServiceUpdateOne {
	usuo.mutation.SetCreatedAt(t)
	return usuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (usuo *UserServiceUpdateOne) SetNillableCreatedAt(t *time.Time) *UserServiceUpdateOne {
	if t != nil {
		usuo.SetCreatedAt(*t)
	}
	return usuo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (usuo *UserServiceUpdateOne) ClearCreatedAt() *UserServiceUpdateOne {
	usuo.mutation.ClearCreatedAt()
	return usuo
}

// SetUpdatedAt sets the "updated_at" field.
func (usuo *UserServiceUpdateOne) SetUpdatedAt(t time.Time) *UserServiceUpdateOne {
	usuo.mutation.SetUpdatedAt(t)
	return usuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (usuo *UserServiceUpdateOne) SetNillableUpdatedAt(t *time.Time) *UserServiceUpdateOne {
	if t != nil {
		usuo.SetUpdatedAt(*t)
	}
	return usuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (usuo *UserServiceUpdateOne) ClearUpdatedAt() *UserServiceUpdateOne {
	usuo.mutation.ClearUpdatedAt()
	return usuo
}

// SetUserID sets the "user_id" field.
func (usuo *UserServiceUpdateOne) SetUserID(u uint) *UserServiceUpdateOne {
	usuo.mutation.SetUserID(u)
	return usuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (usuo *UserServiceUpdateOne) SetNillableUserID(u *uint) *UserServiceUpdateOne {
	if u != nil {
		usuo.SetUserID(*u)
	}
	return usuo
}

// ClearUserID clears the value of the "user_id" field.
func (usuo *UserServiceUpdateOne) ClearUserID() *UserServiceUpdateOne {
	usuo.mutation.ClearUserID()
	return usuo
}

// SetUser sets the "user" edge to the User entity.
func (usuo *UserServiceUpdateOne) SetUser(u *User) *UserServiceUpdateOne {
	return usuo.SetUserID(u.ID)
}

// Mutation returns the UserServiceMutation object of the builder.
func (usuo *UserServiceUpdateOne) Mutation() *UserServiceMutation {
	return usuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (usuo *UserServiceUpdateOne) ClearUser() *UserServiceUpdateOne {
	usuo.mutation.ClearUser()
	return usuo
}

// Where appends a list predicates to the UserServiceUpdate builder.
func (usuo *UserServiceUpdateOne) Where(ps ...predicate.UserService) *UserServiceUpdateOne {
	usuo.mutation.Where(ps...)
	return usuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (usuo *UserServiceUpdateOne) Select(field string, fields ...string) *UserServiceUpdateOne {
	usuo.fields = append([]string{field}, fields...)
	return usuo
}

// Save executes the query and returns the updated UserService entity.
func (usuo *UserServiceUpdateOne) Save(ctx context.Context) (*UserService, error) {
	return withHooks(ctx, usuo.sqlSave, usuo.mutation, usuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (usuo *UserServiceUpdateOne) SaveX(ctx context.Context) *UserService {
	node, err := usuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (usuo *UserServiceUpdateOne) Exec(ctx context.Context) error {
	_, err := usuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usuo *UserServiceUpdateOne) ExecX(ctx context.Context) {
	if err := usuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (usuo *UserServiceUpdateOne) sqlSave(ctx context.Context) (_node *UserService, err error) {
	_spec := sqlgraph.NewUpdateSpec(userservice.Table, userservice.Columns, sqlgraph.NewFieldSpec(userservice.FieldID, field.TypeUint))
	id, ok := usuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserService.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := usuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userservice.FieldID)
		for _, f := range fields {
			if !userservice.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userservice.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := usuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := usuo.mutation.ServiceName(); ok {
		_spec.SetField(userservice.FieldServiceName, field.TypeString, value)
	}
	if usuo.mutation.ServiceNameCleared() {
		_spec.ClearField(userservice.FieldServiceName, field.TypeString)
	}
	if value, ok := usuo.mutation.ServiceDescription(); ok {
		_spec.SetField(userservice.FieldServiceDescription, field.TypeString, value)
	}
	if usuo.mutation.ServiceDescriptionCleared() {
		_spec.ClearField(userservice.FieldServiceDescription, field.TypeString)
	}
	if value, ok := usuo.mutation.ServiceIcon(); ok {
		_spec.SetField(userservice.FieldServiceIcon, field.TypeString, value)
	}
	if usuo.mutation.ServiceIconCleared() {
		_spec.ClearField(userservice.FieldServiceIcon, field.TypeString)
	}
	if value, ok := usuo.mutation.CreatedAt(); ok {
		_spec.SetField(userservice.FieldCreatedAt, field.TypeTime, value)
	}
	if usuo.mutation.CreatedAtCleared() {
		_spec.ClearField(userservice.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := usuo.mutation.UpdatedAt(); ok {
		_spec.SetField(userservice.FieldUpdatedAt, field.TypeTime, value)
	}
	if usuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(userservice.FieldUpdatedAt, field.TypeTime)
	}
	if usuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userservice.UserTable,
			Columns: []string{userservice.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := usuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userservice.UserTable,
			Columns: []string{userservice.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserService{config: usuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, usuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userservice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	usuo.mutation.done = true
	return _node, nil
}

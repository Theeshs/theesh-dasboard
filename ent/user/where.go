// Code generated by ent, DO NOT EDIT.

package user

import (
	"theedashboard/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// FirstName applies equality check predicate on the "first_name" field. It's identical to FirstNameEQ.
func FirstName(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFirstName, v))
}

// LastName applies equality check predicate on the "last_name" field. It's identical to LastNameEQ.
func LastName(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastName, v))
}

// Dob applies equality check predicate on the "dob" field. It's identical to DobEQ.
func Dob(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDob, v))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUsername, v))
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPassword, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// GithubUsername applies equality check predicate on the "github_username" field. It's identical to GithubUsernameEQ.
func GithubUsername(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldGithubUsername, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDescription, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// MobileNumber applies equality check predicate on the "mobile_number" field. It's identical to MobileNumberEQ.
func MobileNumber(v int32) predicate.User {
	return predicate.User(sql.FieldEQ(FieldMobileNumber, v))
}

// AddressBlock applies equality check predicate on the "address_block" field. It's identical to AddressBlockEQ.
func AddressBlock(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAddressBlock, v))
}

// AddressStreet applies equality check predicate on the "address_street" field. It's identical to AddressStreetEQ.
func AddressStreet(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAddressStreet, v))
}

// RecidentialCountry applies equality check predicate on the "recidential_country" field. It's identical to RecidentialCountryEQ.
func RecidentialCountry(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldRecidentialCountry, v))
}

// Nationality applies equality check predicate on the "nationality" field. It's identical to NationalityEQ.
func Nationality(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNationality, v))
}

// FirstNameEQ applies the EQ predicate on the "first_name" field.
func FirstNameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFirstName, v))
}

// FirstNameNEQ applies the NEQ predicate on the "first_name" field.
func FirstNameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldFirstName, v))
}

// FirstNameIn applies the In predicate on the "first_name" field.
func FirstNameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldFirstName, vs...))
}

// FirstNameNotIn applies the NotIn predicate on the "first_name" field.
func FirstNameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldFirstName, vs...))
}

// FirstNameGT applies the GT predicate on the "first_name" field.
func FirstNameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldFirstName, v))
}

// FirstNameGTE applies the GTE predicate on the "first_name" field.
func FirstNameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldFirstName, v))
}

// FirstNameLT applies the LT predicate on the "first_name" field.
func FirstNameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldFirstName, v))
}

// FirstNameLTE applies the LTE predicate on the "first_name" field.
func FirstNameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldFirstName, v))
}

// FirstNameContains applies the Contains predicate on the "first_name" field.
func FirstNameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldFirstName, v))
}

// FirstNameHasPrefix applies the HasPrefix predicate on the "first_name" field.
func FirstNameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldFirstName, v))
}

// FirstNameHasSuffix applies the HasSuffix predicate on the "first_name" field.
func FirstNameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldFirstName, v))
}

// FirstNameIsNil applies the IsNil predicate on the "first_name" field.
func FirstNameIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldFirstName))
}

// FirstNameNotNil applies the NotNil predicate on the "first_name" field.
func FirstNameNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldFirstName))
}

// FirstNameEqualFold applies the EqualFold predicate on the "first_name" field.
func FirstNameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldFirstName, v))
}

// FirstNameContainsFold applies the ContainsFold predicate on the "first_name" field.
func FirstNameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldFirstName, v))
}

// LastNameEQ applies the EQ predicate on the "last_name" field.
func LastNameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastName, v))
}

// LastNameNEQ applies the NEQ predicate on the "last_name" field.
func LastNameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLastName, v))
}

// LastNameIn applies the In predicate on the "last_name" field.
func LastNameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldLastName, vs...))
}

// LastNameNotIn applies the NotIn predicate on the "last_name" field.
func LastNameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLastName, vs...))
}

// LastNameGT applies the GT predicate on the "last_name" field.
func LastNameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldLastName, v))
}

// LastNameGTE applies the GTE predicate on the "last_name" field.
func LastNameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLastName, v))
}

// LastNameLT applies the LT predicate on the "last_name" field.
func LastNameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldLastName, v))
}

// LastNameLTE applies the LTE predicate on the "last_name" field.
func LastNameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLastName, v))
}

// LastNameContains applies the Contains predicate on the "last_name" field.
func LastNameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldLastName, v))
}

// LastNameHasPrefix applies the HasPrefix predicate on the "last_name" field.
func LastNameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldLastName, v))
}

// LastNameHasSuffix applies the HasSuffix predicate on the "last_name" field.
func LastNameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldLastName, v))
}

// LastNameIsNil applies the IsNil predicate on the "last_name" field.
func LastNameIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldLastName))
}

// LastNameNotNil applies the NotNil predicate on the "last_name" field.
func LastNameNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldLastName))
}

// LastNameEqualFold applies the EqualFold predicate on the "last_name" field.
func LastNameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldLastName, v))
}

// LastNameContainsFold applies the ContainsFold predicate on the "last_name" field.
func LastNameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldLastName, v))
}

// DobEQ applies the EQ predicate on the "dob" field.
func DobEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDob, v))
}

// DobNEQ applies the NEQ predicate on the "dob" field.
func DobNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldDob, v))
}

// DobIn applies the In predicate on the "dob" field.
func DobIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldDob, vs...))
}

// DobNotIn applies the NotIn predicate on the "dob" field.
func DobNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldDob, vs...))
}

// DobGT applies the GT predicate on the "dob" field.
func DobGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldDob, v))
}

// DobGTE applies the GTE predicate on the "dob" field.
func DobGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldDob, v))
}

// DobLT applies the LT predicate on the "dob" field.
func DobLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldDob, v))
}

// DobLTE applies the LTE predicate on the "dob" field.
func DobLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldDob, v))
}

// DobIsNil applies the IsNil predicate on the "dob" field.
func DobIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldDob))
}

// DobNotNil applies the NotNil predicate on the "dob" field.
func DobNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldDob))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldUsername, v))
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPassword, v))
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPassword, v))
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPassword, vs...))
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPassword, vs...))
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPassword, v))
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPassword, v))
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPassword, v))
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPassword, v))
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPassword, v))
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPassword, v))
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPassword, v))
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPassword, v))
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPassword, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldEmail, v))
}

// GithubUsernameEQ applies the EQ predicate on the "github_username" field.
func GithubUsernameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldGithubUsername, v))
}

// GithubUsernameNEQ applies the NEQ predicate on the "github_username" field.
func GithubUsernameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldGithubUsername, v))
}

// GithubUsernameIn applies the In predicate on the "github_username" field.
func GithubUsernameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldGithubUsername, vs...))
}

// GithubUsernameNotIn applies the NotIn predicate on the "github_username" field.
func GithubUsernameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldGithubUsername, vs...))
}

// GithubUsernameGT applies the GT predicate on the "github_username" field.
func GithubUsernameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldGithubUsername, v))
}

// GithubUsernameGTE applies the GTE predicate on the "github_username" field.
func GithubUsernameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldGithubUsername, v))
}

// GithubUsernameLT applies the LT predicate on the "github_username" field.
func GithubUsernameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldGithubUsername, v))
}

// GithubUsernameLTE applies the LTE predicate on the "github_username" field.
func GithubUsernameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldGithubUsername, v))
}

// GithubUsernameContains applies the Contains predicate on the "github_username" field.
func GithubUsernameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldGithubUsername, v))
}

// GithubUsernameHasPrefix applies the HasPrefix predicate on the "github_username" field.
func GithubUsernameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldGithubUsername, v))
}

// GithubUsernameHasSuffix applies the HasSuffix predicate on the "github_username" field.
func GithubUsernameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldGithubUsername, v))
}

// GithubUsernameIsNil applies the IsNil predicate on the "github_username" field.
func GithubUsernameIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldGithubUsername))
}

// GithubUsernameNotNil applies the NotNil predicate on the "github_username" field.
func GithubUsernameNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldGithubUsername))
}

// GithubUsernameEqualFold applies the EqualFold predicate on the "github_username" field.
func GithubUsernameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldGithubUsername, v))
}

// GithubUsernameContainsFold applies the ContainsFold predicate on the "github_username" field.
func GithubUsernameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldGithubUsername, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldDescription, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldUpdatedAt))
}

// MobileNumberEQ applies the EQ predicate on the "mobile_number" field.
func MobileNumberEQ(v int32) predicate.User {
	return predicate.User(sql.FieldEQ(FieldMobileNumber, v))
}

// MobileNumberNEQ applies the NEQ predicate on the "mobile_number" field.
func MobileNumberNEQ(v int32) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldMobileNumber, v))
}

// MobileNumberIn applies the In predicate on the "mobile_number" field.
func MobileNumberIn(vs ...int32) predicate.User {
	return predicate.User(sql.FieldIn(FieldMobileNumber, vs...))
}

// MobileNumberNotIn applies the NotIn predicate on the "mobile_number" field.
func MobileNumberNotIn(vs ...int32) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldMobileNumber, vs...))
}

// MobileNumberGT applies the GT predicate on the "mobile_number" field.
func MobileNumberGT(v int32) predicate.User {
	return predicate.User(sql.FieldGT(FieldMobileNumber, v))
}

// MobileNumberGTE applies the GTE predicate on the "mobile_number" field.
func MobileNumberGTE(v int32) predicate.User {
	return predicate.User(sql.FieldGTE(FieldMobileNumber, v))
}

// MobileNumberLT applies the LT predicate on the "mobile_number" field.
func MobileNumberLT(v int32) predicate.User {
	return predicate.User(sql.FieldLT(FieldMobileNumber, v))
}

// MobileNumberLTE applies the LTE predicate on the "mobile_number" field.
func MobileNumberLTE(v int32) predicate.User {
	return predicate.User(sql.FieldLTE(FieldMobileNumber, v))
}

// MobileNumberIsNil applies the IsNil predicate on the "mobile_number" field.
func MobileNumberIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldMobileNumber))
}

// MobileNumberNotNil applies the NotNil predicate on the "mobile_number" field.
func MobileNumberNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldMobileNumber))
}

// AddressBlockEQ applies the EQ predicate on the "address_block" field.
func AddressBlockEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAddressBlock, v))
}

// AddressBlockNEQ applies the NEQ predicate on the "address_block" field.
func AddressBlockNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldAddressBlock, v))
}

// AddressBlockIn applies the In predicate on the "address_block" field.
func AddressBlockIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldAddressBlock, vs...))
}

// AddressBlockNotIn applies the NotIn predicate on the "address_block" field.
func AddressBlockNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldAddressBlock, vs...))
}

// AddressBlockGT applies the GT predicate on the "address_block" field.
func AddressBlockGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldAddressBlock, v))
}

// AddressBlockGTE applies the GTE predicate on the "address_block" field.
func AddressBlockGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldAddressBlock, v))
}

// AddressBlockLT applies the LT predicate on the "address_block" field.
func AddressBlockLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldAddressBlock, v))
}

// AddressBlockLTE applies the LTE predicate on the "address_block" field.
func AddressBlockLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldAddressBlock, v))
}

// AddressBlockContains applies the Contains predicate on the "address_block" field.
func AddressBlockContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldAddressBlock, v))
}

// AddressBlockHasPrefix applies the HasPrefix predicate on the "address_block" field.
func AddressBlockHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldAddressBlock, v))
}

// AddressBlockHasSuffix applies the HasSuffix predicate on the "address_block" field.
func AddressBlockHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldAddressBlock, v))
}

// AddressBlockIsNil applies the IsNil predicate on the "address_block" field.
func AddressBlockIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldAddressBlock))
}

// AddressBlockNotNil applies the NotNil predicate on the "address_block" field.
func AddressBlockNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldAddressBlock))
}

// AddressBlockEqualFold applies the EqualFold predicate on the "address_block" field.
func AddressBlockEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldAddressBlock, v))
}

// AddressBlockContainsFold applies the ContainsFold predicate on the "address_block" field.
func AddressBlockContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldAddressBlock, v))
}

// AddressStreetEQ applies the EQ predicate on the "address_street" field.
func AddressStreetEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAddressStreet, v))
}

// AddressStreetNEQ applies the NEQ predicate on the "address_street" field.
func AddressStreetNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldAddressStreet, v))
}

// AddressStreetIn applies the In predicate on the "address_street" field.
func AddressStreetIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldAddressStreet, vs...))
}

// AddressStreetNotIn applies the NotIn predicate on the "address_street" field.
func AddressStreetNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldAddressStreet, vs...))
}

// AddressStreetGT applies the GT predicate on the "address_street" field.
func AddressStreetGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldAddressStreet, v))
}

// AddressStreetGTE applies the GTE predicate on the "address_street" field.
func AddressStreetGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldAddressStreet, v))
}

// AddressStreetLT applies the LT predicate on the "address_street" field.
func AddressStreetLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldAddressStreet, v))
}

// AddressStreetLTE applies the LTE predicate on the "address_street" field.
func AddressStreetLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldAddressStreet, v))
}

// AddressStreetContains applies the Contains predicate on the "address_street" field.
func AddressStreetContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldAddressStreet, v))
}

// AddressStreetHasPrefix applies the HasPrefix predicate on the "address_street" field.
func AddressStreetHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldAddressStreet, v))
}

// AddressStreetHasSuffix applies the HasSuffix predicate on the "address_street" field.
func AddressStreetHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldAddressStreet, v))
}

// AddressStreetIsNil applies the IsNil predicate on the "address_street" field.
func AddressStreetIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldAddressStreet))
}

// AddressStreetNotNil applies the NotNil predicate on the "address_street" field.
func AddressStreetNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldAddressStreet))
}

// AddressStreetEqualFold applies the EqualFold predicate on the "address_street" field.
func AddressStreetEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldAddressStreet, v))
}

// AddressStreetContainsFold applies the ContainsFold predicate on the "address_street" field.
func AddressStreetContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldAddressStreet, v))
}

// RecidentialCountryEQ applies the EQ predicate on the "recidential_country" field.
func RecidentialCountryEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldRecidentialCountry, v))
}

// RecidentialCountryNEQ applies the NEQ predicate on the "recidential_country" field.
func RecidentialCountryNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldRecidentialCountry, v))
}

// RecidentialCountryIn applies the In predicate on the "recidential_country" field.
func RecidentialCountryIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldRecidentialCountry, vs...))
}

// RecidentialCountryNotIn applies the NotIn predicate on the "recidential_country" field.
func RecidentialCountryNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldRecidentialCountry, vs...))
}

// RecidentialCountryGT applies the GT predicate on the "recidential_country" field.
func RecidentialCountryGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldRecidentialCountry, v))
}

// RecidentialCountryGTE applies the GTE predicate on the "recidential_country" field.
func RecidentialCountryGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldRecidentialCountry, v))
}

// RecidentialCountryLT applies the LT predicate on the "recidential_country" field.
func RecidentialCountryLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldRecidentialCountry, v))
}

// RecidentialCountryLTE applies the LTE predicate on the "recidential_country" field.
func RecidentialCountryLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldRecidentialCountry, v))
}

// RecidentialCountryContains applies the Contains predicate on the "recidential_country" field.
func RecidentialCountryContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldRecidentialCountry, v))
}

// RecidentialCountryHasPrefix applies the HasPrefix predicate on the "recidential_country" field.
func RecidentialCountryHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldRecidentialCountry, v))
}

// RecidentialCountryHasSuffix applies the HasSuffix predicate on the "recidential_country" field.
func RecidentialCountryHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldRecidentialCountry, v))
}

// RecidentialCountryIsNil applies the IsNil predicate on the "recidential_country" field.
func RecidentialCountryIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldRecidentialCountry))
}

// RecidentialCountryNotNil applies the NotNil predicate on the "recidential_country" field.
func RecidentialCountryNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldRecidentialCountry))
}

// RecidentialCountryEqualFold applies the EqualFold predicate on the "recidential_country" field.
func RecidentialCountryEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldRecidentialCountry, v))
}

// RecidentialCountryContainsFold applies the ContainsFold predicate on the "recidential_country" field.
func RecidentialCountryContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldRecidentialCountry, v))
}

// NationalityEQ applies the EQ predicate on the "nationality" field.
func NationalityEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNationality, v))
}

// NationalityNEQ applies the NEQ predicate on the "nationality" field.
func NationalityNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldNationality, v))
}

// NationalityIn applies the In predicate on the "nationality" field.
func NationalityIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldNationality, vs...))
}

// NationalityNotIn applies the NotIn predicate on the "nationality" field.
func NationalityNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldNationality, vs...))
}

// NationalityGT applies the GT predicate on the "nationality" field.
func NationalityGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldNationality, v))
}

// NationalityGTE applies the GTE predicate on the "nationality" field.
func NationalityGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldNationality, v))
}

// NationalityLT applies the LT predicate on the "nationality" field.
func NationalityLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldNationality, v))
}

// NationalityLTE applies the LTE predicate on the "nationality" field.
func NationalityLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldNationality, v))
}

// NationalityContains applies the Contains predicate on the "nationality" field.
func NationalityContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldNationality, v))
}

// NationalityHasPrefix applies the HasPrefix predicate on the "nationality" field.
func NationalityHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldNationality, v))
}

// NationalityHasSuffix applies the HasSuffix predicate on the "nationality" field.
func NationalityHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldNationality, v))
}

// NationalityIsNil applies the IsNil predicate on the "nationality" field.
func NationalityIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldNationality))
}

// NationalityNotNil applies the NotNil predicate on the "nationality" field.
func NationalityNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldNationality))
}

// NationalityEqualFold applies the EqualFold predicate on the "nationality" field.
func NationalityEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldNationality, v))
}

// NationalityContainsFold applies the ContainsFold predicate on the "nationality" field.
func NationalityContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldNationality, v))
}

// HasEducations applies the HasEdge predicate on the "educations" edge.
func HasEducations() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EducationsTable, EducationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEducationsWith applies the HasEdge predicate on the "educations" edge with a given conditions (other predicates).
func HasEducationsWith(preds ...predicate.Education) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newEducationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExperiences applies the HasEdge predicate on the "experiences" edge.
func HasExperiences() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExperiencesTable, ExperiencesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExperiencesWith applies the HasEdge predicate on the "experiences" edge with a given conditions (other predicates).
func HasExperiencesWith(preds ...predicate.Experience) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newExperiencesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRepositories applies the HasEdge predicate on the "repositories" edge.
func HasRepositories() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RepositoriesTable, RepositoriesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRepositoriesWith applies the HasEdge predicate on the "repositories" edge with a given conditions (other predicates).
func HasRepositoriesWith(preds ...predicate.Repository) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newRepositoriesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserProjects applies the HasEdge predicate on the "user_projects" edge.
func HasUserProjects() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserProjectsTable, UserProjectsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserProjectsWith applies the HasEdge predicate on the "user_projects" edge with a given conditions (other predicates).
func HasUserProjectsWith(preds ...predicate.UserProject) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newUserProjectsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserServices applies the HasEdge predicate on the "user_services" edge.
func HasUserServices() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserServicesTable, UserServicesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserServicesWith applies the HasEdge predicate on the "user_services" edge with a given conditions (other predicates).
func HasUserServicesWith(preds ...predicate.UserService) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newUserServicesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserSkillAssociations applies the HasEdge predicate on the "user_skill_associations" edge.
func HasUserSkillAssociations() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserSkillAssociationsTable, UserSkillAssociationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserSkillAssociationsWith applies the HasEdge predicate on the "user_skill_associations" edge with a given conditions (other predicates).
func HasUserSkillAssociationsWith(preds ...predicate.UserSkillAssociation) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newUserSkillAssociationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}

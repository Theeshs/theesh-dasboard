// Code generated by ent, DO NOT EDIT.

package user

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFirstName holds the string denoting the first_name field in the database.
	FieldFirstName = "first_name"
	// FieldLastName holds the string denoting the last_name field in the database.
	FieldLastName = "last_name"
	// FieldDob holds the string denoting the dob field in the database.
	FieldDob = "dob"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldGithubUsername holds the string denoting the github_username field in the database.
	FieldGithubUsername = "github_username"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldMobileNumber holds the string denoting the mobile_number field in the database.
	FieldMobileNumber = "mobile_number"
	// FieldAddressBlock holds the string denoting the address_block field in the database.
	FieldAddressBlock = "address_block"
	// FieldAddressStreet holds the string denoting the address_street field in the database.
	FieldAddressStreet = "address_street"
	// FieldRecidentialCountry holds the string denoting the recidential_country field in the database.
	FieldRecidentialCountry = "recidential_country"
	// FieldNationality holds the string denoting the nationality field in the database.
	FieldNationality = "nationality"
	// EdgeEducations holds the string denoting the educations edge name in mutations.
	EdgeEducations = "educations"
	// EdgeExperiences holds the string denoting the experiences edge name in mutations.
	EdgeExperiences = "experiences"
	// EdgeRepositories holds the string denoting the repositories edge name in mutations.
	EdgeRepositories = "repositories"
	// EdgeUserProjects holds the string denoting the user_projects edge name in mutations.
	EdgeUserProjects = "user_projects"
	// EdgeUserServices holds the string denoting the user_services edge name in mutations.
	EdgeUserServices = "user_services"
	// EdgeUserSkillAssociations holds the string denoting the user_skill_associations edge name in mutations.
	EdgeUserSkillAssociations = "user_skill_associations"
	// Table holds the table name of the user in the database.
	Table = "user"
	// EducationsTable is the table that holds the educations relation/edge.
	EducationsTable = "education"
	// EducationsInverseTable is the table name for the Education entity.
	// It exists in this package in order to avoid circular dependency with the "education" package.
	EducationsInverseTable = "education"
	// EducationsColumn is the table column denoting the educations relation/edge.
	EducationsColumn = "user_id"
	// ExperiencesTable is the table that holds the experiences relation/edge.
	ExperiencesTable = "experience"
	// ExperiencesInverseTable is the table name for the Experience entity.
	// It exists in this package in order to avoid circular dependency with the "experience" package.
	ExperiencesInverseTable = "experience"
	// ExperiencesColumn is the table column denoting the experiences relation/edge.
	ExperiencesColumn = "user_id"
	// RepositoriesTable is the table that holds the repositories relation/edge.
	RepositoriesTable = "repositories"
	// RepositoriesInverseTable is the table name for the Repository entity.
	// It exists in this package in order to avoid circular dependency with the "repository" package.
	RepositoriesInverseTable = "repositories"
	// RepositoriesColumn is the table column denoting the repositories relation/edge.
	RepositoriesColumn = "user_id"
	// UserProjectsTable is the table that holds the user_projects relation/edge.
	UserProjectsTable = "user_projects"
	// UserProjectsInverseTable is the table name for the UserProject entity.
	// It exists in this package in order to avoid circular dependency with the "userproject" package.
	UserProjectsInverseTable = "user_projects"
	// UserProjectsColumn is the table column denoting the user_projects relation/edge.
	UserProjectsColumn = "user_id"
	// UserServicesTable is the table that holds the user_services relation/edge.
	UserServicesTable = "user_services"
	// UserServicesInverseTable is the table name for the UserService entity.
	// It exists in this package in order to avoid circular dependency with the "userservice" package.
	UserServicesInverseTable = "user_services"
	// UserServicesColumn is the table column denoting the user_services relation/edge.
	UserServicesColumn = "user_id"
	// UserSkillAssociationsTable is the table that holds the user_skill_associations relation/edge.
	UserSkillAssociationsTable = "user_skill_association"
	// UserSkillAssociationsInverseTable is the table name for the UserSkillAssociation entity.
	// It exists in this package in order to avoid circular dependency with the "userskillassociation" package.
	UserSkillAssociationsInverseTable = "user_skill_association"
	// UserSkillAssociationsColumn is the table column denoting the user_skill_associations relation/edge.
	UserSkillAssociationsColumn = "user_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldFirstName,
	FieldLastName,
	FieldDob,
	FieldUsername,
	FieldPassword,
	FieldEmail,
	FieldGithubUsername,
	FieldDescription,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldMobileNumber,
	FieldAddressBlock,
	FieldAddressStreet,
	FieldRecidentialCountry,
	FieldNationality,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFirstName orders the results by the first_name field.
func ByFirstName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirstName, opts...).ToFunc()
}

// ByLastName orders the results by the last_name field.
func ByLastName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastName, opts...).ToFunc()
}

// ByDob orders the results by the dob field.
func ByDob(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDob, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByGithubUsername orders the results by the github_username field.
func ByGithubUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGithubUsername, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByMobileNumber orders the results by the mobile_number field.
func ByMobileNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMobileNumber, opts...).ToFunc()
}

// ByAddressBlock orders the results by the address_block field.
func ByAddressBlock(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddressBlock, opts...).ToFunc()
}

// ByAddressStreet orders the results by the address_street field.
func ByAddressStreet(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddressStreet, opts...).ToFunc()
}

// ByRecidentialCountry orders the results by the recidential_country field.
func ByRecidentialCountry(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRecidentialCountry, opts...).ToFunc()
}

// ByNationality orders the results by the nationality field.
func ByNationality(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNationality, opts...).ToFunc()
}

// ByEducationsCount orders the results by educations count.
func ByEducationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEducationsStep(), opts...)
	}
}

// ByEducations orders the results by educations terms.
func ByEducations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEducationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByExperiencesCount orders the results by experiences count.
func ByExperiencesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newExperiencesStep(), opts...)
	}
}

// ByExperiences orders the results by experiences terms.
func ByExperiences(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExperiencesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRepositoriesCount orders the results by repositories count.
func ByRepositoriesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRepositoriesStep(), opts...)
	}
}

// ByRepositories orders the results by repositories terms.
func ByRepositories(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRepositoriesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserProjectsCount orders the results by user_projects count.
func ByUserProjectsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserProjectsStep(), opts...)
	}
}

// ByUserProjects orders the results by user_projects terms.
func ByUserProjects(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserProjectsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserServicesCount orders the results by user_services count.
func ByUserServicesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserServicesStep(), opts...)
	}
}

// ByUserServices orders the results by user_services terms.
func ByUserServices(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserServicesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserSkillAssociationsCount orders the results by user_skill_associations count.
func ByUserSkillAssociationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserSkillAssociationsStep(), opts...)
	}
}

// ByUserSkillAssociations orders the results by user_skill_associations terms.
func ByUserSkillAssociations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserSkillAssociationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newEducationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EducationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EducationsTable, EducationsColumn),
	)
}
func newExperiencesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExperiencesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ExperiencesTable, ExperiencesColumn),
	)
}
func newRepositoriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RepositoriesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RepositoriesTable, RepositoriesColumn),
	)
}
func newUserProjectsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserProjectsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UserProjectsTable, UserProjectsColumn),
	)
}
func newUserServicesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserServicesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UserServicesTable, UserServicesColumn),
	)
}
func newUserSkillAssociationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserSkillAssociationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UserSkillAssociationsTable, UserSkillAssociationsColumn),
	)
}

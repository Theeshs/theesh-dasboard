// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"theedashboard/ent/skill"
	"theedashboard/ent/user"
	"theedashboard/ent/userskillassociation"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserSkillAssociationCreate is the builder for creating a UserSkillAssociation entity.
type UserSkillAssociationCreate struct {
	config
	mutation *UserSkillAssociationMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (usac *UserSkillAssociationCreate) SetCreatedAt(t time.Time) *UserSkillAssociationCreate {
	usac.mutation.SetCreatedAt(t)
	return usac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (usac *UserSkillAssociationCreate) SetNillableCreatedAt(t *time.Time) *UserSkillAssociationCreate {
	if t != nil {
		usac.SetCreatedAt(*t)
	}
	return usac
}

// SetUpdatedAt sets the "updated_at" field.
func (usac *UserSkillAssociationCreate) SetUpdatedAt(t time.Time) *UserSkillAssociationCreate {
	usac.mutation.SetUpdatedAt(t)
	return usac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (usac *UserSkillAssociationCreate) SetNillableUpdatedAt(t *time.Time) *UserSkillAssociationCreate {
	if t != nil {
		usac.SetUpdatedAt(*t)
	}
	return usac
}

// SetPercentage sets the "percentage" field.
func (usac *UserSkillAssociationCreate) SetPercentage(i int32) *UserSkillAssociationCreate {
	usac.mutation.SetPercentage(i)
	return usac
}

// SetNillablePercentage sets the "percentage" field if the given value is not nil.
func (usac *UserSkillAssociationCreate) SetNillablePercentage(i *int32) *UserSkillAssociationCreate {
	if i != nil {
		usac.SetPercentage(*i)
	}
	return usac
}

// SetUserID sets the "user_id" field.
func (usac *UserSkillAssociationCreate) SetUserID(u uint) *UserSkillAssociationCreate {
	usac.mutation.SetUserID(u)
	return usac
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (usac *UserSkillAssociationCreate) SetNillableUserID(u *uint) *UserSkillAssociationCreate {
	if u != nil {
		usac.SetUserID(*u)
	}
	return usac
}

// SetSkillID sets the "skill_id" field.
func (usac *UserSkillAssociationCreate) SetSkillID(u uint) *UserSkillAssociationCreate {
	usac.mutation.SetSkillID(u)
	return usac
}

// SetNillableSkillID sets the "skill_id" field if the given value is not nil.
func (usac *UserSkillAssociationCreate) SetNillableSkillID(u *uint) *UserSkillAssociationCreate {
	if u != nil {
		usac.SetSkillID(*u)
	}
	return usac
}

// SetID sets the "id" field.
func (usac *UserSkillAssociationCreate) SetID(u uint) *UserSkillAssociationCreate {
	usac.mutation.SetID(u)
	return usac
}

// SetSkill sets the "skill" edge to the Skill entity.
func (usac *UserSkillAssociationCreate) SetSkill(s *Skill) *UserSkillAssociationCreate {
	return usac.SetSkillID(s.ID)
}

// SetUser sets the "user" edge to the User entity.
func (usac *UserSkillAssociationCreate) SetUser(u *User) *UserSkillAssociationCreate {
	return usac.SetUserID(u.ID)
}

// Mutation returns the UserSkillAssociationMutation object of the builder.
func (usac *UserSkillAssociationCreate) Mutation() *UserSkillAssociationMutation {
	return usac.mutation
}

// Save creates the UserSkillAssociation in the database.
func (usac *UserSkillAssociationCreate) Save(ctx context.Context) (*UserSkillAssociation, error) {
	return withHooks(ctx, usac.sqlSave, usac.mutation, usac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (usac *UserSkillAssociationCreate) SaveX(ctx context.Context) *UserSkillAssociation {
	v, err := usac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (usac *UserSkillAssociationCreate) Exec(ctx context.Context) error {
	_, err := usac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usac *UserSkillAssociationCreate) ExecX(ctx context.Context) {
	if err := usac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (usac *UserSkillAssociationCreate) check() error {
	return nil
}

func (usac *UserSkillAssociationCreate) sqlSave(ctx context.Context) (*UserSkillAssociation, error) {
	if err := usac.check(); err != nil {
		return nil, err
	}
	_node, _spec := usac.createSpec()
	if err := sqlgraph.CreateNode(ctx, usac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint(id)
	}
	usac.mutation.id = &_node.ID
	usac.mutation.done = true
	return _node, nil
}

func (usac *UserSkillAssociationCreate) createSpec() (*UserSkillAssociation, *sqlgraph.CreateSpec) {
	var (
		_node = &UserSkillAssociation{config: usac.config}
		_spec = sqlgraph.NewCreateSpec(userskillassociation.Table, sqlgraph.NewFieldSpec(userskillassociation.FieldID, field.TypeUint))
	)
	if id, ok := usac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := usac.mutation.CreatedAt(); ok {
		_spec.SetField(userskillassociation.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := usac.mutation.UpdatedAt(); ok {
		_spec.SetField(userskillassociation.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := usac.mutation.Percentage(); ok {
		_spec.SetField(userskillassociation.FieldPercentage, field.TypeInt32, value)
		_node.Percentage = value
	}
	if nodes := usac.mutation.SkillIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   userskillassociation.SkillTable,
			Columns: []string{userskillassociation.SkillColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skill.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SkillID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := usac.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userskillassociation.UserTable,
			Columns: []string{userskillassociation.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserSkillAssociationCreateBulk is the builder for creating many UserSkillAssociation entities in bulk.
type UserSkillAssociationCreateBulk struct {
	config
	err      error
	builders []*UserSkillAssociationCreate
}

// Save creates the UserSkillAssociation entities in the database.
func (usacb *UserSkillAssociationCreateBulk) Save(ctx context.Context) ([]*UserSkillAssociation, error) {
	if usacb.err != nil {
		return nil, usacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(usacb.builders))
	nodes := make([]*UserSkillAssociation, len(usacb.builders))
	mutators := make([]Mutator, len(usacb.builders))
	for i := range usacb.builders {
		func(i int, root context.Context) {
			builder := usacb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserSkillAssociationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, usacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, usacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, usacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (usacb *UserSkillAssociationCreateBulk) SaveX(ctx context.Context) []*UserSkillAssociation {
	v, err := usacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (usacb *UserSkillAssociationCreateBulk) Exec(ctx context.Context) error {
	_, err := usacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usacb *UserSkillAssociationCreateBulk) ExecX(ctx context.Context) {
	if err := usacb.Exec(ctx); err != nil {
		panic(err)
	}
}

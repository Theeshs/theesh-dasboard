// Code generated by ent, DO NOT EDIT.

package skill

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the skill type in the database.
	Label = "skill"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeUserSkillAssociation holds the string denoting the user_skill_association edge name in mutations.
	EdgeUserSkillAssociation = "user_skill_association"
	// Table holds the table name of the skill in the database.
	Table = "skill"
	// UserSkillAssociationTable is the table that holds the user_skill_association relation/edge.
	UserSkillAssociationTable = "user_skill_association"
	// UserSkillAssociationInverseTable is the table name for the UserSkillAssociation entity.
	// It exists in this package in order to avoid circular dependency with the "userskillassociation" package.
	UserSkillAssociationInverseTable = "user_skill_association"
	// UserSkillAssociationColumn is the table column denoting the user_skill_association relation/edge.
	UserSkillAssociationColumn = "skill_id"
)

// Columns holds all SQL columns for skill fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Skill queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUserSkillAssociationField orders the results by user_skill_association field.
func ByUserSkillAssociationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserSkillAssociationStep(), sql.OrderByField(field, opts...))
	}
}
func newUserSkillAssociationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserSkillAssociationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, UserSkillAssociationTable, UserSkillAssociationColumn),
	)
}

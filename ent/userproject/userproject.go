// Code generated by ent, DO NOT EDIT.

package userproject

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the userproject type in the database.
	Label = "user_project"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldProjectName holds the string denoting the project_name field in the database.
	FieldProjectName = "project_name"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldFromDate holds the string denoting the from_date field in the database.
	FieldFromDate = "from_date"
	// FieldToDate holds the string denoting the to_date field in the database.
	FieldToDate = "to_date"
	// FieldProjectLink holds the string denoting the project_link field in the database.
	FieldProjectLink = "project_link"
	// FieldTechnologies holds the string denoting the technologies field in the database.
	FieldTechnologies = "technologies"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the userproject in the database.
	Table = "user_projects"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "user_projects"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "user"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
)

// Columns holds all SQL columns for userproject fields.
var Columns = []string{
	FieldID,
	FieldProjectName,
	FieldUserID,
	FieldDescription,
	FieldFromDate,
	FieldToDate,
	FieldProjectLink,
	FieldTechnologies,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the UserProject queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByProjectName orders the results by the project_name field.
func ByProjectName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProjectName, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByFromDate orders the results by the from_date field.
func ByFromDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFromDate, opts...).ToFunc()
}

// ByToDate orders the results by the to_date field.
func ByToDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToDate, opts...).ToFunc()
}

// ByProjectLink orders the results by the project_link field.
func ByProjectLink(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProjectLink, opts...).ToFunc()
}

// ByTechnologies orders the results by the technologies field.
func ByTechnologies(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTechnologies, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}

// Code generated by ent, DO NOT EDIT.

package userproject

import (
	"theedashboard/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint) predicate.UserProject {
	return predicate.UserProject(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint) predicate.UserProject {
	return predicate.UserProject(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint) predicate.UserProject {
	return predicate.UserProject(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint) predicate.UserProject {
	return predicate.UserProject(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint) predicate.UserProject {
	return predicate.UserProject(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint) predicate.UserProject {
	return predicate.UserProject(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint) predicate.UserProject {
	return predicate.UserProject(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint) predicate.UserProject {
	return predicate.UserProject(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint) predicate.UserProject {
	return predicate.UserProject(sql.FieldLTE(FieldID, id))
}

// ProjectName applies equality check predicate on the "project_name" field. It's identical to ProjectNameEQ.
func ProjectName(v string) predicate.UserProject {
	return predicate.UserProject(sql.FieldEQ(FieldProjectName, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uint) predicate.UserProject {
	return predicate.UserProject(sql.FieldEQ(FieldUserID, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.UserProject {
	return predicate.UserProject(sql.FieldEQ(FieldDescription, v))
}

// FromDate applies equality check predicate on the "from_date" field. It's identical to FromDateEQ.
func FromDate(v time.Time) predicate.UserProject {
	return predicate.UserProject(sql.FieldEQ(FieldFromDate, v))
}

// ToDate applies equality check predicate on the "to_date" field. It's identical to ToDateEQ.
func ToDate(v time.Time) predicate.UserProject {
	return predicate.UserProject(sql.FieldEQ(FieldToDate, v))
}

// ProjectLink applies equality check predicate on the "project_link" field. It's identical to ProjectLinkEQ.
func ProjectLink(v string) predicate.UserProject {
	return predicate.UserProject(sql.FieldEQ(FieldProjectLink, v))
}

// Technologies applies equality check predicate on the "technologies" field. It's identical to TechnologiesEQ.
func Technologies(v string) predicate.UserProject {
	return predicate.UserProject(sql.FieldEQ(FieldTechnologies, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.UserProject {
	return predicate.UserProject(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.UserProject {
	return predicate.UserProject(sql.FieldEQ(FieldUpdatedAt, v))
}

// ProjectNameEQ applies the EQ predicate on the "project_name" field.
func ProjectNameEQ(v string) predicate.UserProject {
	return predicate.UserProject(sql.FieldEQ(FieldProjectName, v))
}

// ProjectNameNEQ applies the NEQ predicate on the "project_name" field.
func ProjectNameNEQ(v string) predicate.UserProject {
	return predicate.UserProject(sql.FieldNEQ(FieldProjectName, v))
}

// ProjectNameIn applies the In predicate on the "project_name" field.
func ProjectNameIn(vs ...string) predicate.UserProject {
	return predicate.UserProject(sql.FieldIn(FieldProjectName, vs...))
}

// ProjectNameNotIn applies the NotIn predicate on the "project_name" field.
func ProjectNameNotIn(vs ...string) predicate.UserProject {
	return predicate.UserProject(sql.FieldNotIn(FieldProjectName, vs...))
}

// ProjectNameGT applies the GT predicate on the "project_name" field.
func ProjectNameGT(v string) predicate.UserProject {
	return predicate.UserProject(sql.FieldGT(FieldProjectName, v))
}

// ProjectNameGTE applies the GTE predicate on the "project_name" field.
func ProjectNameGTE(v string) predicate.UserProject {
	return predicate.UserProject(sql.FieldGTE(FieldProjectName, v))
}

// ProjectNameLT applies the LT predicate on the "project_name" field.
func ProjectNameLT(v string) predicate.UserProject {
	return predicate.UserProject(sql.FieldLT(FieldProjectName, v))
}

// ProjectNameLTE applies the LTE predicate on the "project_name" field.
func ProjectNameLTE(v string) predicate.UserProject {
	return predicate.UserProject(sql.FieldLTE(FieldProjectName, v))
}

// ProjectNameContains applies the Contains predicate on the "project_name" field.
func ProjectNameContains(v string) predicate.UserProject {
	return predicate.UserProject(sql.FieldContains(FieldProjectName, v))
}

// ProjectNameHasPrefix applies the HasPrefix predicate on the "project_name" field.
func ProjectNameHasPrefix(v string) predicate.UserProject {
	return predicate.UserProject(sql.FieldHasPrefix(FieldProjectName, v))
}

// ProjectNameHasSuffix applies the HasSuffix predicate on the "project_name" field.
func ProjectNameHasSuffix(v string) predicate.UserProject {
	return predicate.UserProject(sql.FieldHasSuffix(FieldProjectName, v))
}

// ProjectNameEqualFold applies the EqualFold predicate on the "project_name" field.
func ProjectNameEqualFold(v string) predicate.UserProject {
	return predicate.UserProject(sql.FieldEqualFold(FieldProjectName, v))
}

// ProjectNameContainsFold applies the ContainsFold predicate on the "project_name" field.
func ProjectNameContainsFold(v string) predicate.UserProject {
	return predicate.UserProject(sql.FieldContainsFold(FieldProjectName, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uint) predicate.UserProject {
	return predicate.UserProject(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uint) predicate.UserProject {
	return predicate.UserProject(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uint) predicate.UserProject {
	return predicate.UserProject(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uint) predicate.UserProject {
	return predicate.UserProject(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.UserProject {
	return predicate.UserProject(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.UserProject {
	return predicate.UserProject(sql.FieldNotNull(FieldUserID))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.UserProject {
	return predicate.UserProject(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.UserProject {
	return predicate.UserProject(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.UserProject {
	return predicate.UserProject(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.UserProject {
	return predicate.UserProject(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.UserProject {
	return predicate.UserProject(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.UserProject {
	return predicate.UserProject(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.UserProject {
	return predicate.UserProject(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.UserProject {
	return predicate.UserProject(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.UserProject {
	return predicate.UserProject(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.UserProject {
	return predicate.UserProject(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.UserProject {
	return predicate.UserProject(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.UserProject {
	return predicate.UserProject(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.UserProject {
	return predicate.UserProject(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.UserProject {
	return predicate.UserProject(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.UserProject {
	return predicate.UserProject(sql.FieldContainsFold(FieldDescription, v))
}

// FromDateEQ applies the EQ predicate on the "from_date" field.
func FromDateEQ(v time.Time) predicate.UserProject {
	return predicate.UserProject(sql.FieldEQ(FieldFromDate, v))
}

// FromDateNEQ applies the NEQ predicate on the "from_date" field.
func FromDateNEQ(v time.Time) predicate.UserProject {
	return predicate.UserProject(sql.FieldNEQ(FieldFromDate, v))
}

// FromDateIn applies the In predicate on the "from_date" field.
func FromDateIn(vs ...time.Time) predicate.UserProject {
	return predicate.UserProject(sql.FieldIn(FieldFromDate, vs...))
}

// FromDateNotIn applies the NotIn predicate on the "from_date" field.
func FromDateNotIn(vs ...time.Time) predicate.UserProject {
	return predicate.UserProject(sql.FieldNotIn(FieldFromDate, vs...))
}

// FromDateGT applies the GT predicate on the "from_date" field.
func FromDateGT(v time.Time) predicate.UserProject {
	return predicate.UserProject(sql.FieldGT(FieldFromDate, v))
}

// FromDateGTE applies the GTE predicate on the "from_date" field.
func FromDateGTE(v time.Time) predicate.UserProject {
	return predicate.UserProject(sql.FieldGTE(FieldFromDate, v))
}

// FromDateLT applies the LT predicate on the "from_date" field.
func FromDateLT(v time.Time) predicate.UserProject {
	return predicate.UserProject(sql.FieldLT(FieldFromDate, v))
}

// FromDateLTE applies the LTE predicate on the "from_date" field.
func FromDateLTE(v time.Time) predicate.UserProject {
	return predicate.UserProject(sql.FieldLTE(FieldFromDate, v))
}

// FromDateIsNil applies the IsNil predicate on the "from_date" field.
func FromDateIsNil() predicate.UserProject {
	return predicate.UserProject(sql.FieldIsNull(FieldFromDate))
}

// FromDateNotNil applies the NotNil predicate on the "from_date" field.
func FromDateNotNil() predicate.UserProject {
	return predicate.UserProject(sql.FieldNotNull(FieldFromDate))
}

// ToDateEQ applies the EQ predicate on the "to_date" field.
func ToDateEQ(v time.Time) predicate.UserProject {
	return predicate.UserProject(sql.FieldEQ(FieldToDate, v))
}

// ToDateNEQ applies the NEQ predicate on the "to_date" field.
func ToDateNEQ(v time.Time) predicate.UserProject {
	return predicate.UserProject(sql.FieldNEQ(FieldToDate, v))
}

// ToDateIn applies the In predicate on the "to_date" field.
func ToDateIn(vs ...time.Time) predicate.UserProject {
	return predicate.UserProject(sql.FieldIn(FieldToDate, vs...))
}

// ToDateNotIn applies the NotIn predicate on the "to_date" field.
func ToDateNotIn(vs ...time.Time) predicate.UserProject {
	return predicate.UserProject(sql.FieldNotIn(FieldToDate, vs...))
}

// ToDateGT applies the GT predicate on the "to_date" field.
func ToDateGT(v time.Time) predicate.UserProject {
	return predicate.UserProject(sql.FieldGT(FieldToDate, v))
}

// ToDateGTE applies the GTE predicate on the "to_date" field.
func ToDateGTE(v time.Time) predicate.UserProject {
	return predicate.UserProject(sql.FieldGTE(FieldToDate, v))
}

// ToDateLT applies the LT predicate on the "to_date" field.
func ToDateLT(v time.Time) predicate.UserProject {
	return predicate.UserProject(sql.FieldLT(FieldToDate, v))
}

// ToDateLTE applies the LTE predicate on the "to_date" field.
func ToDateLTE(v time.Time) predicate.UserProject {
	return predicate.UserProject(sql.FieldLTE(FieldToDate, v))
}

// ToDateIsNil applies the IsNil predicate on the "to_date" field.
func ToDateIsNil() predicate.UserProject {
	return predicate.UserProject(sql.FieldIsNull(FieldToDate))
}

// ToDateNotNil applies the NotNil predicate on the "to_date" field.
func ToDateNotNil() predicate.UserProject {
	return predicate.UserProject(sql.FieldNotNull(FieldToDate))
}

// ProjectLinkEQ applies the EQ predicate on the "project_link" field.
func ProjectLinkEQ(v string) predicate.UserProject {
	return predicate.UserProject(sql.FieldEQ(FieldProjectLink, v))
}

// ProjectLinkNEQ applies the NEQ predicate on the "project_link" field.
func ProjectLinkNEQ(v string) predicate.UserProject {
	return predicate.UserProject(sql.FieldNEQ(FieldProjectLink, v))
}

// ProjectLinkIn applies the In predicate on the "project_link" field.
func ProjectLinkIn(vs ...string) predicate.UserProject {
	return predicate.UserProject(sql.FieldIn(FieldProjectLink, vs...))
}

// ProjectLinkNotIn applies the NotIn predicate on the "project_link" field.
func ProjectLinkNotIn(vs ...string) predicate.UserProject {
	return predicate.UserProject(sql.FieldNotIn(FieldProjectLink, vs...))
}

// ProjectLinkGT applies the GT predicate on the "project_link" field.
func ProjectLinkGT(v string) predicate.UserProject {
	return predicate.UserProject(sql.FieldGT(FieldProjectLink, v))
}

// ProjectLinkGTE applies the GTE predicate on the "project_link" field.
func ProjectLinkGTE(v string) predicate.UserProject {
	return predicate.UserProject(sql.FieldGTE(FieldProjectLink, v))
}

// ProjectLinkLT applies the LT predicate on the "project_link" field.
func ProjectLinkLT(v string) predicate.UserProject {
	return predicate.UserProject(sql.FieldLT(FieldProjectLink, v))
}

// ProjectLinkLTE applies the LTE predicate on the "project_link" field.
func ProjectLinkLTE(v string) predicate.UserProject {
	return predicate.UserProject(sql.FieldLTE(FieldProjectLink, v))
}

// ProjectLinkContains applies the Contains predicate on the "project_link" field.
func ProjectLinkContains(v string) predicate.UserProject {
	return predicate.UserProject(sql.FieldContains(FieldProjectLink, v))
}

// ProjectLinkHasPrefix applies the HasPrefix predicate on the "project_link" field.
func ProjectLinkHasPrefix(v string) predicate.UserProject {
	return predicate.UserProject(sql.FieldHasPrefix(FieldProjectLink, v))
}

// ProjectLinkHasSuffix applies the HasSuffix predicate on the "project_link" field.
func ProjectLinkHasSuffix(v string) predicate.UserProject {
	return predicate.UserProject(sql.FieldHasSuffix(FieldProjectLink, v))
}

// ProjectLinkIsNil applies the IsNil predicate on the "project_link" field.
func ProjectLinkIsNil() predicate.UserProject {
	return predicate.UserProject(sql.FieldIsNull(FieldProjectLink))
}

// ProjectLinkNotNil applies the NotNil predicate on the "project_link" field.
func ProjectLinkNotNil() predicate.UserProject {
	return predicate.UserProject(sql.FieldNotNull(FieldProjectLink))
}

// ProjectLinkEqualFold applies the EqualFold predicate on the "project_link" field.
func ProjectLinkEqualFold(v string) predicate.UserProject {
	return predicate.UserProject(sql.FieldEqualFold(FieldProjectLink, v))
}

// ProjectLinkContainsFold applies the ContainsFold predicate on the "project_link" field.
func ProjectLinkContainsFold(v string) predicate.UserProject {
	return predicate.UserProject(sql.FieldContainsFold(FieldProjectLink, v))
}

// TechnologiesEQ applies the EQ predicate on the "technologies" field.
func TechnologiesEQ(v string) predicate.UserProject {
	return predicate.UserProject(sql.FieldEQ(FieldTechnologies, v))
}

// TechnologiesNEQ applies the NEQ predicate on the "technologies" field.
func TechnologiesNEQ(v string) predicate.UserProject {
	return predicate.UserProject(sql.FieldNEQ(FieldTechnologies, v))
}

// TechnologiesIn applies the In predicate on the "technologies" field.
func TechnologiesIn(vs ...string) predicate.UserProject {
	return predicate.UserProject(sql.FieldIn(FieldTechnologies, vs...))
}

// TechnologiesNotIn applies the NotIn predicate on the "technologies" field.
func TechnologiesNotIn(vs ...string) predicate.UserProject {
	return predicate.UserProject(sql.FieldNotIn(FieldTechnologies, vs...))
}

// TechnologiesGT applies the GT predicate on the "technologies" field.
func TechnologiesGT(v string) predicate.UserProject {
	return predicate.UserProject(sql.FieldGT(FieldTechnologies, v))
}

// TechnologiesGTE applies the GTE predicate on the "technologies" field.
func TechnologiesGTE(v string) predicate.UserProject {
	return predicate.UserProject(sql.FieldGTE(FieldTechnologies, v))
}

// TechnologiesLT applies the LT predicate on the "technologies" field.
func TechnologiesLT(v string) predicate.UserProject {
	return predicate.UserProject(sql.FieldLT(FieldTechnologies, v))
}

// TechnologiesLTE applies the LTE predicate on the "technologies" field.
func TechnologiesLTE(v string) predicate.UserProject {
	return predicate.UserProject(sql.FieldLTE(FieldTechnologies, v))
}

// TechnologiesContains applies the Contains predicate on the "technologies" field.
func TechnologiesContains(v string) predicate.UserProject {
	return predicate.UserProject(sql.FieldContains(FieldTechnologies, v))
}

// TechnologiesHasPrefix applies the HasPrefix predicate on the "technologies" field.
func TechnologiesHasPrefix(v string) predicate.UserProject {
	return predicate.UserProject(sql.FieldHasPrefix(FieldTechnologies, v))
}

// TechnologiesHasSuffix applies the HasSuffix predicate on the "technologies" field.
func TechnologiesHasSuffix(v string) predicate.UserProject {
	return predicate.UserProject(sql.FieldHasSuffix(FieldTechnologies, v))
}

// TechnologiesIsNil applies the IsNil predicate on the "technologies" field.
func TechnologiesIsNil() predicate.UserProject {
	return predicate.UserProject(sql.FieldIsNull(FieldTechnologies))
}

// TechnologiesNotNil applies the NotNil predicate on the "technologies" field.
func TechnologiesNotNil() predicate.UserProject {
	return predicate.UserProject(sql.FieldNotNull(FieldTechnologies))
}

// TechnologiesEqualFold applies the EqualFold predicate on the "technologies" field.
func TechnologiesEqualFold(v string) predicate.UserProject {
	return predicate.UserProject(sql.FieldEqualFold(FieldTechnologies, v))
}

// TechnologiesContainsFold applies the ContainsFold predicate on the "technologies" field.
func TechnologiesContainsFold(v string) predicate.UserProject {
	return predicate.UserProject(sql.FieldContainsFold(FieldTechnologies, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.UserProject {
	return predicate.UserProject(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.UserProject {
	return predicate.UserProject(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.UserProject {
	return predicate.UserProject(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.UserProject {
	return predicate.UserProject(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.UserProject {
	return predicate.UserProject(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.UserProject {
	return predicate.UserProject(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.UserProject {
	return predicate.UserProject(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.UserProject {
	return predicate.UserProject(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.UserProject {
	return predicate.UserProject(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.UserProject {
	return predicate.UserProject(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.UserProject {
	return predicate.UserProject(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.UserProject {
	return predicate.UserProject(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.UserProject {
	return predicate.UserProject(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.UserProject {
	return predicate.UserProject(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.UserProject {
	return predicate.UserProject(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.UserProject {
	return predicate.UserProject(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.UserProject {
	return predicate.UserProject(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.UserProject {
	return predicate.UserProject(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.UserProject {
	return predicate.UserProject(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.UserProject {
	return predicate.UserProject(sql.FieldNotNull(FieldUpdatedAt))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.UserProject {
	return predicate.UserProject(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.UserProject {
	return predicate.UserProject(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserProject) predicate.UserProject {
	return predicate.UserProject(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserProject) predicate.UserProject {
	return predicate.UserProject(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserProject) predicate.UserProject {
	return predicate.UserProject(sql.NotPredicates(p))
}

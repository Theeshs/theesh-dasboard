// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"theedashboard/ent/experience"
	"theedashboard/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExperienceCreate is the builder for creating a Experience entity.
type ExperienceCreate struct {
	config
	mutation *ExperienceMutation
	hooks    []Hook
}

// SetCompanyName sets the "company_name" field.
func (ec *ExperienceCreate) SetCompanyName(s string) *ExperienceCreate {
	ec.mutation.SetCompanyName(s)
	return ec
}

// SetStartDate sets the "start_date" field.
func (ec *ExperienceCreate) SetStartDate(t time.Time) *ExperienceCreate {
	ec.mutation.SetStartDate(t)
	return ec
}

// SetEndDate sets the "end_date" field.
func (ec *ExperienceCreate) SetEndDate(t time.Time) *ExperienceCreate {
	ec.mutation.SetEndDate(t)
	return ec
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (ec *ExperienceCreate) SetNillableEndDate(t *time.Time) *ExperienceCreate {
	if t != nil {
		ec.SetEndDate(*t)
	}
	return ec
}

// SetCurrentPlace sets the "current_place" field.
func (ec *ExperienceCreate) SetCurrentPlace(b bool) *ExperienceCreate {
	ec.mutation.SetCurrentPlace(b)
	return ec
}

// SetNillableCurrentPlace sets the "current_place" field if the given value is not nil.
func (ec *ExperienceCreate) SetNillableCurrentPlace(b *bool) *ExperienceCreate {
	if b != nil {
		ec.SetCurrentPlace(*b)
	}
	return ec
}

// SetPosition sets the "position" field.
func (ec *ExperienceCreate) SetPosition(s string) *ExperienceCreate {
	ec.mutation.SetPosition(s)
	return ec
}

// SetUserID sets the "user_id" field.
func (ec *ExperienceCreate) SetUserID(u uint) *ExperienceCreate {
	ec.mutation.SetUserID(u)
	return ec
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ec *ExperienceCreate) SetNillableUserID(u *uint) *ExperienceCreate {
	if u != nil {
		ec.SetUserID(*u)
	}
	return ec
}

// SetCreatedAt sets the "created_at" field.
func (ec *ExperienceCreate) SetCreatedAt(t time.Time) *ExperienceCreate {
	ec.mutation.SetCreatedAt(t)
	return ec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ec *ExperienceCreate) SetNillableCreatedAt(t *time.Time) *ExperienceCreate {
	if t != nil {
		ec.SetCreatedAt(*t)
	}
	return ec
}

// SetUpdatedAt sets the "updated_at" field.
func (ec *ExperienceCreate) SetUpdatedAt(t time.Time) *ExperienceCreate {
	ec.mutation.SetUpdatedAt(t)
	return ec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ec *ExperienceCreate) SetNillableUpdatedAt(t *time.Time) *ExperienceCreate {
	if t != nil {
		ec.SetUpdatedAt(*t)
	}
	return ec
}

// SetDescription sets the "description" field.
func (ec *ExperienceCreate) SetDescription(s string) *ExperienceCreate {
	ec.mutation.SetDescription(s)
	return ec
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ec *ExperienceCreate) SetNillableDescription(s *string) *ExperienceCreate {
	if s != nil {
		ec.SetDescription(*s)
	}
	return ec
}

// SetID sets the "id" field.
func (ec *ExperienceCreate) SetID(u uint) *ExperienceCreate {
	ec.mutation.SetID(u)
	return ec
}

// SetUser sets the "user" edge to the User entity.
func (ec *ExperienceCreate) SetUser(u *User) *ExperienceCreate {
	return ec.SetUserID(u.ID)
}

// Mutation returns the ExperienceMutation object of the builder.
func (ec *ExperienceCreate) Mutation() *ExperienceMutation {
	return ec.mutation
}

// Save creates the Experience in the database.
func (ec *ExperienceCreate) Save(ctx context.Context) (*Experience, error) {
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *ExperienceCreate) SaveX(ctx context.Context) *Experience {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *ExperienceCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *ExperienceCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *ExperienceCreate) check() error {
	if _, ok := ec.mutation.CompanyName(); !ok {
		return &ValidationError{Name: "company_name", err: errors.New(`ent: missing required field "Experience.company_name"`)}
	}
	if _, ok := ec.mutation.StartDate(); !ok {
		return &ValidationError{Name: "start_date", err: errors.New(`ent: missing required field "Experience.start_date"`)}
	}
	if _, ok := ec.mutation.Position(); !ok {
		return &ValidationError{Name: "position", err: errors.New(`ent: missing required field "Experience.position"`)}
	}
	return nil
}

func (ec *ExperienceCreate) sqlSave(ctx context.Context) (*Experience, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint(id)
	}
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *ExperienceCreate) createSpec() (*Experience, *sqlgraph.CreateSpec) {
	var (
		_node = &Experience{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(experience.Table, sqlgraph.NewFieldSpec(experience.FieldID, field.TypeUint))
	)
	if id, ok := ec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ec.mutation.CompanyName(); ok {
		_spec.SetField(experience.FieldCompanyName, field.TypeString, value)
		_node.CompanyName = value
	}
	if value, ok := ec.mutation.StartDate(); ok {
		_spec.SetField(experience.FieldStartDate, field.TypeTime, value)
		_node.StartDate = value
	}
	if value, ok := ec.mutation.EndDate(); ok {
		_spec.SetField(experience.FieldEndDate, field.TypeTime, value)
		_node.EndDate = value
	}
	if value, ok := ec.mutation.CurrentPlace(); ok {
		_spec.SetField(experience.FieldCurrentPlace, field.TypeBool, value)
		_node.CurrentPlace = value
	}
	if value, ok := ec.mutation.Position(); ok {
		_spec.SetField(experience.FieldPosition, field.TypeString, value)
		_node.Position = value
	}
	if value, ok := ec.mutation.CreatedAt(); ok {
		_spec.SetField(experience.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ec.mutation.UpdatedAt(); ok {
		_spec.SetField(experience.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ec.mutation.Description(); ok {
		_spec.SetField(experience.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if nodes := ec.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   experience.UserTable,
			Columns: []string{experience.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ExperienceCreateBulk is the builder for creating many Experience entities in bulk.
type ExperienceCreateBulk struct {
	config
	err      error
	builders []*ExperienceCreate
}

// Save creates the Experience entities in the database.
func (ecb *ExperienceCreateBulk) Save(ctx context.Context) ([]*Experience, error) {
	if ecb.err != nil {
		return nil, ecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Experience, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExperienceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *ExperienceCreateBulk) SaveX(ctx context.Context) []*Experience {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *ExperienceCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *ExperienceCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"theedashboard/ent/user"
	"theedashboard/ent/userproject"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserProjectCreate is the builder for creating a UserProject entity.
type UserProjectCreate struct {
	config
	mutation *UserProjectMutation
	hooks    []Hook
}

// SetProjectName sets the "project_name" field.
func (upc *UserProjectCreate) SetProjectName(s string) *UserProjectCreate {
	upc.mutation.SetProjectName(s)
	return upc
}

// SetUserID sets the "user_id" field.
func (upc *UserProjectCreate) SetUserID(u uint) *UserProjectCreate {
	upc.mutation.SetUserID(u)
	return upc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (upc *UserProjectCreate) SetNillableUserID(u *uint) *UserProjectCreate {
	if u != nil {
		upc.SetUserID(*u)
	}
	return upc
}

// SetDescription sets the "description" field.
func (upc *UserProjectCreate) SetDescription(s string) *UserProjectCreate {
	upc.mutation.SetDescription(s)
	return upc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (upc *UserProjectCreate) SetNillableDescription(s *string) *UserProjectCreate {
	if s != nil {
		upc.SetDescription(*s)
	}
	return upc
}

// SetFromDate sets the "from_date" field.
func (upc *UserProjectCreate) SetFromDate(t time.Time) *UserProjectCreate {
	upc.mutation.SetFromDate(t)
	return upc
}

// SetNillableFromDate sets the "from_date" field if the given value is not nil.
func (upc *UserProjectCreate) SetNillableFromDate(t *time.Time) *UserProjectCreate {
	if t != nil {
		upc.SetFromDate(*t)
	}
	return upc
}

// SetToDate sets the "to_date" field.
func (upc *UserProjectCreate) SetToDate(t time.Time) *UserProjectCreate {
	upc.mutation.SetToDate(t)
	return upc
}

// SetNillableToDate sets the "to_date" field if the given value is not nil.
func (upc *UserProjectCreate) SetNillableToDate(t *time.Time) *UserProjectCreate {
	if t != nil {
		upc.SetToDate(*t)
	}
	return upc
}

// SetProjectLink sets the "project_link" field.
func (upc *UserProjectCreate) SetProjectLink(s string) *UserProjectCreate {
	upc.mutation.SetProjectLink(s)
	return upc
}

// SetNillableProjectLink sets the "project_link" field if the given value is not nil.
func (upc *UserProjectCreate) SetNillableProjectLink(s *string) *UserProjectCreate {
	if s != nil {
		upc.SetProjectLink(*s)
	}
	return upc
}

// SetTechnologies sets the "technologies" field.
func (upc *UserProjectCreate) SetTechnologies(s string) *UserProjectCreate {
	upc.mutation.SetTechnologies(s)
	return upc
}

// SetNillableTechnologies sets the "technologies" field if the given value is not nil.
func (upc *UserProjectCreate) SetNillableTechnologies(s *string) *UserProjectCreate {
	if s != nil {
		upc.SetTechnologies(*s)
	}
	return upc
}

// SetCreatedAt sets the "created_at" field.
func (upc *UserProjectCreate) SetCreatedAt(t time.Time) *UserProjectCreate {
	upc.mutation.SetCreatedAt(t)
	return upc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (upc *UserProjectCreate) SetNillableCreatedAt(t *time.Time) *UserProjectCreate {
	if t != nil {
		upc.SetCreatedAt(*t)
	}
	return upc
}

// SetUpdatedAt sets the "updated_at" field.
func (upc *UserProjectCreate) SetUpdatedAt(t time.Time) *UserProjectCreate {
	upc.mutation.SetUpdatedAt(t)
	return upc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (upc *UserProjectCreate) SetNillableUpdatedAt(t *time.Time) *UserProjectCreate {
	if t != nil {
		upc.SetUpdatedAt(*t)
	}
	return upc
}

// SetID sets the "id" field.
func (upc *UserProjectCreate) SetID(u uint) *UserProjectCreate {
	upc.mutation.SetID(u)
	return upc
}

// SetUser sets the "user" edge to the User entity.
func (upc *UserProjectCreate) SetUser(u *User) *UserProjectCreate {
	return upc.SetUserID(u.ID)
}

// Mutation returns the UserProjectMutation object of the builder.
func (upc *UserProjectCreate) Mutation() *UserProjectMutation {
	return upc.mutation
}

// Save creates the UserProject in the database.
func (upc *UserProjectCreate) Save(ctx context.Context) (*UserProject, error) {
	return withHooks(ctx, upc.sqlSave, upc.mutation, upc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (upc *UserProjectCreate) SaveX(ctx context.Context) *UserProject {
	v, err := upc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (upc *UserProjectCreate) Exec(ctx context.Context) error {
	_, err := upc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upc *UserProjectCreate) ExecX(ctx context.Context) {
	if err := upc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (upc *UserProjectCreate) check() error {
	if _, ok := upc.mutation.ProjectName(); !ok {
		return &ValidationError{Name: "project_name", err: errors.New(`ent: missing required field "UserProject.project_name"`)}
	}
	return nil
}

func (upc *UserProjectCreate) sqlSave(ctx context.Context) (*UserProject, error) {
	if err := upc.check(); err != nil {
		return nil, err
	}
	_node, _spec := upc.createSpec()
	if err := sqlgraph.CreateNode(ctx, upc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint(id)
	}
	upc.mutation.id = &_node.ID
	upc.mutation.done = true
	return _node, nil
}

func (upc *UserProjectCreate) createSpec() (*UserProject, *sqlgraph.CreateSpec) {
	var (
		_node = &UserProject{config: upc.config}
		_spec = sqlgraph.NewCreateSpec(userproject.Table, sqlgraph.NewFieldSpec(userproject.FieldID, field.TypeUint))
	)
	if id, ok := upc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := upc.mutation.ProjectName(); ok {
		_spec.SetField(userproject.FieldProjectName, field.TypeString, value)
		_node.ProjectName = value
	}
	if value, ok := upc.mutation.Description(); ok {
		_spec.SetField(userproject.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := upc.mutation.FromDate(); ok {
		_spec.SetField(userproject.FieldFromDate, field.TypeTime, value)
		_node.FromDate = value
	}
	if value, ok := upc.mutation.ToDate(); ok {
		_spec.SetField(userproject.FieldToDate, field.TypeTime, value)
		_node.ToDate = value
	}
	if value, ok := upc.mutation.ProjectLink(); ok {
		_spec.SetField(userproject.FieldProjectLink, field.TypeString, value)
		_node.ProjectLink = value
	}
	if value, ok := upc.mutation.Technologies(); ok {
		_spec.SetField(userproject.FieldTechnologies, field.TypeString, value)
		_node.Technologies = value
	}
	if value, ok := upc.mutation.CreatedAt(); ok {
		_spec.SetField(userproject.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := upc.mutation.UpdatedAt(); ok {
		_spec.SetField(userproject.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := upc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userproject.UserTable,
			Columns: []string{userproject.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserProjectCreateBulk is the builder for creating many UserProject entities in bulk.
type UserProjectCreateBulk struct {
	config
	err      error
	builders []*UserProjectCreate
}

// Save creates the UserProject entities in the database.
func (upcb *UserProjectCreateBulk) Save(ctx context.Context) ([]*UserProject, error) {
	if upcb.err != nil {
		return nil, upcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(upcb.builders))
	nodes := make([]*UserProject, len(upcb.builders))
	mutators := make([]Mutator, len(upcb.builders))
	for i := range upcb.builders {
		func(i int, root context.Context) {
			builder := upcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserProjectMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, upcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, upcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, upcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (upcb *UserProjectCreateBulk) SaveX(ctx context.Context) []*UserProject {
	v, err := upcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (upcb *UserProjectCreateBulk) Exec(ctx context.Context) error {
	_, err := upcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upcb *UserProjectCreateBulk) ExecX(ctx context.Context) {
	if err := upcb.Exec(ctx); err != nil {
		panic(err)
	}
}

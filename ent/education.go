// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"theedashboard/ent/education"
	"theedashboard/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Education is the model entity for the Education schema.
type Education struct {
	config `json:"-"`
	// ID of the ent.
	ID uint `json:"id,omitempty"`
	// InstitueName holds the value of the "institue_name" field.
	InstitueName string `json:"institue_name,omitempty"`
	// StartDate holds the value of the "start_date" field.
	StartDate time.Time `json:"start_date,omitempty"`
	// EndDate holds the value of the "end_date" field.
	EndDate time.Time `json:"end_date,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uint `json:"user_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// ModeOfStudy holds the value of the "mode_of_study" field.
	ModeOfStudy string `json:"mode_of_study,omitempty"`
	// DegreeType holds the value of the "degree_type" field.
	DegreeType string `json:"degree_type,omitempty"`
	// AreaOfStudy holds the value of the "area_of_study" field.
	AreaOfStudy string `json:"area_of_study,omitempty"`
	// CurrentyStudying holds the value of the "currenty_studying" field.
	CurrentyStudying bool `json:"currenty_studying,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EducationQuery when eager-loading is set.
	Edges        EducationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// EducationEdges holds the relations/edges for other nodes in the graph.
type EducationEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EducationEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Education) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case education.FieldCurrentyStudying:
			values[i] = new(sql.NullBool)
		case education.FieldID, education.FieldUserID:
			values[i] = new(sql.NullInt64)
		case education.FieldInstitueName, education.FieldModeOfStudy, education.FieldDegreeType, education.FieldAreaOfStudy, education.FieldDescription:
			values[i] = new(sql.NullString)
		case education.FieldStartDate, education.FieldEndDate, education.FieldCreatedAt, education.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Education fields.
func (e *Education) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case education.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = uint(value.Int64)
		case education.FieldInstitueName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field institue_name", values[i])
			} else if value.Valid {
				e.InstitueName = value.String
			}
		case education.FieldStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_date", values[i])
			} else if value.Valid {
				e.StartDate = value.Time
			}
		case education.FieldEndDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_date", values[i])
			} else if value.Valid {
				e.EndDate = value.Time
			}
		case education.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				e.UserID = uint(value.Int64)
			}
		case education.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				e.CreatedAt = value.Time
			}
		case education.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				e.UpdatedAt = value.Time
			}
		case education.FieldModeOfStudy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mode_of_study", values[i])
			} else if value.Valid {
				e.ModeOfStudy = value.String
			}
		case education.FieldDegreeType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field degree_type", values[i])
			} else if value.Valid {
				e.DegreeType = value.String
			}
		case education.FieldAreaOfStudy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field area_of_study", values[i])
			} else if value.Valid {
				e.AreaOfStudy = value.String
			}
		case education.FieldCurrentyStudying:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field currenty_studying", values[i])
			} else if value.Valid {
				e.CurrentyStudying = value.Bool
			}
		case education.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				e.Description = value.String
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Education.
// This includes values selected through modifiers, order, etc.
func (e *Education) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Education entity.
func (e *Education) QueryUser() *UserQuery {
	return NewEducationClient(e.config).QueryUser(e)
}

// Update returns a builder for updating this Education.
// Note that you need to call Education.Unwrap() before calling this method if this Education
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Education) Update() *EducationUpdateOne {
	return NewEducationClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Education entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Education) Unwrap() *Education {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Education is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Education) String() string {
	var builder strings.Builder
	builder.WriteString("Education(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("institue_name=")
	builder.WriteString(e.InstitueName)
	builder.WriteString(", ")
	builder.WriteString("start_date=")
	builder.WriteString(e.StartDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_date=")
	builder.WriteString(e.EndDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", e.UserID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(e.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(e.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("mode_of_study=")
	builder.WriteString(e.ModeOfStudy)
	builder.WriteString(", ")
	builder.WriteString("degree_type=")
	builder.WriteString(e.DegreeType)
	builder.WriteString(", ")
	builder.WriteString("area_of_study=")
	builder.WriteString(e.AreaOfStudy)
	builder.WriteString(", ")
	builder.WriteString("currenty_studying=")
	builder.WriteString(fmt.Sprintf("%v", e.CurrentyStudying))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(e.Description)
	builder.WriteByte(')')
	return builder.String()
}

// Educations is a parsable slice of Education.
type Educations []*Education

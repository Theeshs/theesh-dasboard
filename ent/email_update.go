// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"theedashboard/ent/email"
	"theedashboard/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EmailUpdate is the builder for updating Email entities.
type EmailUpdate struct {
	config
	hooks    []Hook
	mutation *EmailMutation
}

// Where appends a list predicates to the EmailUpdate builder.
func (eu *EmailUpdate) Where(ps ...predicate.Email) *EmailUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetCallBackEmail sets the "call_back_email" field.
func (eu *EmailUpdate) SetCallBackEmail(s string) *EmailUpdate {
	eu.mutation.SetCallBackEmail(s)
	return eu
}

// SetNillableCallBackEmail sets the "call_back_email" field if the given value is not nil.
func (eu *EmailUpdate) SetNillableCallBackEmail(s *string) *EmailUpdate {
	if s != nil {
		eu.SetCallBackEmail(*s)
	}
	return eu
}

// SetMessage sets the "message" field.
func (eu *EmailUpdate) SetMessage(s string) *EmailUpdate {
	eu.mutation.SetMessage(s)
	return eu
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (eu *EmailUpdate) SetNillableMessage(s *string) *EmailUpdate {
	if s != nil {
		eu.SetMessage(*s)
	}
	return eu
}

// ClearMessage clears the value of the "message" field.
func (eu *EmailUpdate) ClearMessage() *EmailUpdate {
	eu.mutation.ClearMessage()
	return eu
}

// SetName sets the "name" field.
func (eu *EmailUpdate) SetName(s string) *EmailUpdate {
	eu.mutation.SetName(s)
	return eu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (eu *EmailUpdate) SetNillableName(s *string) *EmailUpdate {
	if s != nil {
		eu.SetName(*s)
	}
	return eu
}

// SetSubject sets the "subject" field.
func (eu *EmailUpdate) SetSubject(s string) *EmailUpdate {
	eu.mutation.SetSubject(s)
	return eu
}

// SetNillableSubject sets the "subject" field if the given value is not nil.
func (eu *EmailUpdate) SetNillableSubject(s *string) *EmailUpdate {
	if s != nil {
		eu.SetSubject(*s)
	}
	return eu
}

// SetCreatedAt sets the "created_at" field.
func (eu *EmailUpdate) SetCreatedAt(t time.Time) *EmailUpdate {
	eu.mutation.SetCreatedAt(t)
	return eu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (eu *EmailUpdate) SetNillableCreatedAt(t *time.Time) *EmailUpdate {
	if t != nil {
		eu.SetCreatedAt(*t)
	}
	return eu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (eu *EmailUpdate) ClearCreatedAt() *EmailUpdate {
	eu.mutation.ClearCreatedAt()
	return eu
}

// SetUpdatedAt sets the "updated_at" field.
func (eu *EmailUpdate) SetUpdatedAt(t time.Time) *EmailUpdate {
	eu.mutation.SetUpdatedAt(t)
	return eu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (eu *EmailUpdate) SetNillableUpdatedAt(t *time.Time) *EmailUpdate {
	if t != nil {
		eu.SetUpdatedAt(*t)
	}
	return eu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (eu *EmailUpdate) ClearUpdatedAt() *EmailUpdate {
	eu.mutation.ClearUpdatedAt()
	return eu
}

// Mutation returns the EmailMutation object of the builder.
func (eu *EmailUpdate) Mutation() *EmailMutation {
	return eu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EmailUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EmailUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EmailUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EmailUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eu *EmailUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(email.Table, email.Columns, sqlgraph.NewFieldSpec(email.FieldID, field.TypeUint))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.CallBackEmail(); ok {
		_spec.SetField(email.FieldCallBackEmail, field.TypeString, value)
	}
	if value, ok := eu.mutation.Message(); ok {
		_spec.SetField(email.FieldMessage, field.TypeString, value)
	}
	if eu.mutation.MessageCleared() {
		_spec.ClearField(email.FieldMessage, field.TypeString)
	}
	if value, ok := eu.mutation.Name(); ok {
		_spec.SetField(email.FieldName, field.TypeString, value)
	}
	if value, ok := eu.mutation.Subject(); ok {
		_spec.SetField(email.FieldSubject, field.TypeString, value)
	}
	if value, ok := eu.mutation.CreatedAt(); ok {
		_spec.SetField(email.FieldCreatedAt, field.TypeTime, value)
	}
	if eu.mutation.CreatedAtCleared() {
		_spec.ClearField(email.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := eu.mutation.UpdatedAt(); ok {
		_spec.SetField(email.FieldUpdatedAt, field.TypeTime, value)
	}
	if eu.mutation.UpdatedAtCleared() {
		_spec.ClearField(email.FieldUpdatedAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{email.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EmailUpdateOne is the builder for updating a single Email entity.
type EmailUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EmailMutation
}

// SetCallBackEmail sets the "call_back_email" field.
func (euo *EmailUpdateOne) SetCallBackEmail(s string) *EmailUpdateOne {
	euo.mutation.SetCallBackEmail(s)
	return euo
}

// SetNillableCallBackEmail sets the "call_back_email" field if the given value is not nil.
func (euo *EmailUpdateOne) SetNillableCallBackEmail(s *string) *EmailUpdateOne {
	if s != nil {
		euo.SetCallBackEmail(*s)
	}
	return euo
}

// SetMessage sets the "message" field.
func (euo *EmailUpdateOne) SetMessage(s string) *EmailUpdateOne {
	euo.mutation.SetMessage(s)
	return euo
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (euo *EmailUpdateOne) SetNillableMessage(s *string) *EmailUpdateOne {
	if s != nil {
		euo.SetMessage(*s)
	}
	return euo
}

// ClearMessage clears the value of the "message" field.
func (euo *EmailUpdateOne) ClearMessage() *EmailUpdateOne {
	euo.mutation.ClearMessage()
	return euo
}

// SetName sets the "name" field.
func (euo *EmailUpdateOne) SetName(s string) *EmailUpdateOne {
	euo.mutation.SetName(s)
	return euo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (euo *EmailUpdateOne) SetNillableName(s *string) *EmailUpdateOne {
	if s != nil {
		euo.SetName(*s)
	}
	return euo
}

// SetSubject sets the "subject" field.
func (euo *EmailUpdateOne) SetSubject(s string) *EmailUpdateOne {
	euo.mutation.SetSubject(s)
	return euo
}

// SetNillableSubject sets the "subject" field if the given value is not nil.
func (euo *EmailUpdateOne) SetNillableSubject(s *string) *EmailUpdateOne {
	if s != nil {
		euo.SetSubject(*s)
	}
	return euo
}

// SetCreatedAt sets the "created_at" field.
func (euo *EmailUpdateOne) SetCreatedAt(t time.Time) *EmailUpdateOne {
	euo.mutation.SetCreatedAt(t)
	return euo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (euo *EmailUpdateOne) SetNillableCreatedAt(t *time.Time) *EmailUpdateOne {
	if t != nil {
		euo.SetCreatedAt(*t)
	}
	return euo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (euo *EmailUpdateOne) ClearCreatedAt() *EmailUpdateOne {
	euo.mutation.ClearCreatedAt()
	return euo
}

// SetUpdatedAt sets the "updated_at" field.
func (euo *EmailUpdateOne) SetUpdatedAt(t time.Time) *EmailUpdateOne {
	euo.mutation.SetUpdatedAt(t)
	return euo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (euo *EmailUpdateOne) SetNillableUpdatedAt(t *time.Time) *EmailUpdateOne {
	if t != nil {
		euo.SetUpdatedAt(*t)
	}
	return euo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (euo *EmailUpdateOne) ClearUpdatedAt() *EmailUpdateOne {
	euo.mutation.ClearUpdatedAt()
	return euo
}

// Mutation returns the EmailMutation object of the builder.
func (euo *EmailUpdateOne) Mutation() *EmailMutation {
	return euo.mutation
}

// Where appends a list predicates to the EmailUpdate builder.
func (euo *EmailUpdateOne) Where(ps ...predicate.Email) *EmailUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EmailUpdateOne) Select(field string, fields ...string) *EmailUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Email entity.
func (euo *EmailUpdateOne) Save(ctx context.Context) (*Email, error) {
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EmailUpdateOne) SaveX(ctx context.Context) *Email {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EmailUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EmailUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (euo *EmailUpdateOne) sqlSave(ctx context.Context) (_node *Email, err error) {
	_spec := sqlgraph.NewUpdateSpec(email.Table, email.Columns, sqlgraph.NewFieldSpec(email.FieldID, field.TypeUint))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Email.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, email.FieldID)
		for _, f := range fields {
			if !email.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != email.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.CallBackEmail(); ok {
		_spec.SetField(email.FieldCallBackEmail, field.TypeString, value)
	}
	if value, ok := euo.mutation.Message(); ok {
		_spec.SetField(email.FieldMessage, field.TypeString, value)
	}
	if euo.mutation.MessageCleared() {
		_spec.ClearField(email.FieldMessage, field.TypeString)
	}
	if value, ok := euo.mutation.Name(); ok {
		_spec.SetField(email.FieldName, field.TypeString, value)
	}
	if value, ok := euo.mutation.Subject(); ok {
		_spec.SetField(email.FieldSubject, field.TypeString, value)
	}
	if value, ok := euo.mutation.CreatedAt(); ok {
		_spec.SetField(email.FieldCreatedAt, field.TypeTime, value)
	}
	if euo.mutation.CreatedAtCleared() {
		_spec.ClearField(email.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := euo.mutation.UpdatedAt(); ok {
		_spec.SetField(email.FieldUpdatedAt, field.TypeTime, value)
	}
	if euo.mutation.UpdatedAtCleared() {
		_spec.ClearField(email.FieldUpdatedAt, field.TypeTime)
	}
	_node = &Email{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{email.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}

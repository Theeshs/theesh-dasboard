// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"theedashboard/ent/user"
	"theedashboard/ent/userservice"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserServiceCreate is the builder for creating a UserService entity.
type UserServiceCreate struct {
	config
	mutation *UserServiceMutation
	hooks    []Hook
}

// SetServiceName sets the "service_name" field.
func (usc *UserServiceCreate) SetServiceName(s string) *UserServiceCreate {
	usc.mutation.SetServiceName(s)
	return usc
}

// SetNillableServiceName sets the "service_name" field if the given value is not nil.
func (usc *UserServiceCreate) SetNillableServiceName(s *string) *UserServiceCreate {
	if s != nil {
		usc.SetServiceName(*s)
	}
	return usc
}

// SetServiceDescription sets the "service_description" field.
func (usc *UserServiceCreate) SetServiceDescription(s string) *UserServiceCreate {
	usc.mutation.SetServiceDescription(s)
	return usc
}

// SetNillableServiceDescription sets the "service_description" field if the given value is not nil.
func (usc *UserServiceCreate) SetNillableServiceDescription(s *string) *UserServiceCreate {
	if s != nil {
		usc.SetServiceDescription(*s)
	}
	return usc
}

// SetServiceIcon sets the "service_icon" field.
func (usc *UserServiceCreate) SetServiceIcon(s string) *UserServiceCreate {
	usc.mutation.SetServiceIcon(s)
	return usc
}

// SetNillableServiceIcon sets the "service_icon" field if the given value is not nil.
func (usc *UserServiceCreate) SetNillableServiceIcon(s *string) *UserServiceCreate {
	if s != nil {
		usc.SetServiceIcon(*s)
	}
	return usc
}

// SetCreatedAt sets the "created_at" field.
func (usc *UserServiceCreate) SetCreatedAt(t time.Time) *UserServiceCreate {
	usc.mutation.SetCreatedAt(t)
	return usc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (usc *UserServiceCreate) SetNillableCreatedAt(t *time.Time) *UserServiceCreate {
	if t != nil {
		usc.SetCreatedAt(*t)
	}
	return usc
}

// SetUpdatedAt sets the "updated_at" field.
func (usc *UserServiceCreate) SetUpdatedAt(t time.Time) *UserServiceCreate {
	usc.mutation.SetUpdatedAt(t)
	return usc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (usc *UserServiceCreate) SetNillableUpdatedAt(t *time.Time) *UserServiceCreate {
	if t != nil {
		usc.SetUpdatedAt(*t)
	}
	return usc
}

// SetUserID sets the "user_id" field.
func (usc *UserServiceCreate) SetUserID(u uint) *UserServiceCreate {
	usc.mutation.SetUserID(u)
	return usc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (usc *UserServiceCreate) SetNillableUserID(u *uint) *UserServiceCreate {
	if u != nil {
		usc.SetUserID(*u)
	}
	return usc
}

// SetID sets the "id" field.
func (usc *UserServiceCreate) SetID(u uint) *UserServiceCreate {
	usc.mutation.SetID(u)
	return usc
}

// SetUser sets the "user" edge to the User entity.
func (usc *UserServiceCreate) SetUser(u *User) *UserServiceCreate {
	return usc.SetUserID(u.ID)
}

// Mutation returns the UserServiceMutation object of the builder.
func (usc *UserServiceCreate) Mutation() *UserServiceMutation {
	return usc.mutation
}

// Save creates the UserService in the database.
func (usc *UserServiceCreate) Save(ctx context.Context) (*UserService, error) {
	return withHooks(ctx, usc.sqlSave, usc.mutation, usc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (usc *UserServiceCreate) SaveX(ctx context.Context) *UserService {
	v, err := usc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (usc *UserServiceCreate) Exec(ctx context.Context) error {
	_, err := usc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usc *UserServiceCreate) ExecX(ctx context.Context) {
	if err := usc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (usc *UserServiceCreate) check() error {
	return nil
}

func (usc *UserServiceCreate) sqlSave(ctx context.Context) (*UserService, error) {
	if err := usc.check(); err != nil {
		return nil, err
	}
	_node, _spec := usc.createSpec()
	if err := sqlgraph.CreateNode(ctx, usc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint(id)
	}
	usc.mutation.id = &_node.ID
	usc.mutation.done = true
	return _node, nil
}

func (usc *UserServiceCreate) createSpec() (*UserService, *sqlgraph.CreateSpec) {
	var (
		_node = &UserService{config: usc.config}
		_spec = sqlgraph.NewCreateSpec(userservice.Table, sqlgraph.NewFieldSpec(userservice.FieldID, field.TypeUint))
	)
	if id, ok := usc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := usc.mutation.ServiceName(); ok {
		_spec.SetField(userservice.FieldServiceName, field.TypeString, value)
		_node.ServiceName = value
	}
	if value, ok := usc.mutation.ServiceDescription(); ok {
		_spec.SetField(userservice.FieldServiceDescription, field.TypeString, value)
		_node.ServiceDescription = value
	}
	if value, ok := usc.mutation.ServiceIcon(); ok {
		_spec.SetField(userservice.FieldServiceIcon, field.TypeString, value)
		_node.ServiceIcon = value
	}
	if value, ok := usc.mutation.CreatedAt(); ok {
		_spec.SetField(userservice.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := usc.mutation.UpdatedAt(); ok {
		_spec.SetField(userservice.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := usc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userservice.UserTable,
			Columns: []string{userservice.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserServiceCreateBulk is the builder for creating many UserService entities in bulk.
type UserServiceCreateBulk struct {
	config
	err      error
	builders []*UserServiceCreate
}

// Save creates the UserService entities in the database.
func (uscb *UserServiceCreateBulk) Save(ctx context.Context) ([]*UserService, error) {
	if uscb.err != nil {
		return nil, uscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(uscb.builders))
	nodes := make([]*UserService, len(uscb.builders))
	mutators := make([]Mutator, len(uscb.builders))
	for i := range uscb.builders {
		func(i int, root context.Context) {
			builder := uscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserServiceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uscb *UserServiceCreateBulk) SaveX(ctx context.Context) []*UserService {
	v, err := uscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uscb *UserServiceCreateBulk) Exec(ctx context.Context) error {
	_, err := uscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uscb *UserServiceCreateBulk) ExecX(ctx context.Context) {
	if err := uscb.Exec(ctx); err != nil {
		panic(err)
	}
}
